
SdCardReader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08008094  08008094  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008094  08008094  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800809c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000594  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000061c  2000061c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016149  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034b6  00000000  00000000  00036201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  000396b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  0003a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002067f  00000000  00000000  0003b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019cd7  00000000  00000000  0005be3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5ad0  00000000  00000000  00075b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b5e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a28  00000000  00000000  0012b638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e20 	.word	0x08007e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007e20 	.word	0x08007e20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
     PA5   ------> SPI1_SCK
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000296:	4b52      	ldr	r3, [pc, #328]	; (80003e0 <MX_GPIO_Init+0x160>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a51      	ldr	r2, [pc, #324]	; (80003e0 <MX_GPIO_Init+0x160>)
 800029c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b4f      	ldr	r3, [pc, #316]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ae:	4b4c      	ldr	r3, [pc, #304]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a4b      	ldr	r2, [pc, #300]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b49      	ldr	r3, [pc, #292]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	4b46      	ldr	r3, [pc, #280]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a45      	ldr	r2, [pc, #276]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b40      	ldr	r3, [pc, #256]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a3f      	ldr	r2, [pc, #252]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b3d      	ldr	r3, [pc, #244]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f6:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a39      	ldr	r2, [pc, #228]	; (80003e0 <MX_GPIO_Init+0x160>)
 80002fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <MX_GPIO_Init+0x160>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800030e:	2200      	movs	r2, #0
 8000310:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000314:	4833      	ldr	r0, [pc, #204]	; (80003e4 <MX_GPIO_Init+0x164>)
 8000316:	f000 ff69 	bl	80011ec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_Card_CS_GPIO_Port, SD_Card_CS_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	4832      	ldr	r0, [pc, #200]	; (80003e8 <MX_GPIO_Init+0x168>)
 8000320:	f000 ff64 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000324:	2337      	movs	r3, #55	; 0x37
 8000326:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000328:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	4619      	mov	r1, r3
 8000338:	482a      	ldr	r0, [pc, #168]	; (80003e4 <MX_GPIO_Init+0x164>)
 800033a:	f000 fddd 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800033e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000342:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2300      	movs	r3, #0
 800034e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4619      	mov	r1, r3
 8000356:	4823      	ldr	r0, [pc, #140]	; (80003e4 <MX_GPIO_Init+0x164>)
 8000358:	f000 fdce 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Card_CS_Pin;
 800035c:	2302      	movs	r3, #2
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_Card_CS_GPIO_Port, &GPIO_InitStruct);
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	4619      	mov	r1, r3
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <MX_GPIO_Init+0x168>)
 8000374:	f000 fdc0 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000378:	2301      	movs	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	4619      	mov	r1, r3
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f000 fdb3 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8000392:	2320      	movs	r3, #32
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000396:	2302      	movs	r3, #2
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800039e:	2303      	movs	r3, #3
 80003a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80003a2:	2305      	movs	r3, #5
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4619      	mov	r1, r3
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f000 fda2 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80003b4:	23c0      	movs	r3, #192	; 0xc0
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b8:	2302      	movs	r3, #2
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003bc:	2301      	movs	r3, #1
 80003be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c0:	2303      	movs	r3, #3
 80003c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80003c4:	2305      	movs	r3, #5
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	4619      	mov	r1, r3
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f000 fd91 	bl	8000ef8 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3728      	adds	r7, #40	; 0x28
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	48001000 	.word	0x48001000
 80003e8:	48000800 	.word	0x48000800

080003ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_I2C1_Init+0x74>)
 80003f2:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <MX_I2C1_Init+0x78>)
 80003f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_I2C1_Init+0x74>)
 80003f8:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <MX_I2C1_Init+0x7c>)
 80003fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_I2C1_Init+0x74>)
 8000404:	2201      	movs	r2, #1
 8000406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_I2C1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000426:	480e      	ldr	r0, [pc, #56]	; (8000460 <MX_I2C1_Init+0x74>)
 8000428:	f000 fef8 	bl	800121c <HAL_I2C_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000432:	f000 f9af 	bl	8000794 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000436:	2100      	movs	r1, #0
 8000438:	4809      	ldr	r0, [pc, #36]	; (8000460 <MX_I2C1_Init+0x74>)
 800043a:	f000 ff7e 	bl	800133a <HAL_I2CEx_ConfigAnalogFilter>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000444:	f000 f9a6 	bl	8000794 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000448:	2100      	movs	r1, #0
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_I2C1_Init+0x74>)
 800044c:	f000 ffc0 	bl	80013d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000456:	f000 f99d 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000a4 	.word	0x200000a4
 8000464:	40005400 	.word	0x40005400
 8000468:	2000090e 	.word	0x2000090e

0800046c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <HAL_I2C_MspInit+0x7c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d127      	bne.n	80004de <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <HAL_I2C_MspInit+0x80>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <HAL_I2C_MspInit+0x80>)
 8000494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <HAL_I2C_MspInit+0x80>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80004a6:	23c0      	movs	r3, #192	; 0xc0
 80004a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004aa:	2312      	movs	r3, #18
 80004ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b2:	2303      	movs	r3, #3
 80004b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004b6:	2304      	movs	r3, #4
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4619      	mov	r1, r3
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <HAL_I2C_MspInit+0x84>)
 80004c2:	f000 fd19 	bl	8000ef8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_I2C_MspInit+0x80>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_I2C_MspInit+0x80>)
 80004cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_I2C_MspInit+0x80>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004de:	bf00      	nop
 80004e0:	3728      	adds	r7, #40	; 0x28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40005400 	.word	0x40005400
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000400 	.word	0x48000400

080004f4 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80004f4:	b40f      	push	{r0, r1, r2, r3}
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <myprintf+0x44>)
 800050c:	f007 f82c 	bl	8007568 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <myprintf+0x44>)
 8000512:	f7ff fe5d 	bl	80001d0 <strlen>
 8000516:	4603      	mov	r3, r0
 8000518:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, len, -1);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	b29a      	uxth	r2, r3
 800051e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000522:	4905      	ldr	r1, [pc, #20]	; (8000538 <myprintf+0x44>)
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <myprintf+0x48>)
 8000526:	f003 f911 	bl	800374c <HAL_UART_Transmit>

}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000534:	b004      	add	sp, #16
 8000536:	4770      	bx	lr
 8000538:	200000f0 	.word	0x200000f0
 800053c:	20000258 	.word	0x20000258

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fb66 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f8be 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f7ff fe96 	bl	8000280 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000554:	f7ff ff4a 	bl	80003ec <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000558:	f000 face 	bl	8000af8 <MX_USB_PCD_Init>
  MX_FATFS_Init();
 800055c:	f003 fd4c 	bl	8003ff8 <MX_FATFS_Init>
  MX_UART4_Init();
 8000560:	f000 fa56 	bl	8000a10 <MX_UART4_Init>
  MX_SPI2_Init();
 8000564:	f000 f91c 	bl	80007a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000568:	484e      	ldr	r0, [pc, #312]	; (80006a4 <main+0x164>)
 800056a:	f7ff ffc3 	bl	80004f4 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 800056e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000572:	f000 fbb7 	bl	8000ce4 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now, LS - set to 0 because f_mount logic fails when set to 1 = mount now.
 8000576:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800057a:	2201      	movs	r2, #1
 800057c:	494a      	ldr	r1, [pc, #296]	; (80006a8 <main+0x168>)
 800057e:	4618      	mov	r0, r3
 8000580:	f006 f920 	bl	80067c4 <f_mount>
 8000584:	4603      	mov	r3, r0
 8000586:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 800058a:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800058e:	2b00      	cmp	r3, #0
 8000590:	d006      	beq.n	80005a0 <main+0x60>
  	myprintf("f_mount error (%i)\r\n", fres);
 8000592:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000596:	4619      	mov	r1, r3
 8000598:	4844      	ldr	r0, [pc, #272]	; (80006ac <main+0x16c>)
 800059a:	f7ff ffab 	bl	80004f4 <myprintf>
  	while(1);
 800059e:	e7fe      	b.n	800059e <main+0x5e>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 80005a0:	f107 0220 	add.w	r2, r7, #32
 80005a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	483f      	ldr	r0, [pc, #252]	; (80006a8 <main+0x168>)
 80005ac:	f006 fe18 	bl	80071e0 <f_getfree>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 80005b6:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <main+0x8c>
  	myprintf("f_getfree error (%i)\r\n", fres);
 80005be:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80005c2:	4619      	mov	r1, r3
 80005c4:	483a      	ldr	r0, [pc, #232]	; (80006b0 <main+0x170>)
 80005c6:	f7ff ff95 	bl	80004f4 <myprintf>
  	while(1);
 80005ca:	e7fe      	b.n	80005ca <main+0x8a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80005cc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80005d0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80005da:	3b02      	subs	r3, #2
 80005dc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80005e0:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80005e4:	6812      	ldr	r2, [r2, #0]
 80005e6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80005ea:	fb02 f303 	mul.w	r3, r2, r3
 80005ee:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
    free_sectors = free_clusters * getFreeFs->csize;
 80005f2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80005f6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000600:	461a      	mov	r2, r3
 8000602:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000606:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000614:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8000618:	0859      	lsrs	r1, r3, #1
 800061a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800061e:	085b      	lsrs	r3, r3, #1
 8000620:	461a      	mov	r2, r3
 8000622:	4824      	ldr	r0, [pc, #144]	; (80006b4 <main+0x174>)
 8000624:	f7ff ff66 	bl	80004f4 <myprintf>

    //Now let's try to open a file in the SD Card
    const char* fileName = "test.wav";
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <main+0x178>)
 800062a:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
    fres = f_open(&fil, fileName, FA_READ);
 800062e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000632:	2201      	movs	r2, #1
 8000634:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8000638:	4618      	mov	r0, r3
 800063a:	f006 f90b 	bl	8006854 <f_open>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8000644:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <main+0x114>
  	myprintf("f_open error (%i)\r\n");
 800064c:	481b      	ldr	r0, [pc, #108]	; (80006bc <main+0x17c>)
 800064e:	f7ff ff51 	bl	80004f4 <myprintf>
  	while(1);
 8000652:	e7fe      	b.n	8000652 <main+0x112>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <main+0x180>)
 8000656:	f7ff ff4d 	bl	80004f4 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800065a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800065e:	463b      	mov	r3, r7
 8000660:	211e      	movs	r1, #30
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fe89 	bl	800737a <f_gets>
 8000668:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
    if(rres != 0) {
 800066c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <main+0x140>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <main+0x184>)
 800067a:	f7ff ff3b 	bl	80004f4 <myprintf>
 800067e:	e005      	b.n	800068c <main+0x14c>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8000680:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000684:	4619      	mov	r1, r3
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <main+0x188>)
 8000688:	f7ff ff34 	bl	80004f4 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fd7d 	bl	8007190 <f_close>
//
//    //Be a tidy kiwi - don't forget to close your file!
//    f_close(&fil);

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000696:	2200      	movs	r2, #0
 8000698:	4903      	ldr	r1, [pc, #12]	; (80006a8 <main+0x168>)
 800069a:	2000      	movs	r0, #0
 800069c:	f006 f892 	bl	80067c4 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <main+0x160>
 80006a2:	bf00      	nop
 80006a4:	08007e38 	.word	0x08007e38
 80006a8:	08007e58 	.word	0x08007e58
 80006ac:	08007e5c 	.word	0x08007e5c
 80006b0:	08007e74 	.word	0x08007e74
 80006b4:	08007e8c 	.word	0x08007e8c
 80006b8:	08007ed4 	.word	0x08007ed4
 80006bc:	08007ee0 	.word	0x08007ee0
 80006c0:	08007ef4 	.word	0x08007ef4
 80006c4:	08007f24 	.word	0x08007f24
 80006c8:	08007f50 	.word	0x08007f50

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09e      	sub	sp, #120	; 0x78
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006d6:	2228      	movs	r2, #40	; 0x28
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 ff10 	bl	8007500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	223c      	movs	r2, #60	; 0x3c
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 ff02 	bl	8007500 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006fc:	2303      	movs	r3, #3
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000700:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070a:	2301      	movs	r3, #1
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2310      	movs	r3, #16
 8000710:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800071c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000720:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000726:	4618      	mov	r0, r3
 8000728:	f000 ff7c 	bl	8001624 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000732:	f000 f82f 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f001 ffa4 	bl	80026a0 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075e:	f000 f819 	bl	8000794 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <SystemClock_Config+0xc4>)
 8000764:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f9c8 	bl	8002b0c <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000782:	f000 f807 	bl	8000794 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3778      	adds	r7, #120	; 0x78
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	00020028 	.word	0x00020028

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_SPI2_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_SPI2_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_SPI2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_SPI2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI2_Init+0x74>)
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_SPI2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ee:	2207      	movs	r2, #7
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI2_Init+0x74>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_SPI2_Init+0x74>)
 8000800:	f002 fb34 	bl	8002e6c <HAL_SPI_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800080a:	f7ff ffc3 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001f0 	.word	0x200001f0
 8000818:	40003800 	.word	0x40003800

0800081c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <HAL_SPI_MspInit+0xb8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d145      	bne.n	80008ca <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 800085c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 8000874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_SPI_MspInit+0xbc>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000898:	2305      	movs	r3, #5
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <HAL_SPI_MspInit+0xc0>)
 80008a4:	f000 fb28 	bl	8000ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_SPI_MspInit+0xc4>)
 80008c6:	f000 fb17 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40003800 	.word	0x40003800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48001400 	.word	0x48001400
 80008e0:	48000400 	.word	0x48000400

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091a:	2007      	movs	r0, #7
 800091c:	f000 fab8 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f994 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f006 fd7c 	bl	80074ac <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000a000 	.word	0x2000a000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000254 	.word	0x20000254
 80009e8:	20000620 	.word	0x20000620

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_UART4_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_UART4_Init+0x58>)
 8000a54:	f002 fe2c 	bl	80036b0 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f7ff fe99 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000258 	.word	0x20000258
 8000a6c:	40004c00 	.word	0x40004c00

08000a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_UART_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d128      	bne.n	8000ae4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ac2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000ae0:	f000 fa0a 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40004c00 	.word	0x40004c00
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000800 	.word	0x48000800

08000af8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <MX_USB_PCD_Init+0x40>)
 8000b00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000b04:	2208      	movs	r2, #8
 8000b06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_USB_PCD_Init+0x3c>)
 8000b22:	f000 fca1 	bl	8001468 <HAL_PCD_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000b2c:	f7ff fe32 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200002dc 	.word	0x200002dc
 8000b38:	40005c00 	.word	0x40005c00

08000b3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <HAL_PCD_MspInit+0x80>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d129      	bne.n	8000bb2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b88:	230e      	movs	r3, #14
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f000 f9af 	bl	8000ef8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005c00 	.word	0x40005c00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f7ff fefd 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f006 fc61 	bl	80074b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fca3 	bl	8000540 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bfc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c08:	0800809c 	.word	0x0800809c
  ldr r2, =_sbss
 8000c0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c10:	2000061c 	.word	0x2000061c

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x28>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x28>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f931 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe56 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	f000 f911 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200005c8 	.word	0x200005c8

08000ccc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200005c8 	.word	0x200005c8

08000ce4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e154      	b.n	80011b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8146 	beq.w	80011ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <HAL_GPIO_Init+0x40>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d130      	bne.n	8000f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0201 	and.w	r2, r3, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	6939      	ldr	r1, [r7, #16]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80a0 	beq.w	80011ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001084:	4a53      	ldr	r2, [pc, #332]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ae:	d019      	beq.n	80010e4 <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2e4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1e4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1dc>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e008      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d4:	2305      	movs	r3, #5
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d8:	2303      	movs	r3, #3
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e4:	2300      	movs	r3, #0
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f6:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f aea3 	bne.w	8000f08 <HAL_GPIO_Init+0x10>
  }
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000c00 	.word	0x48000c00
 80011e4:	48001000 	.word	0x48001000
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001208:	e002      	b.n	8001210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e081      	b.n	8001332 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff f912 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800126c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800127c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d107      	bne.n	8001296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	e006      	b.n	80012a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d104      	bne.n	80012b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69d9      	ldr	r1, [r3, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1a      	ldr	r2, [r3, #32]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2220      	movs	r2, #32
 800131e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b20      	cmp	r3, #32
 800134e:	d138      	bne.n	80013c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800135a:	2302      	movs	r3, #2
 800135c:	e032      	b.n	80013c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2224      	movs	r2, #36	; 0x24
 800136a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800138c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2220      	movs	r2, #32
 80013b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d139      	bne.n	800145a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e033      	b.n	800145c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800145a:	2302      	movs	r3, #2
  }
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af06      	add	r7, sp, #24
 800146e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0d0      	b.n	800161c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fb54 	bl	8000b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fd6c 	bl	8003f7e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e04c      	b.n	8001546 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3301      	adds	r3, #1
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	b298      	uxth	r0, r3
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3336      	adds	r3, #54	; 0x36
 80014ea:	4602      	mov	r2, r0
 80014ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	3303      	adds	r3, #3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3338      	adds	r3, #56	; 0x38
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	333c      	adds	r3, #60	; 0x3c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3ad      	bcc.n	80014ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e044      	b.n	80015e0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3b5      	bcc.n	8001556 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	687e      	ldr	r6, [r7, #4]
 80015f2:	466d      	mov	r5, sp
 80015f4:	f106 0410 	add.w	r4, r6, #16
 80015f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	602b      	str	r3, [r5, #0]
 8001600:	1d33      	adds	r3, r6, #4
 8001602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f002 fcd5 	bl	8003fb4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800162a:	af00      	add	r7, sp, #0
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001634:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f001 b823 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 817d 	beq.w	800195a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001660:	4bbc      	ldr	r3, [pc, #752]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00c      	beq.n	8001686 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800166c:	4bb9      	ldr	r3, [pc, #740]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d15c      	bne.n	8001732 <HAL_RCC_OscConfig+0x10e>
 8001678:	4bb6      	ldr	r3, [pc, #728]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d155      	bne.n	8001732 <HAL_RCC_OscConfig+0x10e>
 8001686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800169a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d102      	bne.n	80016b8 <HAL_RCC_OscConfig+0x94>
 80016b2:	4ba8      	ldr	r3, [pc, #672]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	e015      	b.n	80016e4 <HAL_RCC_OscConfig+0xc0>
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016e0:	4b9c      	ldr	r3, [pc, #624]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016f8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 811f 	beq.w	8001958 <HAL_RCC_OscConfig+0x334>
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 8116 	bne.w	8001958 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	f000 bfaf 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x12e>
 8001744:	4b83      	ldr	r3, [pc, #524]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a82      	ldr	r2, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 800174a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e036      	b.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x158>
 8001762:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7b      	ldr	r2, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b79      	ldr	r3, [pc, #484]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a78      	ldr	r2, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e021      	b.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x184>
 800178e:	4b71      	ldr	r3, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a70      	ldr	r2, [pc, #448]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6d      	ldr	r2, [pc, #436]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f023 020f 	bic.w	r2, r3, #15
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	495f      	ldr	r1, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d059      	beq.n	800189e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fa6f 	bl	8000ccc <HAL_GetTick>
 80017ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa6a 	bl	8000ccc <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d902      	bls.n	800180a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	f000 bf43 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800181e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d102      	bne.n	800183c <HAL_RCC_OscConfig+0x218>
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	e015      	b.n	8001868 <HAL_RCC_OscConfig+0x244>
 800183c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001840:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001854:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001858:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001870:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001874:	fa92 f2a2 	rbit	r2, r2
 8001878:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800187c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ab      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1d0>
 800189c:	e05d      	b.n	800195a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fa15 	bl	8000ccc <HAL_GetTick>
 80018a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fa10 	bl	8000ccc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d902      	bls.n	80018be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f000 bee9 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
 80018be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2cc>
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x2f8>
 80018f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001908:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800190c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_RCC_OscConfig+0x330>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001920:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001924:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001928:	fa92 f2a2 	rbit	r2, r2
 800192c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001930:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001934:	fab2 f282 	clz	r2, r2
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f042 0220 	orr.w	r2, r2, #32
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f002 021f 	and.w	r2, r2, #31
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ab      	bne.n	80018a8 <HAL_RCC_OscConfig+0x284>
 8001950:	e003      	b.n	800195a <HAL_RCC_OscConfig+0x336>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 817d 	beq.w	8001c6a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001970:	4ba6      	ldr	r3, [pc, #664]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800197c:	4ba3      	ldr	r3, [pc, #652]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d172      	bne.n	8001a6e <HAL_RCC_OscConfig+0x44a>
 8001988:	4ba0      	ldr	r3, [pc, #640]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d16c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x44a>
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x3a0>
 80019be:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e013      	b.n	80019ec <HAL_RCC_OscConfig+0x3c8>
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019e8:	4b88      	ldr	r3, [pc, #544]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2202      	movs	r2, #2
 80019ee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019f6:	fa92 f2a2 	rbit	r2, r2
 80019fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f042 0220 	orr.w	r2, r2, #32
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 021f 	and.w	r2, r2, #31
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <HAL_RCC_OscConfig+0x410>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 be2e 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	21f8      	movs	r1, #248	; 0xf8
 8001a4a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a52:	fa91 f1a1 	rbit	r1, r1
 8001a56:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a5a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a5e:	fab1 f181 	clz	r1, r1
 8001a62:	b2c9      	uxtb	r1, r1
 8001a64:	408b      	lsls	r3, r1
 8001a66:	4969      	ldr	r1, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6c:	e0fd      	b.n	8001c6a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8088 	beq.w	8001b90 <HAL_RCC_OscConfig+0x56c>
 8001a80:	2301      	movs	r3, #1
 8001a82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a92:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff f90e 	bl	8000ccc <HAL_GetTick>
 8001ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f909 	bl	8000ccc <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d902      	bls.n	8001acc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	f000 bde2 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ade:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0x4d8>
 8001af6:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e013      	b.n	8001b24 <HAL_RCC_OscConfig+0x500>
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b20:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2202      	movs	r2, #2
 8001b26:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b2e:	fa92 f2a2 	rbit	r2, r2
 8001b32:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b3a:	fab2 f282 	clz	r2, r2
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	f042 0220 	orr.w	r2, r2, #32
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f002 021f 	and.w	r2, r2, #31
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0af      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	21f8      	movs	r1, #248	; 0xf8
 8001b6c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b74:	fa91 f1a1 	rbit	r1, r1
 8001b78:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b7c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b80:	fab1 f181 	clz	r1, r1
 8001b84:	b2c9      	uxtb	r1, r1
 8001b86:	408b      	lsls	r3, r1
 8001b88:	4920      	ldr	r1, [pc, #128]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
 8001b8e:	e06c      	b.n	8001c6a <HAL_RCC_OscConfig+0x646>
 8001b90:	2301      	movs	r3, #1
 8001b92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ba2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f886 	bl	8000ccc <HAL_GetTick>
 8001bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f881 	bl	8000ccc <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d902      	bls.n	8001bdc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f000 bd5a 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d104      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5ec>
 8001c06:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_RCC_OscConfig+0x5e8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e015      	b.n	8001c38 <HAL_RCC_OscConfig+0x614>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c34:	4bc8      	ldr	r3, [pc, #800]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ad      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8110 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d079      	beq.n	8001d84 <HAL_RCC_OscConfig+0x760>
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4bab      	ldr	r3, [pc, #684]	; (8001f5c <HAL_RCC_OscConfig+0x938>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f807 	bl	8000ccc <HAL_GetTick>
 8001cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f802 	bl	8000ccc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d902      	bls.n	8001cda <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f000 bcdb 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d18:	2202      	movs	r2, #2
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fa93 f2a3 	rbit	r2, r3
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d34:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d40:	2102      	movs	r1, #2
 8001d42:	6019      	str	r1, [r3, #0]
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f1a3 	rbit	r1, r3
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d5a:	6019      	str	r1, [r3, #0]
  return result;
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0a0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x6a0>
 8001d82:	e08d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x87c>
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001da6:	601a      	str	r2, [r3, #0]
  return result;
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001db0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <HAL_RCC_OscConfig+0x938>)
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff81 	bl	8000ccc <HAL_GetTick>
 8001dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7fe ff7c 	bl	8000ccc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d902      	bls.n	8001de6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f000 bc55 	b.w	8002690 <HAL_RCC_OscConfig+0x106c>
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dee:	2202      	movs	r2, #2
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e36:	2202      	movs	r2, #2
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e5e:	2102      	movs	r1, #2
 8001e60:	6019      	str	r1, [r3, #0]
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f1a3 	rbit	r1, r3
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e78:	6019      	str	r1, [r3, #0]
  return result;
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d197      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 81a1 	beq.w	80021f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d116      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	61d3      	str	r3, [r2, #28]
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001eee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x93c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11a      	bne.n	8001f38 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x93c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_RCC_OscConfig+0x93c>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fedd 	bl	8000ccc <HAL_GetTick>
 8001f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	e009      	b.n	8001f2c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7fe fed8 	bl	8000ccc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	; 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e3b1      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCC_OscConfig+0x93c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ef      	beq.n	8001f18 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10d      	bne.n	8001f64 <HAL_RCC_OscConfig+0x940>
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a02      	ldr	r2, [pc, #8]	; (8001f58 <HAL_RCC_OscConfig+0x934>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	e03c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x9ac>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	10908120 	.word	0x10908120
 8001f60:	40007000 	.word	0x40007000
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x96a>
 8001f74:	4bc1      	ldr	r3, [pc, #772]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4ac0      	ldr	r2, [pc, #768]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	4bbe      	ldr	r3, [pc, #760]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4abd      	ldr	r2, [pc, #756]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e020      	b.n	8001fd0 <HAL_RCC_OscConfig+0x9ac>
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x994>
 8001f9e:	4bb7      	ldr	r3, [pc, #732]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4ab6      	ldr	r2, [pc, #728]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4bb4      	ldr	r3, [pc, #720]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4ab3      	ldr	r2, [pc, #716]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x9ac>
 8001fb8:	4bb0      	ldr	r3, [pc, #704]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4aaf      	ldr	r2, [pc, #700]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	4bad      	ldr	r3, [pc, #692]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4aac      	ldr	r2, [pc, #688]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8001fca:	f023 0304 	bic.w	r3, r3, #4
 8001fce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8081 	beq.w	80020e4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fe73 	bl	8000ccc <HAL_GetTick>
 8001fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7fe fe6e 	bl	8000ccc <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e345      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800200c:	2202      	movs	r2, #2
 800200e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	fa93 f2a3 	rbit	r2, r3
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fa93 f2a3 	rbit	r2, r3
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800204a:	601a      	str	r2, [r3, #0]
  return result;
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002054:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d102      	bne.n	8002070 <HAL_RCC_OscConfig+0xa4c>
 800206a:	4b84      	ldr	r3, [pc, #528]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	e013      	b.n	8002098 <HAL_RCC_OscConfig+0xa74>
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fa93 f2a3 	rbit	r2, r3
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	4b79      	ldr	r3, [pc, #484]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020a0:	2102      	movs	r1, #2
 80020a2:	6011      	str	r1, [r2, #0]
 80020a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	fa92 f1a2 	rbit	r1, r2
 80020b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020ba:	6011      	str	r1, [r2, #0]
  return result;
 80020bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020c0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d084      	beq.n	8001fec <HAL_RCC_OscConfig+0x9c8>
 80020e2:	e07f      	b.n	80021e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fdf2 	bl	8000ccc <HAL_GetTick>
 80020e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fded 	bl	8000ccc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e2c4      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800214c:	601a      	str	r2, [r3, #0]
  return result;
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002156:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d102      	bne.n	8002172 <HAL_RCC_OscConfig+0xb4e>
 800216c:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	e013      	b.n	800219a <HAL_RCC_OscConfig+0xb76>
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800217a:	2202      	movs	r2, #2
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800219e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021a2:	2102      	movs	r1, #2
 80021a4:	6011      	str	r1, [r2, #0]
 80021a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	fa92 f1a2 	rbit	r1, r2
 80021b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021bc:	6011      	str	r1, [r2, #0]
  return result;
 80021be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d184      	bne.n	80020ee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a22      	ldr	r2, [pc, #136]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8242 	beq.w	800268e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_RCC_OscConfig+0xc58>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b08      	cmp	r3, #8
 8002214:	f000 8213 	beq.w	800263e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f040 8162 	bne.w	80024ee <HAL_RCC_OscConfig+0xeca>
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800224e:	601a      	str	r2, [r3, #0]
  return result;
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002258:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	461a      	mov	r2, r3
 800226c:	2300      	movs	r3, #0
 800226e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fd2c 	bl	8000ccc <HAL_GetTick>
 8002274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	e00c      	b.n	8002294 <HAL_RCC_OscConfig+0xc70>
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fd24 	bl	8000ccc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1fd      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800229c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022b8:	601a      	str	r2, [r3, #0]
  return result;
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_RCC_OscConfig+0xcba>
 80022d8:	4bb0      	ldr	r3, [pc, #704]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e027      	b.n	800232e <HAL_RCC_OscConfig+0xd0a>
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800230c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b9c      	ldr	r3, [pc, #624]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002332:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002336:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233a:	6011      	str	r1, [r2, #0]
 800233c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002340:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	fa92 f1a2 	rbit	r1, r2
 800234a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800234e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002352:	6011      	str	r1, [r2, #0]
  return result;
 8002354:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002358:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0220 	orr.w	r2, r2, #32
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d182      	bne.n	8002280 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	430b      	orrs	r3, r1
 800239c:	497f      	ldr	r1, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023c6:	601a      	str	r2, [r3, #0]
  return result;
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	461a      	mov	r2, r3
 80023e4:	2301      	movs	r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fc70 	bl	8000ccc <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	e009      	b.n	8002406 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe fc6b 	bl	8000ccc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e144      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800240e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800242a:	601a      	str	r2, [r3, #0]
  return result;
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002434:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0xe2c>
 800244a:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	e027      	b.n	80024a0 <HAL_RCC_OscConfig+0xe7c>
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800247e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024ac:	6011      	str	r1, [r2, #0]
 80024ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fa92 f1a2 	rbit	r1, r2
 80024bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024c4:	6011      	str	r1, [r2, #0]
  return result;
 80024c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	fab2 f282 	clz	r2, r2
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f042 0220 	orr.w	r2, r2, #32
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f002 021f 	and.w	r2, r2, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d082      	beq.n	80023f2 <HAL_RCC_OscConfig+0xdce>
 80024ec:	e0cf      	b.n	800268e <HAL_RCC_OscConfig+0x106a>
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002512:	601a      	str	r2, [r3, #0]
  return result;
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800251c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002528:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	461a      	mov	r2, r3
 8002530:	2300      	movs	r3, #0
 8002532:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fbca 	bl	8000ccc <HAL_GetTick>
 8002538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	e009      	b.n	8002552 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fbc5 	bl	8000ccc <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e09e      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800255a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002576:	601a      	str	r2, [r3, #0]
  return result;
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002580:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d104      	bne.n	80025a0 <HAL_RCC_OscConfig+0xf7c>
 8002596:	4b01      	ldr	r3, [pc, #4]	; (800259c <HAL_RCC_OscConfig+0xf78>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e029      	b.n	80025f0 <HAL_RCC_OscConfig+0xfcc>
 800259c:	40021000 	.word	0x40021000
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fa93 f2a3 	rbit	r2, r3
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCC_OscConfig+0x1078>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025fc:	6011      	str	r1, [r2, #0]
 80025fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002602:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	fa92 f1a2 	rbit	r1, r2
 800260c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002610:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002614:	6011      	str	r1, [r2, #0]
  return result;
 8002616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800261a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	fab2 f282 	clz	r2, r2
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f042 0220 	orr.w	r2, r2, #32
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f002 021f 	and.w	r2, r2, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d180      	bne.n	800253e <HAL_RCC_OscConfig+0xf1a>
 800263c:	e027      	b.n	800268e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e01e      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_OscConfig+0x1078>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800265a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800265e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	429a      	cmp	r2, r3
 8002670:	d10b      	bne.n	800268a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002672:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b09e      	sub	sp, #120	; 0x78
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e162      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b90      	ldr	r3, [pc, #576]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b8d      	ldr	r3, [pc, #564]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	498b      	ldr	r1, [pc, #556]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b89      	ldr	r3, [pc, #548]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e14a      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	497f      	ldr	r1, [pc, #508]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80dc 	beq.w	80028cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d13c      	bne.n	8002796 <HAL_RCC_ClockConfig+0xf6>
 800271c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002720:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800272a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <HAL_RCC_ClockConfig+0xa6>
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	e00f      	b.n	8002766 <HAL_RCC_ClockConfig+0xc6>
 8002746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	667b      	str	r3, [r7, #100]	; 0x64
 8002754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002758:	663b      	str	r3, [r7, #96]	; 0x60
 800275a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002762:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800276a:	65ba      	str	r2, [r7, #88]	; 0x58
 800276c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d17b      	bne.n	800288a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0f3      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d13c      	bne.n	8002818 <HAL_RCC_ClockConfig+0x178>
 800279e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x128>
 80027c2:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e00f      	b.n	80027e8 <HAL_RCC_ClockConfig+0x148>
 80027c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	643b      	str	r3, [r7, #64]	; 0x40
 80027dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e4:	4b46      	ldr	r3, [pc, #280]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80027ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f0:	fa92 f2a2 	rbit	r2, r2
 80027f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f8:	fab2 f282 	clz	r2, r2
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f042 0220 	orr.w	r2, r2, #32
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f002 021f 	and.w	r2, r2, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f202 	lsl.w	r2, r1, r2
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d13a      	bne.n	800288a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b2      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
 8002818:	2302      	movs	r3, #2
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_ClockConfig+0x1a0>
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00d      	b.n	800285c <HAL_RCC_ClockConfig+0x1bc>
 8002840:	2302      	movs	r3, #2
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2202      	movs	r2, #2
 800285e:	61ba      	str	r2, [r7, #24]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	617a      	str	r2, [r7, #20]
  return result;
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e079      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	491a      	ldr	r1, [pc, #104]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7fe fa16 	bl	8000ccc <HAL_GetTick>
 80028a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe fa12 	bl	8000ccc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e061      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d214      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	4906      	ldr	r1, [pc, #24]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e040      	b.n	800297e <HAL_RCC_ClockConfig+0x2de>
 80028fc:	40022000 	.word	0x40022000
 8002900:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_ClockConfig+0x2e8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	491a      	ldr	r1, [pc, #104]	; (8002988 <HAL_RCC_ClockConfig+0x2e8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_RCC_ClockConfig+0x2e8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4912      	ldr	r1, [pc, #72]	; (8002988 <HAL_RCC_ClockConfig+0x2e8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002942:	f000 f829 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_RCC_ClockConfig+0x2e8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002950:	22f0      	movs	r2, #240	; 0xf0
 8002952:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	60fa      	str	r2, [r7, #12]
  return result;
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	40d3      	lsrs	r3, r2
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x2ec>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	fa21 f303 	lsr.w	r3, r1, r3
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <HAL_RCC_ClockConfig+0x2f0>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCC_ClockConfig+0x2f4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f964 	bl	8000c44 <HAL_InitTick>
  
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3778      	adds	r7, #120	; 0x78
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	08007fa8 	.word	0x08007fa8
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b08b      	sub	sp, #44	; 0x2c
 800299c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x30>
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x36>
 80029c6:	e03c      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029ca:	623b      	str	r3, [r7, #32]
      break;
 80029cc:	e03c      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	607a      	str	r2, [r7, #4]
  return result;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	40d3      	lsrs	r3, r2
 80029ec:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	220f      	movs	r2, #15
 80029fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	fa92 f2a2 	rbit	r2, r2
 8002a04:	60fa      	str	r2, [r7, #12]
  return result;
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	40d3      	lsrs	r3, r2
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	e004      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	623b      	str	r3, [r7, #32]
      break;
 8002a40:	e002      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a44:	623b      	str	r3, [r7, #32]
      break;
 8002a46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a48:	6a3b      	ldr	r3, [r7, #32]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	372c      	adds	r7, #44	; 0x2c
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	007a1200 	.word	0x007a1200
 8002a60:	08007fc0 	.word	0x08007fc0
 8002a64:	08007fd0 	.word	0x08007fd0
 8002a68:	003d0900 	.word	0x003d0900

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000000 	.word	0x20000000

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a8a:	f7ff ffef 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8e:	4601      	mov	r1, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	fa92 f2a2 	rbit	r2, r2
 8002aa4:	603a      	str	r2, [r7, #0]
  return result;
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	40d3      	lsrs	r3, r2
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08007fb8 	.word	0x08007fb8

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ace:	f7ff ffcd 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002adc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ae0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	fa92 f2a2 	rbit	r2, r2
 8002ae8:	603a      	str	r2, [r7, #0]
  return result;
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	40d3      	lsrs	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08007fb8 	.word	0x08007fb8

08002b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b092      	sub	sp, #72	; 0x48
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80d4 	beq.w	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b30:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10e      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4a4a      	ldr	r2, [pc, #296]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b46:	61d3      	str	r3, [r2, #28]
 8002b48:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fe f8ab 	bl	8000ccc <HAL_GetTick>
 8002b76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe f8a7 	bl	8000ccc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e169      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b98:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8084 	beq.w	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d07c      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	461a      	mov	r2, r3
 8002be2:	2301      	movs	r3, #1
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	461a      	mov	r2, r3
 8002c06:	2300      	movs	r3, #0
 8002c08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0a:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04b      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe f857 	bl	8000ccc <HAL_GetTick>
 8002c1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe f853 	bl	8000ccc <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e113      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	2302      	movs	r3, #2
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d108      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c66:	4b01      	ldr	r3, [pc, #4]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	e00d      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
 8002c74:	10908100 	.word	0x10908100
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	4b78      	ldr	r3, [pc, #480]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2202      	movs	r2, #2
 8002c8a:	613a      	str	r2, [r7, #16]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	fa92 f2a2 	rbit	r2, r2
 8002c92:	60fa      	str	r2, [r7, #12]
  return result;
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0b7      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	496a      	ldr	r1, [pc, #424]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce4:	4b60      	ldr	r3, [pc, #384]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f023 0203 	bic.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	495d      	ldr	r1, [pc, #372]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d02:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4956      	ldr	r1, [pc, #344]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d20:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	494e      	ldr	r1, [pc, #312]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f023 0210 	bic.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4947      	ldr	r1, [pc, #284]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	493f      	ldr	r1, [pc, #252]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f023 0220 	bic.w	r2, r3, #32
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4938      	ldr	r1, [pc, #224]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d98:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4930      	ldr	r1, [pc, #192]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	4929      	ldr	r1, [pc, #164]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	4921      	ldr	r1, [pc, #132]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	4912      	ldr	r1, [pc, #72]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	490b      	ldr	r1, [pc, #44]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	4903      	ldr	r1, [pc, #12]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3748      	adds	r7, #72	; 0x48
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e09d      	b.n	8002fba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8e:	d009      	beq.n	8002ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
 8002e96:	e005      	b.n	8002ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fcac 	bl	800081c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee4:	d902      	bls.n	8002eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e002      	b.n	8002ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002efa:	d007      	beq.n	8002f0c <HAL_SPI_Init+0xa0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	ea42 0103 	orr.w	r1, r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	f003 0204 	and.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08a      	sub	sp, #40	; 0x28
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_SPI_TransmitReceive+0x26>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e1fb      	b.n	80033e0 <HAL_SPI_TransmitReceive+0x41e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff0:	f7fd fe6c 	bl	8000ccc <HAL_GetTick>
 8002ff4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ffc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800300c:	7efb      	ldrb	r3, [r7, #27]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d00e      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x6e>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003018:	d106      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x66>
 8003022:	7efb      	ldrb	r3, [r7, #27]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d003      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800302e:	e1cd      	b.n	80033cc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_SPI_TransmitReceive+0x80>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_SPI_TransmitReceive+0x80>
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003048:	e1c0      	b.n	80033cc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2205      	movs	r2, #5
 800305a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	887a      	ldrh	r2, [r7, #2]
 800306e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	887a      	ldrh	r2, [r7, #2]
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	887a      	ldrh	r2, [r7, #2]
 800308a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030a0:	d802      	bhi.n	80030a8 <HAL_SPI_TransmitReceive+0xe6>
 80030a2:	8a3b      	ldrh	r3, [r7, #16]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d908      	bls.n	80030ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	e007      	b.n	80030ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d007      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f0:	d97c      	bls.n	80031ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x13e>
 80030fa:	8a7b      	ldrh	r3, [r7, #18]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d169      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	1c9a      	adds	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003124:	e056      	b.n	80031d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d11b      	bne.n	800316c <HAL_SPI_TransmitReceive+0x1aa>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_SPI_TransmitReceive+0x1aa>
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d113      	bne.n	800316c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	1c9a      	adds	r2, r3, #2
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d11c      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x1f2>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	b292      	uxth	r2, r2
 8003192:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031b0:	2301      	movs	r3, #1
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031b4:	f7fd fd8a 	bl	8000ccc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d807      	bhi.n	80031d4 <HAL_SPI_TransmitReceive+0x212>
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ca:	d003      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031d2:	e0fb      	b.n	80033cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1a3      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x164>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19d      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x164>
 80031ea:	e0df      	b.n	80033ac <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x23a>
 80031f4:	8a7b      	ldrh	r3, [r7, #18]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	f040 80cb 	bne.w	8003392 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d912      	bls.n	800322c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b02      	subs	r3, #2
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800322a:	e0b2      	b.n	8003392 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003252:	e09e      	b.n	8003392 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d134      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x30a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d02f      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x30a>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	2b01      	cmp	r3, #1
 8003270:	d12c      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d912      	bls.n	80032a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b02      	subs	r3, #2
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a0:	e012      	b.n	80032c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	7812      	ldrb	r2, [r2, #0]
 80032ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d148      	bne.n	800336c <HAL_SPI_TransmitReceive+0x3aa>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d042      	beq.n	800336c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d923      	bls.n	800333a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	b292      	uxth	r2, r2
 80032fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b02      	subs	r3, #2
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d81f      	bhi.n	8003368 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e016      	b.n	8003368 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f103 020c 	add.w	r2, r3, #12
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800336c:	f7fd fcae 	bl	8000ccc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003378:	429a      	cmp	r2, r3
 800337a:	d803      	bhi.n	8003384 <HAL_SPI_TransmitReceive+0x3c2>
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003382:	d102      	bne.n	800338a <HAL_SPI_TransmitReceive+0x3c8>
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003390:	e01c      	b.n	80033cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f af5b 	bne.w	8003254 <HAL_SPI_TransmitReceive+0x292>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f47f af54 	bne.w	8003254 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f937 	bl	8003624 <SPI_EndRxTxTransaction>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	661a      	str	r2, [r3, #96]	; 0x60
 80033c8:	e000      	b.n	80033cc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80033ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033f8:	f7fd fc68 	bl	8000ccc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	4413      	add	r3, r2
 8003406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003408:	f7fd fc60 	bl	8000ccc <HAL_GetTick>
 800340c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	015b      	lsls	r3, r3, #5
 8003414:	0d1b      	lsrs	r3, r3, #20
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800341e:	e054      	b.n	80034ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003426:	d050      	beq.n	80034ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003428:	f7fd fc50 	bl	8000ccc <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	429a      	cmp	r2, r3
 8003436:	d902      	bls.n	800343e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d13d      	bne.n	80034ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800344c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003456:	d111      	bne.n	800347c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d004      	beq.n	800346c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	d107      	bne.n	800347c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d10f      	bne.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e017      	b.n	80034ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d19b      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000

080034f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800350a:	f7fd fbdf 	bl	8000ccc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	4413      	add	r3, r2
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800351a:	f7fd fbd7 	bl	8000ccc <HAL_GetTick>
 800351e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003528:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00da      	lsls	r2, r3, #3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	0d1b      	lsrs	r3, r3, #20
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003540:	e060      	b.n	8003604 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003548:	d107      	bne.n	800355a <SPI_WaitFifoStateUntilTimeout+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003558:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003560:	d050      	beq.n	8003604 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003562:	f7fd fbb3 	bl	8000ccc <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	429a      	cmp	r2, r3
 8003570:	d902      	bls.n	8003578 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d13d      	bne.n	80035f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003586:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003590:	d111      	bne.n	80035b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359a:	d004      	beq.n	80035a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d107      	bne.n	80035b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035be:	d10f      	bne.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e010      	b.n	8003616 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3b01      	subs	r3, #1
 8003602:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d196      	bne.n	8003542 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3728      	adds	r7, #40	; 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000

08003624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff ff5b 	bl	80034f8 <SPI_WaitFifoStateUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e027      	b.n	80036a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff fec0 	bl	80033e8 <SPI_WaitFlagStateUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e014      	b.n	80036a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff ff34 	bl	80034f8 <SPI_WaitFifoStateUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e000      	b.n	80036a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e040      	b.n	8003744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd f9cc 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8c0 	bl	8003874 <UART_SetConfig>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e022      	b.n	8003744 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa8a 	bl	8003c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb11 	bl	8003d64 <UART_CheckIdleState>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 8082 	bne.w	800386a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_Transmit+0x26>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07a      	b.n	800386c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit+0x38>
 8003780:	2302      	movs	r3, #2
 8003782:	e073      	b.n	800386c <HAL_UART_Transmit+0x120>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2221      	movs	r2, #33	; 0x21
 8003798:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379a:	f7fd fa97 	bl	8000ccc <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d108      	bne.n	80037cc <HAL_UART_Transmit+0x80>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e003      	b.n	80037d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037dc:	e02d      	b.n	800383a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fb04 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e039      	b.n	800386c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800380a:	b292      	uxth	r2, r2
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3302      	adds	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e008      	b.n	8003828 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b292      	uxth	r2, r2
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1cb      	bne.n	80037de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2140      	movs	r1, #64	; 0x40
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fad0 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e005      	b.n	800386c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038a2:	f023 030c 	bic.w	r3, r3, #12
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4aa8      	ldr	r2, [pc, #672]	; (8003b90 <UART_SetConfig+0x31c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d120      	bne.n	8003936 <UART_SetConfig+0xc2>
 80038f4:	4ba7      	ldr	r3, [pc, #668]	; (8003b94 <UART_SetConfig+0x320>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d817      	bhi.n	8003930 <UART_SetConfig+0xbc>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x94>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003919 	.word	0x08003919
 800390c:	08003925 	.word	0x08003925
 8003910:	0800392b 	.word	0x0800392b
 8003914:	0800391f 	.word	0x0800391f
 8003918:	2301      	movs	r3, #1
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e0b5      	b.n	8003a8a <UART_SetConfig+0x216>
 800391e:	2302      	movs	r3, #2
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e0b2      	b.n	8003a8a <UART_SetConfig+0x216>
 8003924:	2304      	movs	r3, #4
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e0af      	b.n	8003a8a <UART_SetConfig+0x216>
 800392a:	2308      	movs	r3, #8
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e0ac      	b.n	8003a8a <UART_SetConfig+0x216>
 8003930:	2310      	movs	r3, #16
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e0a9      	b.n	8003a8a <UART_SetConfig+0x216>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a97      	ldr	r2, [pc, #604]	; (8003b98 <UART_SetConfig+0x324>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d124      	bne.n	800398a <UART_SetConfig+0x116>
 8003940:	4b94      	ldr	r3, [pc, #592]	; (8003b94 <UART_SetConfig+0x320>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003948:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800394c:	d011      	beq.n	8003972 <UART_SetConfig+0xfe>
 800394e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003952:	d817      	bhi.n	8003984 <UART_SetConfig+0x110>
 8003954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003958:	d011      	beq.n	800397e <UART_SetConfig+0x10a>
 800395a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800395e:	d811      	bhi.n	8003984 <UART_SetConfig+0x110>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0xf8>
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d006      	beq.n	8003978 <UART_SetConfig+0x104>
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x110>
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e08b      	b.n	8003a8a <UART_SetConfig+0x216>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e088      	b.n	8003a8a <UART_SetConfig+0x216>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e085      	b.n	8003a8a <UART_SetConfig+0x216>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e082      	b.n	8003a8a <UART_SetConfig+0x216>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e07f      	b.n	8003a8a <UART_SetConfig+0x216>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a83      	ldr	r2, [pc, #524]	; (8003b9c <UART_SetConfig+0x328>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d124      	bne.n	80039de <UART_SetConfig+0x16a>
 8003994:	4b7f      	ldr	r3, [pc, #508]	; (8003b94 <UART_SetConfig+0x320>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800399c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039a0:	d011      	beq.n	80039c6 <UART_SetConfig+0x152>
 80039a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0x164>
 80039a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ac:	d011      	beq.n	80039d2 <UART_SetConfig+0x15e>
 80039ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039b2:	d811      	bhi.n	80039d8 <UART_SetConfig+0x164>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x14c>
 80039b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039bc:	d006      	beq.n	80039cc <UART_SetConfig+0x158>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x164>
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e061      	b.n	8003a8a <UART_SetConfig+0x216>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e05e      	b.n	8003a8a <UART_SetConfig+0x216>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e05b      	b.n	8003a8a <UART_SetConfig+0x216>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e058      	b.n	8003a8a <UART_SetConfig+0x216>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e055      	b.n	8003a8a <UART_SetConfig+0x216>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	; (8003ba0 <UART_SetConfig+0x32c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d124      	bne.n	8003a32 <UART_SetConfig+0x1be>
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <UART_SetConfig+0x320>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039f4:	d011      	beq.n	8003a1a <UART_SetConfig+0x1a6>
 80039f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039fa:	d817      	bhi.n	8003a2c <UART_SetConfig+0x1b8>
 80039fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a00:	d011      	beq.n	8003a26 <UART_SetConfig+0x1b2>
 8003a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a06:	d811      	bhi.n	8003a2c <UART_SetConfig+0x1b8>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <UART_SetConfig+0x1a0>
 8003a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a10:	d006      	beq.n	8003a20 <UART_SetConfig+0x1ac>
 8003a12:	e00b      	b.n	8003a2c <UART_SetConfig+0x1b8>
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e037      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e034      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a20:	2304      	movs	r3, #4
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e031      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a26:	2308      	movs	r3, #8
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e02e      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e02b      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5b      	ldr	r2, [pc, #364]	; (8003ba4 <UART_SetConfig+0x330>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d124      	bne.n	8003a86 <UART_SetConfig+0x212>
 8003a3c:	4b55      	ldr	r3, [pc, #340]	; (8003b94 <UART_SetConfig+0x320>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003a44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a48:	d011      	beq.n	8003a6e <UART_SetConfig+0x1fa>
 8003a4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a4e:	d817      	bhi.n	8003a80 <UART_SetConfig+0x20c>
 8003a50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a54:	d011      	beq.n	8003a7a <UART_SetConfig+0x206>
 8003a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5a:	d811      	bhi.n	8003a80 <UART_SetConfig+0x20c>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <UART_SetConfig+0x1f4>
 8003a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a64:	d006      	beq.n	8003a74 <UART_SetConfig+0x200>
 8003a66:	e00b      	b.n	8003a80 <UART_SetConfig+0x20c>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e00d      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e00a      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a74:	2304      	movs	r3, #4
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e007      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e004      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e001      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a86:	2310      	movs	r3, #16
 8003a88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a92:	d15c      	bne.n	8003b4e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003a94:	7ffb      	ldrb	r3, [r7, #31]
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d827      	bhi.n	8003aea <UART_SetConfig+0x276>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x22c>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ac5 	.word	0x08003ac5
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003ad5 	.word	0x08003ad5
 8003aac:	08003aeb 	.word	0x08003aeb
 8003ab0:	08003adb 	.word	0x08003adb
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003aeb 	.word	0x08003aeb
 8003abc:	08003aeb 	.word	0x08003aeb
 8003ac0:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f7fe ffde 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e013      	b.n	8003af4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003acc:	f7fe fffc 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8003ad0:	61b8      	str	r0, [r7, #24]
        break;
 8003ad2:	e00f      	b.n	8003af4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <UART_SetConfig+0x334>)
 8003ad6:	61bb      	str	r3, [r7, #24]
        break;
 8003ad8:	e00c      	b.n	8003af4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe ff5d 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003ade:	61b8      	str	r0, [r7, #24]
        break;
 8003ae0:	e008      	b.n	8003af4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e004      	b.n	8003af4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	77bb      	strb	r3, [r7, #30]
        break;
 8003af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8084 	beq.w	8003c04 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	005a      	lsls	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	d916      	bls.n	8003b48 <UART_SetConfig+0x2d4>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d212      	bcs.n	8003b48 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f023 030f 	bic.w	r3, r3, #15
 8003b2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	89fb      	ldrh	r3, [r7, #14]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	89fa      	ldrh	r2, [r7, #14]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e05d      	b.n	8003c04 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	77bb      	strb	r3, [r7, #30]
 8003b4c:	e05a      	b.n	8003c04 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d836      	bhi.n	8003bc2 <UART_SetConfig+0x34e>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x2e8>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003bad 	.word	0x08003bad
 8003b68:	08003bc3 	.word	0x08003bc3
 8003b6c:	08003bb3 	.word	0x08003bb3
 8003b70:	08003bc3 	.word	0x08003bc3
 8003b74:	08003bc3 	.word	0x08003bc3
 8003b78:	08003bc3 	.word	0x08003bc3
 8003b7c:	08003bbb 	.word	0x08003bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe ff80 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8003b84:	61b8      	str	r0, [r7, #24]
        break;
 8003b86:	e021      	b.n	8003bcc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe ff9e 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61b8      	str	r0, [r7, #24]
        break;
 8003b8e:	e01d      	b.n	8003bcc <UART_SetConfig+0x358>
 8003b90:	40013800 	.word	0x40013800
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40004400 	.word	0x40004400
 8003b9c:	40004800 	.word	0x40004800
 8003ba0:	40004c00 	.word	0x40004c00
 8003ba4:	40005000 	.word	0x40005000
 8003ba8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <UART_SetConfig+0x3a8>)
 8003bae:	61bb      	str	r3, [r7, #24]
        break;
 8003bb0:	e00c      	b.n	8003bcc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe fef1 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003bb6:	61b8      	str	r0, [r7, #24]
        break;
 8003bb8:	e008      	b.n	8003bcc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e004      	b.n	8003bcc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bca:	bf00      	nop
    }

    if (pclk != 0U)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085a      	lsrs	r2, r3, #1
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	d908      	bls.n	8003c00 <UART_SetConfig+0x38c>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d204      	bcs.n	8003c00 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e001      	b.n	8003c04 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	007a1200 	.word	0x007a1200

08003c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1e:	d10a      	bne.n	8003d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d74:	f7fc ffaa 	bl	8000ccc <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d10e      	bne.n	8003da6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f82d 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e023      	b.n	8003dee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d10e      	bne.n	8003dd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f817 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e00d      	b.n	8003dee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b09c      	sub	sp, #112	; 0x70
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	e0a5      	b.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0e:	f000 80a1 	beq.w	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fc ff5b 	bl	8000ccc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d13e      	bne.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e6      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e5      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e067      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d04f      	beq.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec2:	d147      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ecc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
 8003eee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e6      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f20:	623a      	str	r2, [r7, #32]
 8003f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	69f9      	ldr	r1, [r7, #28]
 8003f26:	6a3a      	ldr	r2, [r7, #32]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e010      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	f43f af4a 	beq.w	8003e08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3770      	adds	r7, #112	; 0x70
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f86:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	f107 0014 	add.w	r0, r7, #20
 8003fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	b004      	add	sp, #16
 8003ff4:	4770      	bx	lr
	...

08003ff8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003ffc:	4904      	ldr	r1, [pc, #16]	; (8004010 <MX_FATFS_Init+0x18>)
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <MX_FATFS_Init+0x1c>)
 8004000:	f003 fa44 	bl	800748c <FATFS_LinkDriver>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <MX_FATFS_Init+0x20>)
 800400a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200005d0 	.word	0x200005d0
 8004014:	2000000c 	.word	0x2000000c
 8004018:	200005cc 	.word	0x200005cc

0800401c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004020:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED this line from tutorial
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f9d9 	bl	80043f0 <USER_SPI_initialize>
 800403e:	4603      	mov	r3, r0
// Commented out code below since it wasnt in the tutorial
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fab7 	bl	80045c8 <USER_SPI_status>
 800405a:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004074:	7bf8      	ldrb	r0, [r7, #15]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	f000 faba 	bl	80045f4 <USER_SPI_read>
 8004080:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800409a:	7bf8      	ldrb	r0, [r7, #15]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	f000 fb0d 	bl	80046c0 <USER_SPI_write>
 80040a6:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	603a      	str	r2, [r7, #0]
 80040ba:	71fb      	strb	r3, [r7, #7]
 80040bc:	460b      	mov	r3, r1
 80040be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80040c0:	79b9      	ldrb	r1, [r7, #6]
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fb76 	bl	80047b8 <USER_SPI_ioctl>
 80040cc:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80040e0:	f7fc fdf4 	bl	8000ccc <HAL_GetTick>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <SPI_Timer_On+0x20>)
 80040e8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <SPI_Timer_On+0x24>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6013      	str	r3, [r2, #0]
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200005d8 	.word	0x200005d8
 80040fc:	200005dc 	.word	0x200005dc

08004100 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004104:	f7fc fde2 	bl	8000ccc <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <SPI_Timer_Status+0x24>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <SPI_Timer_Status+0x28>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	bf34      	ite	cc
 8004118:	2301      	movcc	r3, #1
 800411a:	2300      	movcs	r3, #0
 800411c:	b2db      	uxtb	r3, r3
}
 800411e:	4618      	mov	r0, r3
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200005d8 	.word	0x200005d8
 8004128:	200005dc 	.word	0x200005dc

0800412c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 8004136:	f107 020f 	add.w	r2, r7, #15
 800413a:	1df9      	adds	r1, r7, #7
 800413c:	2332      	movs	r3, #50	; 0x32
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	2301      	movs	r3, #1
 8004142:	4804      	ldr	r0, [pc, #16]	; (8004154 <xchg_spi+0x28>)
 8004144:	f7fe ff3d 	bl	8002fc2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200001f0 	.word	0x200001f0

08004158 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e00a      	b.n	800417e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	18d4      	adds	r4, r2, r3
 800416e:	20ff      	movs	r0, #255	; 0xff
 8004170:	f7ff ffdc 	bl	800412c <xchg_spi>
 8004174:	4603      	mov	r3, r0
 8004176:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d3f0      	bcc.n	8004168 <rcvr_spi_multi+0x10>
	}
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}

08004190 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e009      	b.n	80041b4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ffbf 	bl	800412c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3f1      	bcc.n	80041a0 <xmit_spi_multi+0x10>
	}
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80041ce:	f7fc fd7d 	bl	8000ccc <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80041d8:	20ff      	movs	r0, #255	; 0xff
 80041da:	f7ff ffa7 	bl	800412c <xchg_spi>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2bff      	cmp	r3, #255	; 0xff
 80041e6:	d007      	beq.n	80041f8 <wait_ready+0x32>
 80041e8:	f7fc fd70 	bl	8000ccc <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d8ef      	bhi.n	80041d8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2bff      	cmp	r3, #255	; 0xff
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004210:	2201      	movs	r2, #1
 8004212:	2102      	movs	r1, #2
 8004214:	4803      	ldr	r0, [pc, #12]	; (8004224 <despiselect+0x18>)
 8004216:	f7fc ffe9 	bl	80011ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800421a:	20ff      	movs	r0, #255	; 0xff
 800421c:	f7ff ff86 	bl	800412c <xchg_spi>

}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	48000800 	.word	0x48000800

08004228 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800422c:	2200      	movs	r2, #0
 800422e:	2102      	movs	r1, #2
 8004230:	4809      	ldr	r0, [pc, #36]	; (8004258 <spiselect+0x30>)
 8004232:	f7fc ffdb 	bl	80011ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004236:	20ff      	movs	r0, #255	; 0xff
 8004238:	f7ff ff78 	bl	800412c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800423c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004240:	f7ff ffc1 	bl	80041c6 <wait_ready>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <spiselect+0x26>
 800424a:	2301      	movs	r3, #1
 800424c:	e002      	b.n	8004254 <spiselect+0x2c>

	despiselect();
 800424e:	f7ff ffdd 	bl	800420c <despiselect>
	return 0;	/* Timeout */
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	48000800 	.word	0x48000800

0800425c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004266:	20c8      	movs	r0, #200	; 0xc8
 8004268:	f7ff ff36 	bl	80040d8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800426c:	20ff      	movs	r0, #255	; 0xff
 800426e:	f7ff ff5d 	bl	800412c <xchg_spi>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2bff      	cmp	r3, #255	; 0xff
 800427a:	d104      	bne.n	8004286 <rcvr_datablock+0x2a>
 800427c:	f7ff ff40 	bl	8004100 <SPI_Timer_Status>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f2      	bne.n	800426c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2bfe      	cmp	r3, #254	; 0xfe
 800428a:	d001      	beq.n	8004290 <rcvr_datablock+0x34>
 800428c:	2300      	movs	r3, #0
 800428e:	e00a      	b.n	80042a6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ff60 	bl	8004158 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004298:	20ff      	movs	r0, #255	; 0xff
 800429a:	f7ff ff47 	bl	800412c <xchg_spi>
 800429e:	20ff      	movs	r0, #255	; 0xff
 80042a0:	f7ff ff44 	bl	800412c <xchg_spi>

	return 1;						/* Function succeeded */
 80042a4:	2301      	movs	r3, #1
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80042ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042be:	f7ff ff82 	bl	80041c6 <wait_ready>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <xmit_datablock+0x1e>
 80042c8:	2300      	movs	r3, #0
 80042ca:	e01e      	b.n	800430a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff ff2c 	bl	800412c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	2bfd      	cmp	r3, #253	; 0xfd
 80042d8:	d016      	beq.n	8004308 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80042da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ff56 	bl	8004190 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80042e4:	20ff      	movs	r0, #255	; 0xff
 80042e6:	f7ff ff21 	bl	800412c <xchg_spi>
 80042ea:	20ff      	movs	r0, #255	; 0xff
 80042ec:	f7ff ff1e 	bl	800412c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80042f0:	20ff      	movs	r0, #255	; 0xff
 80042f2:	f7ff ff1b 	bl	800412c <xchg_spi>
 80042f6:	4603      	mov	r3, r0
 80042f8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2b05      	cmp	r3, #5
 8004302:	d001      	beq.n	8004308 <xmit_datablock+0x5a>
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <xmit_datablock+0x5c>
	}
	return 1;
 8004308:	2301      	movs	r3, #1
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	6039      	str	r1, [r7, #0]
 800431c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da0e      	bge.n	8004344 <send_cmd+0x32>
		cmd &= 0x7F;
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800432e:	2100      	movs	r1, #0
 8004330:	2037      	movs	r0, #55	; 0x37
 8004332:	f7ff ffee 	bl	8004312 <send_cmd>
 8004336:	4603      	mov	r3, r0
 8004338:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800433a:	7bbb      	ldrb	r3, [r7, #14]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d901      	bls.n	8004344 <send_cmd+0x32>
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	e051      	b.n	80043e8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d008      	beq.n	800435c <send_cmd+0x4a>
		despiselect();
 800434a:	f7ff ff5f 	bl	800420c <despiselect>
		if (!spiselect()) return 0xFF;
 800434e:	f7ff ff6b 	bl	8004228 <spiselect>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <send_cmd+0x4a>
 8004358:	23ff      	movs	r3, #255	; 0xff
 800435a:	e045      	b.n	80043e8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fee1 	bl	800412c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	0e1b      	lsrs	r3, r3, #24
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fedb 	bl	800412c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	b2db      	uxtb	r3, r3
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fed5 	bl	800412c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	b2db      	uxtb	r3, r3
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fecf 	bl	800412c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff feca 	bl	800412c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <send_cmd+0x94>
 80043a2:	2395      	movs	r3, #149	; 0x95
 80043a4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d101      	bne.n	80043b0 <send_cmd+0x9e>
 80043ac:	2387      	movs	r3, #135	; 0x87
 80043ae:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff feba 	bl	800412c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d102      	bne.n	80043c4 <send_cmd+0xb2>
 80043be:	20ff      	movs	r0, #255	; 0xff
 80043c0:	f7ff feb4 	bl	800412c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80043c4:	230a      	movs	r3, #10
 80043c6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80043c8:	20ff      	movs	r0, #255	; 0xff
 80043ca:	f7ff feaf 	bl	800412c <xchg_spi>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80043d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da05      	bge.n	80043e6 <send_cmd+0xd4>
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	3b01      	subs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80043e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <USER_SPI_initialize+0x14>
 8004400:	2301      	movs	r3, #1
 8004402:	e0d6      	b.n	80045b2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004404:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <USER_SPI_initialize+0x1cc>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <USER_SPI_initialize+0x2a>
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <USER_SPI_initialize+0x1cc>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e0cb      	b.n	80045b2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800441a:	4b69      	ldr	r3, [pc, #420]	; (80045c0 <USER_SPI_initialize+0x1d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <USER_SPI_initialize+0x1d0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800442c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800442e:	230a      	movs	r3, #10
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	e005      	b.n	8004440 <USER_SPI_initialize+0x50>
 8004434:	20ff      	movs	r0, #255	; 0xff
 8004436:	f7ff fe79 	bl	800412c <xchg_spi>
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	3b01      	subs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f6      	bne.n	8004434 <USER_SPI_initialize+0x44>

	ty = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800444a:	2100      	movs	r1, #0
 800444c:	2000      	movs	r0, #0
 800444e:	f7ff ff60 	bl	8004312 <send_cmd>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	f040 808b 	bne.w	8004570 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800445a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800445e:	f7ff fe3b 	bl	80040d8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004462:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004466:	2008      	movs	r0, #8
 8004468:	f7ff ff53 	bl	8004312 <send_cmd>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d151      	bne.n	8004516 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	e00d      	b.n	8004494 <USER_SPI_initialize+0xa4>
 8004478:	7bfc      	ldrb	r4, [r7, #15]
 800447a:	20ff      	movs	r0, #255	; 0xff
 800447c:	f7ff fe56 	bl	800412c <xchg_spi>
 8004480:	4603      	mov	r3, r0
 8004482:	461a      	mov	r2, r3
 8004484:	f104 0310 	add.w	r3, r4, #16
 8004488:	443b      	add	r3, r7
 800448a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	3301      	adds	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d9ee      	bls.n	8004478 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800449a:	7abb      	ldrb	r3, [r7, #10]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d167      	bne.n	8004570 <USER_SPI_initialize+0x180>
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	2baa      	cmp	r3, #170	; 0xaa
 80044a4:	d164      	bne.n	8004570 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80044a6:	bf00      	nop
 80044a8:	f7ff fe2a 	bl	8004100 <SPI_Timer_Status>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <USER_SPI_initialize+0xd2>
 80044b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044b6:	20a9      	movs	r0, #169	; 0xa9
 80044b8:	f7ff ff2b 	bl	8004312 <send_cmd>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f2      	bne.n	80044a8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80044c2:	f7ff fe1d 	bl	8004100 <SPI_Timer_Status>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d051      	beq.n	8004570 <USER_SPI_initialize+0x180>
 80044cc:	2100      	movs	r1, #0
 80044ce:	203a      	movs	r0, #58	; 0x3a
 80044d0:	f7ff ff1f 	bl	8004312 <send_cmd>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d14a      	bne.n	8004570 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	e00d      	b.n	80044fc <USER_SPI_initialize+0x10c>
 80044e0:	7bfc      	ldrb	r4, [r7, #15]
 80044e2:	20ff      	movs	r0, #255	; 0xff
 80044e4:	f7ff fe22 	bl	800412c <xchg_spi>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	f104 0310 	add.w	r3, r4, #16
 80044f0:	443b      	add	r3, r7
 80044f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	3301      	adds	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d9ee      	bls.n	80044e0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004502:	7a3b      	ldrb	r3, [r7, #8]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <USER_SPI_initialize+0x120>
 800450c:	230c      	movs	r3, #12
 800450e:	e000      	b.n	8004512 <USER_SPI_initialize+0x122>
 8004510:	2304      	movs	r3, #4
 8004512:	737b      	strb	r3, [r7, #13]
 8004514:	e02c      	b.n	8004570 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004516:	2100      	movs	r1, #0
 8004518:	20a9      	movs	r0, #169	; 0xa9
 800451a:	f7ff fefa 	bl	8004312 <send_cmd>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d804      	bhi.n	800452e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004524:	2302      	movs	r3, #2
 8004526:	737b      	strb	r3, [r7, #13]
 8004528:	23a9      	movs	r3, #169	; 0xa9
 800452a:	73bb      	strb	r3, [r7, #14]
 800452c:	e003      	b.n	8004536 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800452e:	2301      	movs	r3, #1
 8004530:	737b      	strb	r3, [r7, #13]
 8004532:	2301      	movs	r3, #1
 8004534:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004536:	bf00      	nop
 8004538:	f7ff fde2 	bl	8004100 <SPI_Timer_Status>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <USER_SPI_initialize+0x162>
 8004542:	7bbb      	ldrb	r3, [r7, #14]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fee3 	bl	8004312 <send_cmd>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f2      	bne.n	8004538 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004552:	f7ff fdd5 	bl	8004100 <SPI_Timer_Status>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <USER_SPI_initialize+0x17c>
 800455c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004560:	2010      	movs	r0, #16
 8004562:	f7ff fed6 	bl	8004312 <send_cmd>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <USER_SPI_initialize+0x180>
				ty = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004570:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <USER_SPI_initialize+0x1d4>)
 8004572:	7b7b      	ldrb	r3, [r7, #13]
 8004574:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004576:	f7ff fe49 	bl	800420c <despiselect>

	if (ty) {			/* OK */
 800457a:	7b7b      	ldrb	r3, [r7, #13]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <USER_SPI_initialize+0x1d0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <USER_SPI_initialize+0x1d0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0210 	orr.w	r2, r2, #16
 8004592:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <USER_SPI_initialize+0x1cc>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <USER_SPI_initialize+0x1cc>)
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e002      	b.n	80045ac <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <USER_SPI_initialize+0x1cc>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <USER_SPI_initialize+0x1cc>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000020 	.word	0x20000020
 80045c0:	200001f0 	.word	0x200001f0
 80045c4:	200005d4 	.word	0x200005d4

080045c8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <USER_SPI_status+0x14>
 80045d8:	2301      	movs	r3, #1
 80045da:	e002      	b.n	80045e2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <USER_SPI_status+0x28>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000020 	.word	0x20000020

080045f4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <USER_SPI_read+0x1c>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <USER_SPI_read+0x20>
 8004610:	2304      	movs	r3, #4
 8004612:	e04d      	b.n	80046b0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <USER_SPI_read+0xc4>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <USER_SPI_read+0x32>
 8004622:	2303      	movs	r3, #3
 8004624:	e044      	b.n	80046b0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004626:	4b25      	ldr	r3, [pc, #148]	; (80046bc <USER_SPI_read+0xc8>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USER_SPI_read+0x44>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	025b      	lsls	r3, r3, #9
 8004636:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d111      	bne.n	8004662 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	2011      	movs	r0, #17
 8004642:	f7ff fe66 	bl	8004312 <send_cmd>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d129      	bne.n	80046a0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800464c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004650:	68b8      	ldr	r0, [r7, #8]
 8004652:	f7ff fe03 	bl	800425c <rcvr_datablock>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d021      	beq.n	80046a0 <USER_SPI_read+0xac>
			count = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	e01e      	b.n	80046a0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	2012      	movs	r0, #18
 8004666:	f7ff fe54 	bl	8004312 <send_cmd>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d117      	bne.n	80046a0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004674:	68b8      	ldr	r0, [r7, #8]
 8004676:	f7ff fdf1 	bl	800425c <rcvr_datablock>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <USER_SPI_read+0xa2>
				buff += 512;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004686:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ed      	bne.n	8004670 <USER_SPI_read+0x7c>
 8004694:	e000      	b.n	8004698 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004696:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004698:	2100      	movs	r1, #0
 800469a:	200c      	movs	r0, #12
 800469c:	f7ff fe39 	bl	8004312 <send_cmd>
		}
	}
	despiselect();
 80046a0:	f7ff fdb4 	bl	800420c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000020 	.word	0x20000020
 80046bc:	200005d4 	.word	0x200005d4

080046c0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <USER_SPI_write+0x1c>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <USER_SPI_write+0x20>
 80046dc:	2304      	movs	r3, #4
 80046de:	e063      	b.n	80047a8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <USER_SPI_write+0xf0>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <USER_SPI_write+0x32>
 80046ee:	2303      	movs	r3, #3
 80046f0:	e05a      	b.n	80047a8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80046f2:	4b2f      	ldr	r3, [pc, #188]	; (80047b0 <USER_SPI_write+0xf0>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <USER_SPI_write+0x44>
 8004700:	2302      	movs	r3, #2
 8004702:	e051      	b.n	80047a8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <USER_SPI_write+0xf4>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <USER_SPI_write+0x56>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	025b      	lsls	r3, r3, #9
 8004714:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d110      	bne.n	800473e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	2018      	movs	r0, #24
 8004720:	f7ff fdf7 	bl	8004312 <send_cmd>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d136      	bne.n	8004798 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800472a:	21fe      	movs	r1, #254	; 0xfe
 800472c:	68b8      	ldr	r0, [r7, #8]
 800472e:	f7ff fdbe 	bl	80042ae <xmit_datablock>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02f      	beq.n	8004798 <USER_SPI_write+0xd8>
			count = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	e02c      	b.n	8004798 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <USER_SPI_write+0xf4>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f003 0306 	and.w	r3, r3, #6
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <USER_SPI_write+0x92>
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	2097      	movs	r0, #151	; 0x97
 800474e:	f7ff fde0 	bl	8004312 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	2019      	movs	r0, #25
 8004756:	f7ff fddc 	bl	8004312 <send_cmd>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11b      	bne.n	8004798 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004760:	21fc      	movs	r1, #252	; 0xfc
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f7ff fda3 	bl	80042ae <xmit_datablock>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <USER_SPI_write+0xc4>
				buff += 512;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004774:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ee      	bne.n	8004760 <USER_SPI_write+0xa0>
 8004782:	e000      	b.n	8004786 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004784:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004786:	21fd      	movs	r1, #253	; 0xfd
 8004788:	2000      	movs	r0, #0
 800478a:	f7ff fd90 	bl	80042ae <xmit_datablock>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USER_SPI_write+0xd8>
 8004794:	2301      	movs	r3, #1
 8004796:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004798:	f7ff fd38 	bl	800420c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000020 	.word	0x20000020
 80047b4:	200005d4 	.word	0x200005d4

080047b8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	603a      	str	r2, [r7, #0]
 80047c2:	71fb      	strb	r3, [r7, #7]
 80047c4:	460b      	mov	r3, r1
 80047c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <USER_SPI_ioctl+0x1a>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e15a      	b.n	8004a88 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80047d2:	4baf      	ldr	r3, [pc, #700]	; (8004a90 <USER_SPI_ioctl+0x2d8>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <USER_SPI_ioctl+0x2c>
 80047e0:	2303      	movs	r3, #3
 80047e2:	e151      	b.n	8004a88 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80047ea:	79bb      	ldrb	r3, [r7, #6]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	f200 8136 	bhi.w	8004a5e <USER_SPI_ioctl+0x2a6>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <USER_SPI_ioctl+0x40>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800480d 	.word	0x0800480d
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004a5f 	.word	0x08004a5f
 8004804:	080048cd 	.word	0x080048cd
 8004808:	080049c3 	.word	0x080049c3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800480c:	f7ff fd0c 	bl	8004228 <spiselect>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8127 	beq.w	8004a66 <USER_SPI_ioctl+0x2ae>
 8004818:	2300      	movs	r3, #0
 800481a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800481e:	e122      	b.n	8004a66 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004820:	2100      	movs	r1, #0
 8004822:	2009      	movs	r0, #9
 8004824:	f7ff fd75 	bl	8004312 <send_cmd>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 811d 	bne.w	8004a6a <USER_SPI_ioctl+0x2b2>
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	2110      	movs	r1, #16
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fd10 	bl	800425c <rcvr_datablock>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8113 	beq.w	8004a6a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004844:	7b3b      	ldrb	r3, [r7, #12]
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d111      	bne.n	8004872 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800484e:	7d7b      	ldrb	r3, [r7, #21]
 8004850:	461a      	mov	r2, r3
 8004852:	7d3b      	ldrb	r3, [r7, #20]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	4413      	add	r3, r2
 8004858:	461a      	mov	r2, r3
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004862:	4413      	add	r3, r2
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	029a      	lsls	r2, r3, #10
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e028      	b.n	80048c4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004872:	7c7b      	ldrb	r3, [r7, #17]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	b2da      	uxtb	r2, r3
 800487a:	7dbb      	ldrb	r3, [r7, #22]
 800487c:	09db      	lsrs	r3, r3, #7
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4413      	add	r3, r2
 8004882:	b2da      	uxtb	r2, r3
 8004884:	7d7b      	ldrb	r3, [r7, #21]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0306 	and.w	r3, r3, #6
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4413      	add	r3, r2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3302      	adds	r3, #2
 8004896:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800489a:	7d3b      	ldrb	r3, [r7, #20]
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	7cbb      	ldrb	r3, [r7, #18]
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048b0:	4413      	add	r3, r2
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80048b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048ba:	3b09      	subs	r3, #9
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	409a      	lsls	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80048ca:	e0ce      	b.n	8004a6a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80048cc:	4b71      	ldr	r3, [pc, #452]	; (8004a94 <USER_SPI_ioctl+0x2dc>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d031      	beq.n	800493c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80048d8:	2100      	movs	r1, #0
 80048da:	208d      	movs	r0, #141	; 0x8d
 80048dc:	f7ff fd19 	bl	8004312 <send_cmd>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 80c3 	bne.w	8004a6e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80048e8:	20ff      	movs	r0, #255	; 0xff
 80048ea:	f7ff fc1f 	bl	800412c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80048ee:	f107 030c 	add.w	r3, r7, #12
 80048f2:	2110      	movs	r1, #16
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fcb1 	bl	800425c <rcvr_datablock>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80b6 	beq.w	8004a6e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004902:	2330      	movs	r3, #48	; 0x30
 8004904:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004908:	e007      	b.n	800491a <USER_SPI_ioctl+0x162>
 800490a:	20ff      	movs	r0, #255	; 0xff
 800490c:	f7ff fc0e 	bl	800412c <xchg_spi>
 8004910:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004914:	3b01      	subs	r3, #1
 8004916:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800491a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f3      	bne.n	800490a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004922:	7dbb      	ldrb	r3, [r7, #22]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	2310      	movs	r3, #16
 800492c:	fa03 f202 	lsl.w	r2, r3, r2
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800493a:	e098      	b.n	8004a6e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800493c:	2100      	movs	r1, #0
 800493e:	2009      	movs	r0, #9
 8004940:	f7ff fce7 	bl	8004312 <send_cmd>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 8091 	bne.w	8004a6e <USER_SPI_ioctl+0x2b6>
 800494c:	f107 030c 	add.w	r3, r7, #12
 8004950:	2110      	movs	r1, #16
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fc82 	bl	800425c <rcvr_datablock>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8087 	beq.w	8004a6e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004960:	4b4c      	ldr	r3, [pc, #304]	; (8004a94 <USER_SPI_ioctl+0x2dc>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800496c:	7dbb      	ldrb	r3, [r7, #22]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004974:	7dfa      	ldrb	r2, [r7, #23]
 8004976:	09d2      	lsrs	r2, r2, #7
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	4413      	add	r3, r2
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	7e7b      	ldrb	r3, [r7, #25]
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	b2db      	uxtb	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	461a      	mov	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e013      	b.n	80049ba <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004992:	7dbb      	ldrb	r3, [r7, #22]
 8004994:	109b      	asrs	r3, r3, #2
 8004996:	b29b      	uxth	r3, r3
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	3301      	adds	r3, #1
 800499e:	7dfa      	ldrb	r2, [r7, #23]
 80049a0:	00d2      	lsls	r2, r2, #3
 80049a2:	f002 0218 	and.w	r2, r2, #24
 80049a6:	7df9      	ldrb	r1, [r7, #23]
 80049a8:	0949      	lsrs	r1, r1, #5
 80049aa:	b2c9      	uxtb	r1, r1
 80049ac:	440a      	add	r2, r1
 80049ae:	3201      	adds	r2, #1
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80049c0:	e055      	b.n	8004a6e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <USER_SPI_ioctl+0x2dc>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f003 0306 	and.w	r3, r3, #6
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d051      	beq.n	8004a72 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80049ce:	f107 020c 	add.w	r2, r7, #12
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	210b      	movs	r1, #11
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff feee 	bl	80047b8 <USER_SPI_ioctl>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d149      	bne.n	8004a76 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80049e2:	7b3b      	ldrb	r3, [r7, #12]
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <USER_SPI_ioctl+0x23e>
 80049ec:	7dbb      	ldrb	r3, [r7, #22]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d041      	beq.n	8004a7a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <USER_SPI_ioctl+0x2dc>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	025b      	lsls	r3, r3, #9
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	025b      	lsls	r3, r3, #9
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a20:	2020      	movs	r0, #32
 8004a22:	f7ff fc76 	bl	8004312 <send_cmd>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d128      	bne.n	8004a7e <USER_SPI_ioctl+0x2c6>
 8004a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a2e:	2021      	movs	r0, #33	; 0x21
 8004a30:	f7ff fc6f 	bl	8004312 <send_cmd>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d121      	bne.n	8004a7e <USER_SPI_ioctl+0x2c6>
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2026      	movs	r0, #38	; 0x26
 8004a3e:	f7ff fc68 	bl	8004312 <send_cmd>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11a      	bne.n	8004a7e <USER_SPI_ioctl+0x2c6>
 8004a48:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a4c:	f7ff fbbb 	bl	80041c6 <wait_ready>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d013      	beq.n	8004a7e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004a5c:	e00f      	b.n	8004a7e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004a5e:	2304      	movs	r3, #4
 8004a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004a64:	e00c      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		break;
 8004a66:	bf00      	nop
 8004a68:	e00a      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		break;
 8004a6a:	bf00      	nop
 8004a6c:	e008      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		break;
 8004a6e:	bf00      	nop
 8004a70:	e006      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004a72:	bf00      	nop
 8004a74:	e004      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004a76:	bf00      	nop
 8004a78:	e002      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <USER_SPI_ioctl+0x2c8>
		break;
 8004a7e:	bf00      	nop
	}

	despiselect();
 8004a80:	f7ff fbc4 	bl	800420c <despiselect>

	return res;
 8004a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3730      	adds	r7, #48	; 0x30
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000020 	.word	0x20000020
 8004a94:	200005d4 	.word	0x200005d4

08004a98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <disk_status+0x30>)
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	79fa      	ldrb	r2, [r7, #7]
 8004ab0:	4905      	ldr	r1, [pc, #20]	; (8004ac8 <disk_status+0x30>)
 8004ab2:	440a      	add	r2, r1
 8004ab4:	7a12      	ldrb	r2, [r2, #8]
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4798      	blx	r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000600 	.word	0x20000600

08004acc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <disk_initialize+0x48>)
 8004ade:	5cd3      	ldrb	r3, [r2, r3]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d111      	bne.n	8004b08 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <disk_initialize+0x48>)
 8004ae8:	2101      	movs	r1, #1
 8004aea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <disk_initialize+0x48>)
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	79fa      	ldrb	r2, [r7, #7]
 8004afa:	4906      	ldr	r1, [pc, #24]	; (8004b14 <disk_initialize+0x48>)
 8004afc:	440a      	add	r2, r1
 8004afe:	7a12      	ldrb	r2, [r2, #8]
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000600 	.word	0x20000600

08004b18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <disk_read+0x3c>)
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	689c      	ldr	r4, [r3, #8]
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <disk_read+0x3c>)
 8004b38:	4413      	add	r3, r2
 8004b3a:	7a18      	ldrb	r0, [r3, #8]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	47a0      	blx	r4
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000600 	.word	0x20000600

08004b58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <disk_write+0x3c>)
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68dc      	ldr	r4, [r3, #12]
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <disk_write+0x3c>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	7a18      	ldrb	r0, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	47a0      	blx	r4
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000600 	.word	0x20000600

08004b98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	603a      	str	r2, [r7, #0]
 8004ba2:	71fb      	strb	r3, [r7, #7]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <disk_ioctl+0x38>)
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	79fa      	ldrb	r2, [r7, #7]
 8004bb6:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <disk_ioctl+0x38>)
 8004bb8:	440a      	add	r2, r1
 8004bba:	7a10      	ldrb	r0, [r2, #8]
 8004bbc:	79b9      	ldrb	r1, [r7, #6]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	4798      	blx	r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000600 	.word	0x20000600

08004bd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004be8:	e007      	b.n	8004bfa <mem_cpy+0x26>
		*d++ = *s++;
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	1c53      	adds	r3, r2, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	1c59      	adds	r1, r3, #1
 8004bf4:	6179      	str	r1, [r7, #20]
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1e5a      	subs	r2, r3, #1
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f2      	bne.n	8004bea <mem_cpy+0x16>
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c12:	b480      	push	{r7}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004c22:	e005      	b.n	8004c30 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	617a      	str	r2, [r7, #20]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f4      	bne.n	8004c24 <mem_set+0x12>
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004c60:	bf00      	nop
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	1e5a      	subs	r2, r3, #1
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <mem_cmp+0x40>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	61fa      	str	r2, [r7, #28]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	61ba      	str	r2, [r7, #24]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	1acb      	subs	r3, r1, r3
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ec      	beq.n	8004c62 <mem_cmp+0x1a>
	return r;
 8004c88:	697b      	ldr	r3, [r7, #20]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ca0:	e002      	b.n	8004ca8 <chk_chr+0x12>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <chk_chr+0x26>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d1f2      	bne.n	8004ca2 <chk_chr+0xc>
	return *str;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e038      	b.n	8004d52 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004ce0:	4930      	ldr	r1, [pc, #192]	; (8004da4 <chk_lock+0xd8>)
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d029      	beq.n	8004d48 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004cf4:	492b      	ldr	r1, [pc, #172]	; (8004da4 <chk_lock+0xd8>)
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d11e      	bne.n	8004d4c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004d0e:	4925      	ldr	r1, [pc, #148]	; (8004da4 <chk_lock+0xd8>)
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d110      	bne.n	8004d4c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004d2a:	491e      	ldr	r1, [pc, #120]	; (8004da4 <chk_lock+0xd8>)
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3308      	adds	r3, #8
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d102      	bne.n	8004d4c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004d46:	e007      	b.n	8004d58 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d9c3      	bls.n	8004ce0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d109      	bne.n	8004d72 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <chk_lock+0x9e>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d101      	bne.n	8004d6e <chk_lock+0xa2>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e013      	b.n	8004d96 <chk_lock+0xca>
 8004d6e:	2312      	movs	r3, #18
 8004d70:	e011      	b.n	8004d96 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <chk_lock+0xc4>
 8004d78:	490a      	ldr	r1, [pc, #40]	; (8004da4 <chk_lock+0xd8>)
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	330a      	adds	r3, #10
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8e:	d101      	bne.n	8004d94 <chk_lock+0xc8>
 8004d90:	2310      	movs	r3, #16
 8004d92:	e000      	b.n	8004d96 <chk_lock+0xca>
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	200005e8 	.word	0x200005e8

08004da8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	e002      	b.n	8004dba <enq_lock+0x12>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3301      	adds	r3, #1
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d809      	bhi.n	8004dd4 <enq_lock+0x2c>
 8004dc0:	490a      	ldr	r1, [pc, #40]	; (8004dec <enq_lock+0x44>)
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ef      	bne.n	8004db4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	200005e8 	.word	0x200005e8

08004df0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e02b      	b.n	8004e58 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004e00:	4956      	ldr	r1, [pc, #344]	; (8004f5c <inc_lock+0x16c>)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11b      	bne.n	8004e52 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004e1a:	4950      	ldr	r1, [pc, #320]	; (8004f5c <inc_lock+0x16c>)
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3304      	adds	r3, #4
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d10d      	bne.n	8004e52 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004e36:	4949      	ldr	r1, [pc, #292]	; (8004f5c <inc_lock+0x16c>)
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	3308      	adds	r3, #8
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d006      	beq.n	8004e60 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d9d0      	bls.n	8004e00 <inc_lock+0x10>
 8004e5e:	e000      	b.n	8004e62 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004e60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d145      	bne.n	8004ef4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e002      	b.n	8004e74 <inc_lock+0x84>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d809      	bhi.n	8004e8e <inc_lock+0x9e>
 8004e7a:	4938      	ldr	r1, [pc, #224]	; (8004f5c <inc_lock+0x16c>)
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ef      	bne.n	8004e6e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d101      	bne.n	8004e98 <inc_lock+0xa8>
 8004e94:	2300      	movs	r3, #0
 8004e96:	e05a      	b.n	8004f4e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004e9e:	482f      	ldr	r0, [pc, #188]	; (8004f5c <inc_lock+0x16c>)
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4403      	add	r3, r0
 8004eac:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004eb4:	4829      	ldr	r0, [pc, #164]	; (8004f5c <inc_lock+0x16c>)
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4403      	add	r3, r0
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004ecc:	4923      	ldr	r1, [pc, #140]	; (8004f5c <inc_lock+0x16c>)
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3308      	adds	r3, #8
 8004edc:	4602      	mov	r2, r0
 8004ede:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004ee0:	491e      	ldr	r1, [pc, #120]	; (8004f5c <inc_lock+0x16c>)
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	330a      	adds	r3, #10
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <inc_lock+0x124>
 8004efa:	4918      	ldr	r1, [pc, #96]	; (8004f5c <inc_lock+0x16c>)
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	330a      	adds	r3, #10
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <inc_lock+0x124>
 8004f10:	2300      	movs	r3, #0
 8004f12:	e01c      	b.n	8004f4e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <inc_lock+0x142>
 8004f1a:	4910      	ldr	r1, [pc, #64]	; (8004f5c <inc_lock+0x16c>)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	330a      	adds	r3, #10
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	b299      	uxth	r1, r3
 8004f30:	e001      	b.n	8004f36 <inc_lock+0x146>
 8004f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f36:	4809      	ldr	r0, [pc, #36]	; (8004f5c <inc_lock+0x16c>)
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4403      	add	r3, r0
 8004f44:	330a      	adds	r3, #10
 8004f46:	460a      	mov	r2, r1
 8004f48:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	200005e8 	.word	0x200005e8

08004f60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d82e      	bhi.n	8004fd2 <dec_lock+0x72>
		n = Files[i].ctr;
 8004f74:	491b      	ldr	r1, [pc, #108]	; (8004fe4 <dec_lock+0x84>)
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	330a      	adds	r3, #10
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f88:	89fb      	ldrh	r3, [r7, #14]
 8004f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8e:	d101      	bne.n	8004f94 <dec_lock+0x34>
 8004f90:	2300      	movs	r3, #0
 8004f92:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004f94:	89fb      	ldrh	r3, [r7, #14]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <dec_lock+0x40>
 8004f9a:	89fb      	ldrh	r3, [r7, #14]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004fa0:	4910      	ldr	r1, [pc, #64]	; (8004fe4 <dec_lock+0x84>)
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	330a      	adds	r3, #10
 8004fb0:	89fa      	ldrh	r2, [r7, #14]
 8004fb2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <dec_lock+0x6c>
 8004fba:	490a      	ldr	r1, [pc, #40]	; (8004fe4 <dec_lock+0x84>)
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	737b      	strb	r3, [r7, #13]
 8004fd0:	e001      	b.n	8004fd6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	200005e8 	.word	0x200005e8

08004fe8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e016      	b.n	8005024 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ff6:	4910      	ldr	r1, [pc, #64]	; (8005038 <clear_lock+0x50>)
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d108      	bne.n	800501e <clear_lock+0x36>
 800500c:	490a      	ldr	r1, [pc, #40]	; (8005038 <clear_lock+0x50>)
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d9e5      	bls.n	8004ff6 <clear_lock+0xe>
	}
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	200005e8 	.word	0x200005e8

0800503c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800504e:	2b00      	cmp	r3, #0
 8005050:	d038      	beq.n	80050c4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005058:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	2301      	movs	r3, #1
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	f7ff fd77 	bl	8004b58 <disk_write>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e026      	b.n	80050c4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800508e:	429a      	cmp	r2, r3
 8005090:	d218      	bcs.n	80050c4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e010      	b.n	80050be <sync_window+0x82>
					wsect += fs->fsize;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	2301      	movs	r3, #1
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	f7ff fd50 	bl	8004b58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d8eb      	bhi.n	800509c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d01b      	beq.n	8005120 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffa7 	bl	800503c <sync_window>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d113      	bne.n	8005120 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	2301      	movs	r3, #1
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	f7ff fd08 	bl	8004b18 <disk_read>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800510e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005112:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff ff82 	bl	800503c <sync_window>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 809b 	bne.w	800527a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800514a:	2b03      	cmp	r3, #3
 800514c:	f040 8088 	bne.w	8005260 <sync_fs+0x136>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 8082 	bne.w	8005260 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fd54 	bl	8004c12 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2255      	movs	r2, #85	; 0x55
 800516e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	22aa      	movs	r2, #170	; 0xaa
 8005176:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2252      	movs	r2, #82	; 0x52
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2252      	movs	r2, #82	; 0x52
 8005184:	705a      	strb	r2, [r3, #1]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2261      	movs	r2, #97	; 0x61
 800518a:	709a      	strb	r2, [r3, #2]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2241      	movs	r2, #65	; 0x41
 8005190:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2272      	movs	r2, #114	; 0x72
 8005196:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2272      	movs	r2, #114	; 0x72
 800519e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2241      	movs	r2, #65	; 0x41
 80051a6:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2261      	movs	r2, #97	; 0x61
 80051ae:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	0a1b      	lsrs	r3, r3, #8
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051ea:	0e1b      	lsrs	r3, r3, #24
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005208:	b29b      	uxth	r3, r3
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	b29b      	uxth	r3, r3
 800520e:	b2da      	uxtb	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	b2da      	uxtb	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800522c:	0e1b      	lsrs	r3, r3, #24
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005252:	2301      	movs	r3, #1
 8005254:	f7ff fc80 	bl	8004b58 <disk_write>
			fs->fsi_flag = 0;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005266:	2200      	movs	r2, #0
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fc94 	bl	8004b98 <disk_ioctl>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	3b02      	subs	r3, #2
 8005292:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800529a:	3b02      	subs	r3, #2
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d301      	bcc.n	80052a6 <clust2sect+0x22>
 80052a2:	2300      	movs	r3, #0
 80052a4:	e00a      	b.n	80052bc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80052ac:	461a      	mov	r2, r3
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	fb03 f202 	mul.w	r2, r3, r2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80052ba:	4413      	add	r3, r2
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d905      	bls.n	80052e4 <get_fat+0x1c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <get_fat+0x22>
		val = 1;	/* Internal error */
 80052e4:	2301      	movs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e0a3      	b.n	8005432 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ee:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d068      	beq.n	80053cc <get_fat+0x104>
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	f300 808f 	bgt.w	800541e <get_fat+0x156>
 8005300:	2b01      	cmp	r3, #1
 8005302:	d002      	beq.n	800530a <get_fat+0x42>
 8005304:	2b02      	cmp	r3, #2
 8005306:	d040      	beq.n	800538a <get_fat+0xc2>
 8005308:	e089      	b.n	800541e <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	0a5b      	lsrs	r3, r3, #9
 8005322:	4413      	add	r3, r2
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fed1 	bl	80050ce <move_window>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d178      	bne.n	8005424 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0a5b      	lsrs	r3, r3, #9
 800534c:	4413      	add	r3, r2
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff febc 	bl	80050ce <move_window>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d165      	bne.n	8005428 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	5cd3      	ldrb	r3, [r2, r3]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <get_fat+0xb8>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	e002      	b.n	8005386 <get_fat+0xbe>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005386:	617b      	str	r3, [r7, #20]
			break;
 8005388:	e053      	b.n	8005432 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	4413      	add	r3, r2
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fe98 	bl	80050ce <move_window>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d143      	bne.n	800542c <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3301      	adds	r3, #1
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	b21a      	sxth	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	617b      	str	r3, [r7, #20]
			break;
 80053ca:	e032      	b.n	8005432 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	09db      	lsrs	r3, r3, #7
 80053d6:	4413      	add	r3, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fe77 	bl	80050ce <move_window>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d124      	bne.n	8005430 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	3303      	adds	r3, #3
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	061a      	lsls	r2, r3, #24
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3302      	adds	r3, #2
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	4313      	orrs	r3, r2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	3201      	adds	r2, #1
 800540a:	7812      	ldrb	r2, [r2, #0]
 800540c:	0212      	lsls	r2, r2, #8
 800540e:	4313      	orrs	r3, r2
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	7812      	ldrb	r2, [r2, #0]
 8005414:	4313      	orrs	r3, r2
 8005416:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800541a:	617b      	str	r3, [r7, #20]
			break;
 800541c:	e009      	b.n	8005432 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800541e:	2301      	movs	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e006      	b.n	8005432 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005424:	bf00      	nop
 8005426:	e004      	b.n	8005432 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005428:	bf00      	nop
 800542a:	e002      	b.n	8005432 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800542c:	bf00      	nop
 800542e:	e000      	b.n	8005432 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005430:	bf00      	nop
		}
	}

	return val;
 8005432:	697b      	ldr	r3, [r7, #20]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d905      	bls.n	800545a <put_fat+0x1e>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <put_fat+0x24>
		res = FR_INT_ERR;
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e0f6      	b.n	800564e <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005466:	2b03      	cmp	r3, #3
 8005468:	f000 809e 	beq.w	80055a8 <put_fat+0x16c>
 800546c:	2b03      	cmp	r3, #3
 800546e:	f300 80e4 	bgt.w	800563a <put_fat+0x1fe>
 8005472:	2b01      	cmp	r3, #1
 8005474:	d002      	beq.n	800547c <put_fat+0x40>
 8005476:	2b02      	cmp	r3, #2
 8005478:	d06f      	beq.n	800555a <put_fat+0x11e>
 800547a:	e0de      	b.n	800563a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	0a5b      	lsrs	r3, r3, #9
 8005494:	4413      	add	r3, r2
 8005496:	4619      	mov	r1, r3
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fe18 	bl	80050ce <move_window>
 800549e:	4603      	mov	r3, r0
 80054a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054a2:	7ffb      	ldrb	r3, [r7, #31]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 80cb 	bne.w	8005640 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	617a      	str	r2, [r7, #20]
 80054b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <put_fat+0xa4>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b25b      	sxtb	r3, r3
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	b25a      	sxtb	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	b25b      	sxtb	r3, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	b25b      	sxtb	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e001      	b.n	80054e4 <put_fat+0xa8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	0a5b      	lsrs	r3, r3, #9
 80054fa:	4413      	add	r3, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fde5 	bl	80050ce <move_window>
 8005504:	4603      	mov	r3, r0
 8005506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 809a 	bne.w	8005644 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <put_fat+0xf2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e00e      	b.n	800554c <put_fat+0x110>
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b25b      	sxtb	r3, r3
 8005534:	f023 030f 	bic.w	r3, r3, #15
 8005538:	b25a      	sxtb	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b25b      	sxtb	r3, r3
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	b25b      	sxtb	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b25b      	sxtb	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005558:	e079      	b.n	800564e <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	4413      	add	r3, r2
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff fdb0 	bl	80050ce <move_window>
 800556e:	4603      	mov	r3, r0
 8005570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d167      	bne.n	8005648 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	b29b      	uxth	r3, r3
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b29a      	uxth	r2, r3
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	3301      	adds	r3, #1
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80055a6:	e052      	b.n	800564e <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	09db      	lsrs	r3, r3, #7
 80055b2:	4413      	add	r3, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fd89 	bl	80050ce <move_window>
 80055bc:	4603      	mov	r3, r0
 80055be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d142      	bne.n	800564c <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	3303      	adds	r3, #3
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	061a      	lsls	r2, r3, #24
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	3302      	adds	r3, #2
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	4313      	orrs	r3, r2
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	3201      	adds	r2, #1
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	0212      	lsls	r2, r2, #8
 80055ee:	4313      	orrs	r3, r2
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	b29b      	uxth	r3, r3
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	b29a      	uxth	r2, r3
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	3301      	adds	r3, #1
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0c1a      	lsrs	r2, r3, #16
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	3302      	adds	r3, #2
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0e1a      	lsrs	r2, r3, #24
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	3303      	adds	r3, #3
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005638:	e009      	b.n	800564e <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800563a:	2302      	movs	r3, #2
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e006      	b.n	800564e <put_fat+0x212>
			if (res != FR_OK) break;
 8005640:	bf00      	nop
 8005642:	e004      	b.n	800564e <put_fat+0x212>
			if (res != FR_OK) break;
 8005644:	bf00      	nop
 8005646:	e002      	b.n	800564e <put_fat+0x212>
			if (res != FR_OK) break;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <put_fat+0x212>
			if (res != FR_OK) break;
 800564c:	bf00      	nop
		}
	}

	return res;
 800564e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d905      	bls.n	8005674 <remove_chain+0x1c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <remove_chain+0x22>
		res = FR_INT_ERR;
 8005674:	2302      	movs	r3, #2
 8005676:	73fb      	strb	r3, [r7, #15]
 8005678:	e043      	b.n	8005702 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800567e:	e036      	b.n	80056ee <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fe20 	bl	80052c8 <get_fat>
 8005688:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d035      	beq.n	80056fc <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d102      	bne.n	800569c <remove_chain+0x44>
 8005696:	2302      	movs	r3, #2
 8005698:	73fb      	strb	r3, [r7, #15]
 800569a:	e032      	b.n	8005702 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a2:	d102      	bne.n	80056aa <remove_chain+0x52>
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
 80056a8:	e02b      	b.n	8005702 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80056aa:	2200      	movs	r2, #0
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fec4 	bl	800543c <put_fat>
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d120      	bne.n	8005700 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c8:	d00f      	beq.n	80056ea <remove_chain+0x92>
				fs->free_clust++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d3c2      	bcc.n	8005680 <remove_chain+0x28>
 80056fa:	e002      	b.n	8005702 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005700:	bf00      	nop
		}
	}

	return res;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10f      	bne.n	800573c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005722:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <create_chain+0x2a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	429a      	cmp	r2, r3
 8005734:	d31c      	bcc.n	8005770 <create_chain+0x64>
 8005736:	2301      	movs	r3, #1
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e019      	b.n	8005770 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fdc2 	bl	80052c8 <get_fat>
 8005744:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d801      	bhi.n	8005750 <create_chain+0x44>
 800574c:	2301      	movs	r3, #1
 800574e:	e076      	b.n	800583e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005756:	d101      	bne.n	800575c <create_chain+0x50>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	e070      	b.n	800583e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	d201      	bcs.n	800576c <create_chain+0x60>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	e068      	b.n	800583e <create_chain+0x132>
		scl = clst;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3301      	adds	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	429a      	cmp	r2, r3
 8005784:	d307      	bcc.n	8005796 <create_chain+0x8a>
			ncl = 2;
 8005786:	2302      	movs	r3, #2
 8005788:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	d901      	bls.n	8005796 <create_chain+0x8a>
 8005792:	2300      	movs	r3, #0
 8005794:	e053      	b.n	800583e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005796:	6979      	ldr	r1, [r7, #20]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fd95 	bl	80052c8 <get_fat>
 800579e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00e      	beq.n	80057c4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ac:	d002      	beq.n	80057b4 <create_chain+0xa8>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <create_chain+0xac>
			return cs;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	e042      	b.n	800583e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1d9      	bne.n	8005774 <create_chain+0x68>
 80057c0:	2300      	movs	r3, #0
 80057c2:	e03c      	b.n	800583e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80057c4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80057c6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe35 	bl	800543c <put_fat>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <create_chain+0xe4>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d006      	beq.n	80057f0 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fe28 	bl	800543c <put_fat>
 80057ec:	4603      	mov	r3, r0
 80057ee:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11a      	bne.n	800582c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005808:	d018      	beq.n	800583c <create_chain+0x130>
			fs->free_clust--;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800582a:	e007      	b.n	800583c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d102      	bne.n	8005838 <create_chain+0x12c>
 8005832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005836:	e000      	b.n	800583a <create_chain+0x12e>
 8005838:	2301      	movs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800583c:	697b      	ldr	r3, [r7, #20]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005856:	3304      	adds	r3, #4
 8005858:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	0a5b      	lsrs	r3, r3, #9
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005864:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005868:	fbb3 f3f2 	udiv	r3, r3, r2
 800586c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	613a      	str	r2, [r7, #16]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <clmt_clust+0x3c>
 800587e:	2300      	movs	r3, #0
 8005880:	e010      	b.n	80058a4 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	429a      	cmp	r2, r3
 8005888:	d307      	bcc.n	800589a <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3304      	adds	r3, #4
 8005896:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005898:	e7e9      	b.n	800586e <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800589a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80058ca:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d007      	beq.n	80058e2 <dir_sdi+0x32>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d301      	bcc.n	80058e6 <dir_sdi+0x36>
		return FR_INT_ERR;
 80058e2:	2302      	movs	r3, #2
 80058e4:	e074      	b.n	80059d0 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10c      	bne.n	8005906 <dir_sdi+0x56>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d105      	bne.n	8005906 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005900:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005904:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d111      	bne.n	8005930 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005912:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005916:	461a      	mov	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4293      	cmp	r3, r2
 800591c:	d301      	bcc.n	8005922 <dir_sdi+0x72>
			return FR_INT_ERR;
 800591e:	2302      	movs	r3, #2
 8005920:	e056      	b.n	80059d0 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005928:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e032      	b.n	8005996 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005936:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800593e:	e01e      	b.n	800597e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fcbd 	bl	80052c8 <get_fat>
 800594e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005956:	d101      	bne.n	800595c <dir_sdi+0xac>
 8005958:	2301      	movs	r3, #1
 800595a:	e039      	b.n	80059d0 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d907      	bls.n	8005972 <dir_sdi+0xc2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005968:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d301      	bcc.n	8005976 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005972:	2302      	movs	r3, #2
 8005974:	e02c      	b.n	80059d0 <dir_sdi+0x120>
			idx -= ic;
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	429a      	cmp	r2, r3
 8005984:	d2dc      	bcs.n	8005940 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800598c:	6979      	ldr	r1, [r7, #20]
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fc78 	bl	8005284 <clust2sect>
 8005994:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <dir_sdi+0xf8>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e013      	b.n	80059d0 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	091a      	lsrs	r2, r3, #4
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	441a      	add	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059bc:	461a      	mov	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	015b      	lsls	r3, r3, #5
 80059c6:	441a      	add	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <dir_next+0x26>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <dir_next+0x2a>
		return FR_NO_FILE;
 80059fe:	2304      	movs	r3, #4
 8005a00:	e0dd      	b.n	8005bbe <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 80c6 	bne.w	8005b9a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a2c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005a30:	461a      	mov	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	f0c0 80b0 	bcc.w	8005b9a <dir_next+0x1c2>
				return FR_NO_FILE;
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e0bf      	b.n	8005bbe <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005a48:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005a4c:	3a01      	subs	r2, #1
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 80a2 	bne.w	8005b9a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7ff fc2f 	bl	80052c8 <get_fat>
 8005a6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d801      	bhi.n	8005a76 <dir_next+0x9e>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0a3      	b.n	8005bbe <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7c:	d101      	bne.n	8005a82 <dir_next+0xaa>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e09d      	b.n	8005bbe <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d374      	bcc.n	8005b7c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <dir_next+0xc4>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	e090      	b.n	8005bbe <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7ff fe2e 	bl	800570c <create_chain>
 8005ab0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <dir_next+0xe4>
 8005ab8:	2307      	movs	r3, #7
 8005aba:	e080      	b.n	8005bbe <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <dir_next+0xee>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e07b      	b.n	8005bbe <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d101      	bne.n	8005ad2 <dir_next+0xfa>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e075      	b.n	8005bbe <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff faaf 	bl	800503c <sync_window>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <dir_next+0x110>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e06a      	b.n	8005bbe <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff f88c 	bl	8004c12 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8005b06:	6979      	ldr	r1, [r7, #20]
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7ff fbbb 	bl	8005284 <clust2sect>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e01b      	b.n	8005b52 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fa85 	bl	800503c <sync_window>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <dir_next+0x164>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e040      	b.n	8005bbe <dir_next+0x1e6>
						dp->fs->winsect++;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b42:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005b46:	3201      	adds	r2, #1
 8005b48:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b58:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d3da      	bcc.n	8005b1a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b6a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	1a8a      	subs	r2, r1, r2
 8005b78:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fb79 	bl	8005284 <clust2sect>
 8005b92:	4602      	mov	r2, r0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	015b      	lsls	r3, r3, #5
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd90      	pop	{r4, r7, pc}

08005bc6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fe6c 	bl	80058b0 <dir_sdi>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d131      	bne.n	8005c46 <dir_alloc+0x80>
		n = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7ff fa6a 	bl	80050ce <move_window>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11f      	bne.n	8005c44 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2be5      	cmp	r3, #229	; 0xe5
 8005c0e:	d005      	beq.n	8005c1c <dir_alloc+0x56>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d102      	bne.n	8005c30 <dir_alloc+0x6a>
 8005c2a:	e00c      	b.n	8005c46 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005c30:	2101      	movs	r1, #1
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fed0 	bl	80059d8 <dir_next>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0d1      	beq.n	8005be6 <dir_alloc+0x20>
 8005c42:	e000      	b.n	8005c46 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005c44:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d101      	bne.n	8005c50 <dir_alloc+0x8a>
 8005c4c:	2307      	movs	r3, #7
 8005c4e:	73fb      	strb	r3, [r7, #15]
	return res;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	331b      	adds	r3, #27
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	b21a      	sxth	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	331a      	adds	r3, #26
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b21b      	sxth	r3, r3
 8005c76:	4313      	orrs	r3, r2
 8005c78:	b21b      	sxth	r3, r3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d10f      	bne.n	8005ca8 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	3315      	adds	r3, #21
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	b21a      	sxth	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	3314      	adds	r3, #20
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	b21b      	sxth	r3, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	b21b      	sxth	r3, r3
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

	return cl;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	331a      	adds	r3, #26
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	331b      	adds	r3, #27
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	0c1a      	lsrs	r2, r3, #16
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3315      	adds	r3, #21
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fdce 	bl	80058b0 <dir_sdi>
 8005d14:	4603      	mov	r3, r0
 8005d16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <dir_find+0x1e>
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	e03b      	b.n	8005d9a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7ff f9cc 	bl	80050ce <move_window>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d128      	bne.n	8005d92 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d46:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <dir_find+0x56>
 8005d54:	2304      	movs	r3, #4
 8005d56:	75fb      	strb	r3, [r7, #23]
 8005d58:	e01e      	b.n	8005d98 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	330b      	adds	r3, #11
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <dir_find+0x7a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d6e:	220b      	movs	r2, #11
 8005d70:	4619      	mov	r1, r3
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f7fe ff68 	bl	8004c48 <mem_cmp>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fe29 	bl	80059d8 <dir_next>
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0c8      	beq.n	8005d22 <dir_find+0x1e>
 8005d90:	e002      	b.n	8005d98 <dir_find+0x94>
		if (res != FR_OK) break;
 8005d92:	bf00      	nop
 8005d94:	e000      	b.n	8005d98 <dir_find+0x94>
			break;
 8005d96:	bf00      	nop

	return res;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005daa:	2101      	movs	r1, #1
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff0a 	bl	8005bc6 <dir_alloc>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d126      	bne.n	8005e0a <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7ff f97f 	bl	80050ce <move_window>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d117      	bne.n	8005e0a <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005de0:	2220      	movs	r2, #32
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe ff14 	bl	8004c12 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005df6:	220b      	movs	r2, #11
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f7fe feeb 	bl	8004bd4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <create_name+0x18>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b2f      	cmp	r3, #47	; 0x2f
 8005e32:	d0f8      	beq.n	8005e26 <create_name+0x12>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b5c      	cmp	r3, #92	; 0x5c
 8005e3a:	d0f4      	beq.n	8005e26 <create_name+0x12>
	sfn = dp->fn;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e42:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e44:	220b      	movs	r2, #11
 8005e46:	2120      	movs	r1, #32
 8005e48:	68b8      	ldr	r0, [r7, #8]
 8005e4a:	f7fe fee2 	bl	8004c12 <mem_set>
	si = i = b = 0; ni = 8;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	617a      	str	r2, [r7, #20]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005e6c:	7fbb      	ldrb	r3, [r7, #30]
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d953      	bls.n	8005f1a <create_name+0x106>
 8005e72:	7fbb      	ldrb	r3, [r7, #30]
 8005e74:	2b2f      	cmp	r3, #47	; 0x2f
 8005e76:	d050      	beq.n	8005f1a <create_name+0x106>
 8005e78:	7fbb      	ldrb	r3, [r7, #30]
 8005e7a:	2b5c      	cmp	r3, #92	; 0x5c
 8005e7c:	d04d      	beq.n	8005f1a <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005e7e:	7fbb      	ldrb	r3, [r7, #30]
 8005e80:	2b2e      	cmp	r3, #46	; 0x2e
 8005e82:	d003      	beq.n	8005e8c <create_name+0x78>
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d30f      	bcc.n	8005eac <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d102      	bne.n	8005e98 <create_name+0x84>
 8005e92:	7fbb      	ldrb	r3, [r7, #30]
 8005e94:	2b2e      	cmp	r3, #46	; 0x2e
 8005e96:	d001      	beq.n	8005e9c <create_name+0x88>
 8005e98:	2306      	movs	r3, #6
 8005e9a:	e073      	b.n	8005f84 <create_name+0x170>
			i = 8; ni = 11;
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	230b      	movs	r3, #11
 8005ea2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005ea4:	7ffb      	ldrb	r3, [r7, #31]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e035      	b.n	8005f18 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005eac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da08      	bge.n	8005ec6 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005eb4:	7ffb      	ldrb	r3, [r7, #31]
 8005eb6:	f043 0303 	orr.w	r3, r3, #3
 8005eba:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ebc:	7fbb      	ldrb	r3, [r7, #30]
 8005ebe:	3b80      	subs	r3, #128	; 0x80
 8005ec0:	4a32      	ldr	r2, [pc, #200]	; (8005f8c <create_name+0x178>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005ec6:	7fbb      	ldrb	r3, [r7, #30]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4831      	ldr	r0, [pc, #196]	; (8005f90 <create_name+0x17c>)
 8005ecc:	f7fe fee3 	bl	8004c96 <chk_chr>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <create_name+0xc6>
				return FR_INVALID_NAME;
 8005ed6:	2306      	movs	r3, #6
 8005ed8:	e054      	b.n	8005f84 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005eda:	7fbb      	ldrb	r3, [r7, #30]
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d907      	bls.n	8005ef0 <create_name+0xdc>
 8005ee0:	7fbb      	ldrb	r3, [r7, #30]
 8005ee2:	2b5a      	cmp	r3, #90	; 0x5a
 8005ee4:	d804      	bhi.n	8005ef0 <create_name+0xdc>
				b |= 2;
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
 8005ee8:	f043 0302 	orr.w	r3, r3, #2
 8005eec:	77fb      	strb	r3, [r7, #31]
 8005eee:	e00c      	b.n	8005f0a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005ef0:	7fbb      	ldrb	r3, [r7, #30]
 8005ef2:	2b60      	cmp	r3, #96	; 0x60
 8005ef4:	d909      	bls.n	8005f0a <create_name+0xf6>
 8005ef6:	7fbb      	ldrb	r3, [r7, #30]
 8005ef8:	2b7a      	cmp	r3, #122	; 0x7a
 8005efa:	d806      	bhi.n	8005f0a <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	7fbb      	ldrb	r3, [r7, #30]
 8005f06:	3b20      	subs	r3, #32
 8005f08:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	613a      	str	r2, [r7, #16]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	4413      	add	r3, r2
 8005f14:	7fba      	ldrb	r2, [r7, #30]
 8005f16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005f18:	e7a1      	b.n	8005e5e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	441a      	add	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005f24:	7fbb      	ldrb	r3, [r7, #30]
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d801      	bhi.n	8005f2e <create_name+0x11a>
 8005f2a:	2304      	movs	r3, #4
 8005f2c:	e000      	b.n	8005f30 <create_name+0x11c>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <create_name+0x128>
 8005f38:	2306      	movs	r3, #6
 8005f3a:	e023      	b.n	8005f84 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2be5      	cmp	r3, #229	; 0xe5
 8005f42:	d102      	bne.n	8005f4a <create_name+0x136>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2205      	movs	r2, #5
 8005f48:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d102      	bne.n	8005f56 <create_name+0x142>
 8005f50:	7ffb      	ldrb	r3, [r7, #31]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d103      	bne.n	8005f68 <create_name+0x154>
 8005f60:	7fbb      	ldrb	r3, [r7, #30]
 8005f62:	f043 0310 	orr.w	r3, r3, #16
 8005f66:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005f68:	7ffb      	ldrb	r3, [r7, #31]
 8005f6a:	f003 030c 	and.w	r3, r3, #12
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d103      	bne.n	8005f7a <create_name+0x166>
 8005f72:	7fbb      	ldrb	r3, [r7, #30]
 8005f74:	f043 0308 	orr.w	r3, r3, #8
 8005f78:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	330b      	adds	r3, #11
 8005f7e:	7fba      	ldrb	r2, [r7, #30]
 8005f80:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f82:	2300      	movs	r3, #0
#endif
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08007fe0 	.word	0x08007fe0
 8005f90:	08007f64 	.word	0x08007f64

08005f94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8005fa4:	d003      	beq.n	8005fae <follow_path+0x1a>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b5c      	cmp	r3, #92	; 0x5c
 8005fac:	d102      	bne.n	8005fb4 <follow_path+0x20>
		path++;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b1f      	cmp	r3, #31
 8005fc2:	d80a      	bhi.n	8005fda <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fc72 	bl	80058b0 <dir_sdi>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005fd8:	e045      	b.n	8006066 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fda:	463b      	mov	r3, r7
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff ff18 	bl	8005e14 <create_name>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d136      	bne.n	800605c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff fe88 	bl	8005d04 <dir_find>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ffe:	7adb      	ldrb	r3, [r3, #11]
 8006000:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d128      	bne.n	8006060 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d123      	bne.n	8006060 <follow_path+0xcc>
 8006018:	2305      	movs	r3, #5
 800601a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800601c:	e020      	b.n	8006060 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11d      	bne.n	8006064 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800602e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	330b      	adds	r3, #11
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800603e:	2305      	movs	r3, #5
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e010      	b.n	8006066 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fe04 	bl	8005c5a <ld_clust>
 8006052:	4602      	mov	r2, r0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800605a:	e7be      	b.n	8005fda <follow_path+0x46>
			if (res != FR_OK) break;
 800605c:	bf00      	nop
 800605e:	e002      	b.n	8006066 <follow_path+0xd2>
				break;
 8006060:	bf00      	nop
 8006062:	e000      	b.n	8006066 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006064:	bf00      	nop
		}
	}

	return res;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800607c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d031      	beq.n	80060ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e002      	b.n	8006094 <get_ldnumber+0x24>
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	3301      	adds	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b20      	cmp	r3, #32
 800609a:	d903      	bls.n	80060a4 <get_ldnumber+0x34>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b3a      	cmp	r3, #58	; 0x3a
 80060a2:	d1f4      	bne.n	800608e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b3a      	cmp	r3, #58	; 0x3a
 80060aa:	d11c      	bne.n	80060e6 <get_ldnumber+0x76>
			tp = *path;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	60fa      	str	r2, [r7, #12]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	3b30      	subs	r3, #48	; 0x30
 80060bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d80e      	bhi.n	80060e2 <get_ldnumber+0x72>
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d10a      	bne.n	80060e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d107      	bne.n	80060e2 <get_ldnumber+0x72>
					vol = (int)i;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3301      	adds	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	e002      	b.n	80060ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060ea:	693b      	ldr	r3, [r7, #16]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006110:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fe ffd9 	bl	80050ce <move_window>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <check_fs+0x2e>
		return 3;
 8006122:	2303      	movs	r3, #3
 8006124:	e04a      	b.n	80061bc <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800612c:	3301      	adds	r3, #1
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	b21a      	sxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800613a:	b21b      	sxth	r3, r3
 800613c:	4313      	orrs	r3, r2
 800613e:	b21b      	sxth	r3, r3
 8006140:	4a20      	ldr	r2, [pc, #128]	; (80061c4 <check_fs+0xcc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d001      	beq.n	800614a <check_fs+0x52>
		return 2;
 8006146:	2302      	movs	r3, #2
 8006148:	e038      	b.n	80061bc <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3336      	adds	r3, #54	; 0x36
 800614e:	3303      	adds	r3, #3
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	061a      	lsls	r2, r3, #24
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3336      	adds	r3, #54	; 0x36
 8006158:	3302      	adds	r3, #2
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	4313      	orrs	r3, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	3236      	adds	r2, #54	; 0x36
 8006164:	3201      	adds	r2, #1
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	0212      	lsls	r2, r2, #8
 800616a:	4313      	orrs	r3, r2
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006172:	4313      	orrs	r3, r2
 8006174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <check_fs+0xd0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <check_fs+0x8a>
		return 0;
 800617e:	2300      	movs	r3, #0
 8006180:	e01c      	b.n	80061bc <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3352      	adds	r3, #82	; 0x52
 8006186:	3303      	adds	r3, #3
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	061a      	lsls	r2, r3, #24
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3352      	adds	r3, #82	; 0x52
 8006190:	3302      	adds	r3, #2
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	4313      	orrs	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	3252      	adds	r2, #82	; 0x52
 800619c:	3201      	adds	r2, #1
 800619e:	7812      	ldrb	r2, [r2, #0]
 80061a0:	0212      	lsls	r2, r2, #8
 80061a2:	4313      	orrs	r3, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	4a05      	ldr	r2, [pc, #20]	; (80061c8 <check_fs+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <check_fs+0xc2>
		return 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e000      	b.n	80061bc <check_fs+0xc4>

	return 1;
 80061ba:	2301      	movs	r3, #1
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	ffffaa55 	.word	0xffffaa55
 80061c8:	00544146 	.word	0x00544146

080061cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b096      	sub	sp, #88	; 0x58
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f7ff ff45 	bl	8006070 <get_ldnumber>
 80061e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da01      	bge.n	80061f2 <find_volume+0x26>
 80061ee:	230b      	movs	r3, #11
 80061f0:	e2a8      	b.n	8006744 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061f2:	4a9d      	ldr	r2, [pc, #628]	; (8006468 <find_volume+0x29c>)
 80061f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <find_volume+0x3a>
 8006202:	230c      	movs	r3, #12
 8006204:	e29e      	b.n	8006744 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01b      	beq.n	800624e <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fc3b 	bl	8004a98 <disk_status>
 8006222:	4603      	mov	r3, r0
 8006224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10c      	bne.n	800624e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <find_volume+0x7e>
 800623a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006246:	230a      	movs	r3, #10
 8006248:	e27c      	b.n	8006744 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800624a:	2300      	movs	r3, #0
 800624c:	e27a      	b.n	8006744 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fc30 	bl	8004acc <disk_initialize>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800627e:	2303      	movs	r3, #3
 8006280:	e260      	b.n	8006744 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <find_volume+0xcc>
 8006288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006294:	230a      	movs	r3, #10
 8006296:	e255      	b.n	8006744 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800629c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800629e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062a0:	f7ff ff2a 	bl	80060f8 <check_fs>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80062aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d153      	bne.n	800635a <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80062b2:	2300      	movs	r3, #0
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
 80062b6:	e028      	b.n	800630a <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80062b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80062c2:	4413      	add	r3, r2
 80062c4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	3304      	adds	r3, #4
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <find_volume+0x12a>
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	330b      	adds	r3, #11
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	061a      	lsls	r2, r3, #24
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	330a      	adds	r3, #10
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	4313      	orrs	r3, r2
 80062e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e4:	3209      	adds	r2, #9
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	0212      	lsls	r2, r2, #8
 80062ea:	4313      	orrs	r3, r2
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	3208      	adds	r2, #8
 80062f0:	7812      	ldrb	r2, [r2, #0]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	e000      	b.n	80062f8 <find_volume+0x12c>
 80062f6:	2200      	movs	r2, #0
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	3358      	adds	r3, #88	; 0x58
 80062fe:	443b      	add	r3, r7
 8006300:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006306:	3301      	adds	r3, #1
 8006308:	643b      	str	r3, [r7, #64]	; 0x40
 800630a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630c:	2b03      	cmp	r3, #3
 800630e:	d9d3      	bls.n	80062b8 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006310:	2300      	movs	r3, #0
 8006312:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <find_volume+0x154>
 800631a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631c:	3b01      	subs	r3, #1
 800631e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	3358      	adds	r3, #88	; 0x58
 8006326:	443b      	add	r3, r7
 8006328:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <find_volume+0x174>
 8006334:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006336:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006338:	f7ff fede 	bl	80060f8 <check_fs>
 800633c:	4603      	mov	r3, r0
 800633e:	e000      	b.n	8006342 <find_volume+0x176>
 8006340:	2302      	movs	r3, #2
 8006342:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <find_volume+0x18e>
 800634e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006350:	3301      	adds	r3, #1
 8006352:	643b      	str	r3, [r7, #64]	; 0x40
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	2b03      	cmp	r3, #3
 8006358:	d9e2      	bls.n	8006320 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800635a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800635e:	2b03      	cmp	r3, #3
 8006360:	d101      	bne.n	8006366 <find_volume+0x19a>
 8006362:	2301      	movs	r3, #1
 8006364:	e1ee      	b.n	8006744 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006366:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <find_volume+0x1a6>
 800636e:	230d      	movs	r3, #13
 8006370:	e1e8      	b.n	8006744 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	7b1b      	ldrb	r3, [r3, #12]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	b21a      	sxth	r2, r3
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	7adb      	ldrb	r3, [r3, #11]
 800637e:	b21b      	sxth	r3, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	b21b      	sxth	r3, r3
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d001      	beq.n	800638e <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800638a:	230d      	movs	r3, #13
 800638c:	e1da      	b.n	8006744 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	7ddb      	ldrb	r3, [r3, #23]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	b21a      	sxth	r2, r3
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	7d9b      	ldrb	r3, [r3, #22]
 800639a:	b21b      	sxth	r3, r3
 800639c:	4313      	orrs	r3, r2
 800639e:	b21b      	sxth	r3, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d112      	bne.n	80063d0 <find_volume+0x204>
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80063b0:	061a      	lsls	r2, r3, #24
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80063b8:	041b      	lsls	r3, r3, #16
 80063ba:	4313      	orrs	r3, r2
 80063bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063be:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80063c2:	0212      	lsls	r2, r2, #8
 80063c4:	4313      	orrs	r3, r2
 80063c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80063cc:	4313      	orrs	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	7c1a      	ldrb	r2, [r3, #16]
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d006      	beq.n	80063fa <find_volume+0x22e>
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d001      	beq.n	80063fa <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 80063f6:	230d      	movs	r3, #13
 80063f8:	e1a4      	b.n	8006744 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006400:	461a      	mov	r2, r3
 8006402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	7b5a      	ldrb	r2, [r3, #13]
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <find_volume+0x268>
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006424:	461a      	mov	r2, r3
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800642c:	3b01      	subs	r3, #1
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8006434:	230d      	movs	r3, #13
 8006436:	e185      	b.n	8006744 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	7c9b      	ldrb	r3, [r3, #18]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	b21a      	sxth	r2, r3
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	7c5b      	ldrb	r3, [r3, #17]
 8006444:	b21b      	sxth	r3, r3
 8006446:	4313      	orrs	r3, r2
 8006448:	b21b      	sxth	r3, r3
 800644a:	b29a      	uxth	r2, r3
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006462:	230d      	movs	r3, #13
 8006464:	e16e      	b.n	8006744 <find_volume+0x578>
 8006466:	bf00      	nop
 8006468:	200005e0 	.word	0x200005e0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	7d1b      	ldrb	r3, [r3, #20]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	b21a      	sxth	r2, r3
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	7cdb      	ldrb	r3, [r3, #19]
 8006478:	b21b      	sxth	r3, r3
 800647a:	4313      	orrs	r3, r2
 800647c:	b21b      	sxth	r3, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006484:	2b00      	cmp	r3, #0
 8006486:	d112      	bne.n	80064ae <find_volume+0x2e2>
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800648e:	061a      	lsls	r2, r3, #24
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006496:	041b      	lsls	r3, r3, #16
 8006498:	4313      	orrs	r3, r2
 800649a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800649c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80064a0:	0212      	lsls	r2, r2, #8
 80064a2:	4313      	orrs	r3, r2
 80064a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	7bdb      	ldrb	r3, [r3, #15]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	b21a      	sxth	r2, r3
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	7b9b      	ldrb	r3, [r3, #14]
 80064ba:	b21b      	sxth	r3, r3
 80064bc:	4313      	orrs	r3, r2
 80064be:	b21b      	sxth	r3, r3
 80064c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80064c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <find_volume+0x300>
 80064c8:	230d      	movs	r3, #13
 80064ca:	e13b      	b.n	8006744 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80064cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d0:	4413      	add	r3, r2
 80064d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80064d8:	0912      	lsrs	r2, r2, #4
 80064da:	b292      	uxth	r2, r2
 80064dc:	4413      	add	r3, r2
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80064e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d201      	bcs.n	80064ec <find_volume+0x320>
 80064e8:	230d      	movs	r3, #13
 80064ea:	e12b      	b.n	8006744 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80064ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80064f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <find_volume+0x33c>
 8006504:	230d      	movs	r3, #13
 8006506:	e11d      	b.n	8006744 <find_volume+0x578>
	fmt = FS_FAT12;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006514:	4293      	cmp	r3, r2
 8006516:	d902      	bls.n	800651e <find_volume+0x352>
 8006518:	2302      	movs	r3, #2
 800651a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006524:	4293      	cmp	r3, r2
 8006526:	d902      	bls.n	800652e <find_volume+0x362>
 8006528:	2303      	movs	r3, #3
 800652a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1c9a      	adds	r2, r3, #2
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800653c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006540:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006544:	441a      	add	r2, r3
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800654c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	441a      	add	r2, r3
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800655c:	2b03      	cmp	r3, #3
 800655e:	d121      	bne.n	80065a4 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <find_volume+0x3a2>
 800656a:	230d      	movs	r3, #13
 800656c:	e0ea      	b.n	8006744 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006574:	061a      	lsls	r2, r3, #24
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	4313      	orrs	r3, r2
 8006580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006582:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006586:	0212      	lsls	r2, r2, #8
 8006588:	4313      	orrs	r3, r2
 800658a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006590:	431a      	orrs	r2, r3
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	647b      	str	r3, [r7, #68]	; 0x44
 80065a2:	e025      	b.n	80065f0 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <find_volume+0x3e6>
 80065ae:	230d      	movs	r3, #13
 80065b0:	e0c8      	b.n	8006744 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	441a      	add	r2, r3
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80065c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d104      	bne.n	80065d4 <find_volume+0x408>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	e00c      	b.n	80065ee <find_volume+0x422>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	085a      	lsrs	r2, r3, #1
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80065ee:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80065f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80065fc:	0a5b      	lsrs	r3, r3, #9
 80065fe:	429a      	cmp	r2, r3
 8006600:	d201      	bcs.n	8006606 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8006602:	230d      	movs	r3, #13
 8006604:	e09e      	b.n	8006744 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800660c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006628:	2b03      	cmp	r3, #3
 800662a:	d177      	bne.n	800671c <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	b21a      	sxth	r2, r3
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800663c:	b21b      	sxth	r3, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	b21b      	sxth	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	d16a      	bne.n	800671c <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006648:	3301      	adds	r3, #1
 800664a:	4619      	mov	r1, r3
 800664c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800664e:	f7fe fd3e 	bl	80050ce <move_window>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d161      	bne.n	800671c <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	b21a      	sxth	r2, r3
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006670:	b21b      	sxth	r3, r3
 8006672:	4313      	orrs	r3, r2
 8006674:	b21b      	sxth	r3, r3
 8006676:	4a35      	ldr	r2, [pc, #212]	; (800674c <find_volume+0x580>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d14f      	bne.n	800671c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	78db      	ldrb	r3, [r3, #3]
 8006680:	061a      	lsls	r2, r3, #24
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	789b      	ldrb	r3, [r3, #2]
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	4313      	orrs	r3, r2
 800668a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668c:	7852      	ldrb	r2, [r2, #1]
 800668e:	0212      	lsls	r2, r2, #8
 8006690:	4313      	orrs	r3, r2
 8006692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	4313      	orrs	r3, r2
 8006698:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <find_volume+0x584>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d13e      	bne.n	800671c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80066a4:	061a      	lsls	r2, r3, #24
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	4313      	orrs	r3, r2
 80066b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b2:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80066b6:	0212      	lsls	r2, r2, #8
 80066b8:	4313      	orrs	r3, r2
 80066ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066bc:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80066c0:	4313      	orrs	r3, r2
 80066c2:	4a24      	ldr	r2, [pc, #144]	; (8006754 <find_volume+0x588>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d129      	bne.n	800671c <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80066ce:	061a      	lsls	r2, r3, #24
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	4313      	orrs	r3, r2
 80066da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066dc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80066e0:	0212      	lsls	r2, r2, #8
 80066e2:	4313      	orrs	r3, r2
 80066e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066e6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80066ea:	431a      	orrs	r2, r3
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80066f8:	061a      	lsls	r2, r3, #24
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	4313      	orrs	r3, r2
 8006704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006706:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800670a:	0212      	lsls	r2, r2, #8
 800670c:	4313      	orrs	r3, r2
 800670e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006710:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006714:	431a      	orrs	r2, r3
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <find_volume+0x58c>)
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	3301      	adds	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <find_volume+0x58c>)
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <find_volume+0x58c>)
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800673c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800673e:	f7fe fc53 	bl	8004fe8 <clear_lock>
#endif

	return FR_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3758      	adds	r7, #88	; 0x58
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	ffffaa55 	.word	0xffffaa55
 8006750:	41615252 	.word	0x41615252
 8006754:	61417272 	.word	0x61417272
 8006758:	200005e4 	.word	0x200005e4

0800675c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d022      	beq.n	80067b4 <validate+0x58>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01d      	beq.n	80067b4 <validate+0x58>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800677e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <validate+0x58>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800678c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006796:	429a      	cmp	r2, r3
 8006798:	d10c      	bne.n	80067b4 <validate+0x58>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067a0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe f977 	bl	8004a98 <disk_status>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80067b4:	2309      	movs	r3, #9
 80067b6:	e000      	b.n	80067ba <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80067d6:	f107 0310 	add.w	r3, r7, #16
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fc48 	bl	8006070 <get_ldnumber>
 80067e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	da01      	bge.n	80067ec <f_mount+0x28>
 80067e8:	230b      	movs	r3, #11
 80067ea:	e02d      	b.n	8006848 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80067ec:	4a18      	ldr	r2, [pc, #96]	; (8006850 <f_mount+0x8c>)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80067fc:	69b8      	ldr	r0, [r7, #24]
 80067fe:	f7fe fbf3 	bl	8004fe8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	490d      	ldr	r1, [pc, #52]	; (8006850 <f_mount+0x8c>)
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <f_mount+0x6a>
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <f_mount+0x6e>
 800682e:	2300      	movs	r3, #0
 8006830:	e00a      	b.n	8006848 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006832:	f107 0108 	add.w	r1, r7, #8
 8006836:	f107 030c 	add.w	r3, r7, #12
 800683a:	2200      	movs	r2, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fcc5 	bl	80061cc <find_volume>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3720      	adds	r7, #32
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	200005e0 	.word	0x200005e0

08006854 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800685a:	af00      	add	r7, sp, #0
 800685c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006860:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006864:	6018      	str	r0, [r3, #0]
 8006866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800686a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800686e:	6019      	str	r1, [r3, #0]
 8006870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006874:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006878:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800687a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800687e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <f_open+0x38>
 8006888:	2309      	movs	r3, #9
 800688a:	e257      	b.n	8006d3c <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800688c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006890:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800689c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80068a4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068a8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80068ac:	7812      	ldrb	r2, [r2, #0]
 80068ae:	f002 021f 	and.w	r2, r2, #31
 80068b2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80068b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	f107 0320 	add.w	r3, r7, #32
 80068cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fc7b 	bl	80061cc <find_volume>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80068dc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 8229 	bne.w	8006d38 <f_open+0x4e4>
		INIT_BUF(dj);
 80068e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068ea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80068ee:	f107 0214 	add.w	r2, r7, #20
 80068f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80068f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068fa:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	f107 0320 	add.w	r3, r7, #32
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fb44 	bl	8005f94 <follow_path>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8006912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006916:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800691a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800691e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006922:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11d      	bne.n	8006966 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800692a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8006932:	2306      	movs	r3, #6
 8006934:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006938:	e015      	b.n	8006966 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800693a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800693e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	f107 0320 	add.w	r3, r7, #32
 8006958:	4611      	mov	r1, r2
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe f9b6 	bl	8004ccc <chk_lock>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f003 031c 	and.w	r3, r3, #28
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80e6 	beq.w	8006b46 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800697a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800697e:	2b00      	cmp	r3, #0
 8006980:	d027      	beq.n	80069d2 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006982:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006986:	2b04      	cmp	r3, #4
 8006988:	d10e      	bne.n	80069a8 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800698a:	f7fe fa0d 	bl	8004da8 <enq_lock>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <f_open+0x14e>
 8006994:	f107 0320 	add.w	r3, r7, #32
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fa02 	bl	8005da2 <dir_register>
 800699e:	4603      	mov	r3, r0
 80069a0:	e000      	b.n	80069a4 <f_open+0x150>
 80069a2:	2312      	movs	r3, #18
 80069a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80069a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ac:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80069b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80069b4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	f042 0208 	orr.w	r2, r2, #8
 80069be:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80069c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069cc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80069d0:	e017      	b.n	8006a02 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80069d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80069d6:	330b      	adds	r3, #11
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 0311 	and.w	r3, r3, #17
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <f_open+0x196>
					res = FR_DENIED;
 80069e2:	2307      	movs	r3, #7
 80069e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80069e8:	e00b      	b.n	8006a02 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80069ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ee:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <f_open+0x1ae>
						res = FR_EXIST;
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a02:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 80c1 	bne.w	8006b8e <f_open+0x33a>
 8006a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a10:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80b7 	beq.w	8006b8e <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8006a20:	f7fd fafc 	bl	800401c <get_fattime>
 8006a24:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006a28:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a2c:	330e      	adds	r3, #14
 8006a2e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	0a1b      	lsrs	r3, r3, #8
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a44:	330f      	adds	r3, #15
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006a4e:	0c1a      	lsrs	r2, r3, #16
 8006a50:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a54:	3310      	adds	r3, #16
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006a5e:	0e1a      	lsrs	r2, r3, #24
 8006a60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a64:	3311      	adds	r3, #17
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006a6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a6e:	330b      	adds	r3, #11
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006a74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a78:	331c      	adds	r3, #28
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a82:	331d      	adds	r3, #29
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a8c:	331e      	adds	r3, #30
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006a96:	331f      	adds	r3, #31
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006a9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006aa8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff f8d4 	bl	8005c5a <ld_clust>
 8006ab2:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006abc:	f7ff f8fb 	bl	8005cb6 <st_clust>
				dj.fs->wflag = 1;
 8006ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8006ad2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d059      	beq.n	8006b8e <f_open+0x33a>
					dw = dj.fs->winsect;
 8006ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ade:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ae6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006aea:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006afa:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fdaa 	bl	8005658 <remove_chain>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8006b0a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d13d      	bne.n	8006b8e <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006b12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b16:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b1e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006b22:	3a01      	subs	r2, #1
 8006b24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b34:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fac8 	bl	80050ce <move_window>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006b44:	e023      	b.n	8006b8e <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006b46:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11f      	bne.n	8006b8e <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006b4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b52:	330b      	adds	r3, #11
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <f_open+0x312>
					res = FR_NO_FILE;
 8006b5e:	2304      	movs	r3, #4
 8006b60:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006b64:	e013      	b.n	8006b8e <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <f_open+0x33a>
 8006b78:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006b7c:	330b      	adds	r3, #11
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <f_open+0x33a>
						res = FR_DENIED;
 8006b88:	2307      	movs	r3, #7
 8006b8a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006b8e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d153      	bne.n	8006c3e <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b9a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8006ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bac:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006bb0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bb4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006bb8:	7812      	ldrb	r2, [r2, #0]
 8006bba:	f042 0220 	orr.w	r2, r2, #32
 8006bbe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bcc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006bec:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f107 0320 	add.w	r3, r7, #32
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe f8ed 	bl	8004df0 <inc_lock>
 8006c16:	4602      	mov	r2, r0
 8006c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c2a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <f_open+0x3ea>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006c3e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d178      	bne.n	8006d38 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8006c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c4a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c54:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006c58:	7812      	ldrb	r2, [r2, #0]
 8006c5a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006c5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c62:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c72:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006c76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c7a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe ffeb 	bl	8005c5a <ld_clust>
 8006c84:	4602      	mov	r2, r0
 8006c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c8a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006c94:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006c98:	331f      	adds	r3, #31
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	061a      	lsls	r2, r3, #24
 8006c9e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006ca2:	331e      	adds	r3, #30
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006cae:	321d      	adds	r2, #29
 8006cb0:	7812      	ldrb	r2, [r2, #0]
 8006cb2:	0212      	lsls	r2, r2, #8
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006cba:	321c      	adds	r2, #28
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8006cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8006cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006cee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006cfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d02:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006d06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8006d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d26:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006d38:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b08c      	sub	sp, #48	; 0x30
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fcfc 	bl	800675c <validate>
 8006d64:	4603      	mov	r3, r0
 8006d66:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006d68:	7ffb      	ldrb	r3, [r7, #31]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <f_read+0x2c>
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
 8006d70:	e150      	b.n	8007014 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006d82:	e147      	b.n	8007014 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006d92:	2307      	movs	r3, #7
 8006d94:	e13e      	b.n	8007014 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	f240 812d 	bls.w	800700a <f_read+0x2c4>
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006db4:	e129      	b.n	800700a <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 80f2 	bne.w	8006faa <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006dd6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	4013      	ands	r3, r2
 8006de0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d139      	bne.n	8006e5c <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfa:	e018      	b.n	8006e2e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7fe fd19 	bl	8005846 <clmt_clust>
 8006e14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e16:	e00a      	b.n	8006e2e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f7fe fa4e 	bl	80052c8 <get_fat>
 8006e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d805      	bhi.n	8006e40 <f_read+0xfa>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0e9      	b.n	8007014 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e46:	d105      	bne.n	8006e54 <f_read+0x10e>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0df      	b.n	8007014 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7fe fa0a 	bl	8005284 <clust2sect>
 8006e70:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <f_read+0x13e>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e80:	2302      	movs	r3, #2
 8006e82:	e0c7      	b.n	8007014 <f_read+0x2ce>
			sect += csect;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	0a5b      	lsrs	r3, r3, #9
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d046      	beq.n	8006f26 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006e98:	7dfa      	ldrb	r2, [r7, #23]
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	4413      	add	r3, r2
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006ea4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d908      	bls.n	8006ebe <f_read+0x178>
					cc = fp->fs->csize - csect;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006eb2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ec4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	6a39      	ldr	r1, [r7, #32]
 8006ece:	f7fd fe23 	bl	8004b18 <disk_read>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e097      	b.n	8007014 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d015      	beq.n	8006f1e <f_read+0x1d8>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d90d      	bls.n	8006f1e <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	025b      	lsls	r3, r3, #9
 8006f0e:	6a3a      	ldr	r2, [r7, #32]
 8006f10:	4413      	add	r3, r2
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fd fe5b 	bl	8004bd4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	025b      	lsls	r3, r3, #9
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006f24:	e05b      	b.n	8006fde <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d037      	beq.n	8006fa2 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01d      	beq.n	8006f7c <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f46:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f52:	2301      	movs	r3, #1
 8006f54:	f7fd fe00 	bl	8004b58 <disk_write>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f66:	2301      	movs	r3, #1
 8006f68:	e054      	b.n	8007014 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f82:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	f7fd fdc4 	bl	8004b18 <disk_read>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e038      	b.n	8007014 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d901      	bls.n	8006fc6 <f_read+0x280>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6a38      	ldr	r0, [r7, #32]
 8006fda:	f7fd fdfb 	bl	8004bd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006fde:	6a3a      	ldr	r2, [r7, #32]
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	4413      	add	r3, r2
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	441a      	add	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	441a      	add	r2, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f47f aed2 	bne.w	8006db6 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3730      	adds	r7, #48	; 0x30
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fb99 	bl	800675c <validate>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 80a8 	bne.w	8007186 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80a0 	beq.w	8007186 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d019      	beq.n	8007088 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800705a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007066:	2301      	movs	r3, #1
 8007068:	f7fd fd76 	bl	8004b58 <disk_write>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007072:	2301      	movs	r3, #1
 8007074:	e088      	b.n	8007188 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800707c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007080:	b2da      	uxtb	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007094:	4619      	mov	r1, r3
 8007096:	4610      	mov	r0, r2
 8007098:	f7fe f819 	bl	80050ce <move_window>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d16f      	bne.n	8007186 <f_sync+0x16a>
				dir = fp->dir_ptr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80070ac:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	330b      	adds	r3, #11
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	330b      	adds	r3, #11
 80070b8:	f042 0220 	orr.w	r2, r2, #32
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	331c      	adds	r3, #28
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b29a      	uxth	r2, r3
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	331d      	adds	r3, #29
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80070e8:	0c1a      	lsrs	r2, r3, #16
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	331e      	adds	r3, #30
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80070f8:	0e1a      	lsrs	r2, r3, #24
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	331f      	adds	r3, #31
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007108:	4619      	mov	r1, r3
 800710a:	6938      	ldr	r0, [r7, #16]
 800710c:	f7fe fdd3 	bl	8005cb6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007110:	f7fc ff84 	bl	800401c <get_fattime>
 8007114:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3316      	adds	r3, #22
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	b29b      	uxth	r3, r3
 8007124:	0a1b      	lsrs	r3, r3, #8
 8007126:	b29a      	uxth	r2, r3
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3317      	adds	r3, #23
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	0c1a      	lsrs	r2, r3, #16
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	3318      	adds	r3, #24
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	0e1a      	lsrs	r2, r3, #24
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	3319      	adds	r3, #25
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3312      	adds	r3, #18
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	3313      	adds	r3, #19
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800715e:	f023 0320 	bic.w	r3, r3, #32
 8007162:	b2da      	uxtb	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800717c:	4618      	mov	r0, r3
 800717e:	f7fd ffd4 	bl	800512a <sync_fs>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007186:	7dfb      	ldrb	r3, [r7, #23]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff3f 	bl	800701c <f_sync>
 800719e:	4603      	mov	r3, r0
 80071a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d116      	bne.n	80071d6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff fad7 	bl	800675c <validate>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10e      	bne.n	80071d6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fd fece 	bl	8004f60 <dec_lock>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	; 0x38
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	2200      	movs	r2, #0
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fe ffe9 	bl	80061cc <find_volume>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8007206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 80af 	bne.w	800736e <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800721c:	3b02      	subs	r3, #2
 800721e:	429a      	cmp	r2, r3
 8007220:	d805      	bhi.n	800722e <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	e09f      	b.n	800736e <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007234:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800723a:	7efb      	ldrb	r3, [r7, #27]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d125      	bne.n	800728c <f_getfree+0xac>
				clst = 2;
 8007240:	2302      	movs	r3, #2
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8007244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007246:	69f8      	ldr	r0, [r7, #28]
 8007248:	f7fe f83e 	bl	80052c8 <get_fat>
 800724c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007254:	d103      	bne.n	800725e <f_getfree+0x7e>
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800725c:	e077      	b.n	800734e <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d103      	bne.n	800726c <f_getfree+0x8c>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800726a:	e070      	b.n	800734e <f_getfree+0x16e>
					if (stat == 0) n++;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <f_getfree+0x98>
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	3301      	adds	r3, #1
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	3301      	adds	r3, #1
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007286:	429a      	cmp	r2, r3
 8007288:	d3dc      	bcc.n	8007244 <f_getfree+0x64>
 800728a:	e060      	b.n	800734e <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d112      	bne.n	80072d0 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80072b0:	4619      	mov	r1, r3
 80072b2:	69f8      	ldr	r0, [r7, #28]
 80072b4:	f7fd ff0b 	bl	80050ce <move_window>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80072be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d142      	bne.n	800734c <f_getfree+0x16c>
						p = fs->win.d8;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80072ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80072d0:	7efb      	ldrb	r3, [r7, #27]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d115      	bne.n	8007302 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	3301      	adds	r3, #1
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	b21a      	sxth	r2, r3
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b21b      	sxth	r3, r3
 80072e6:	4313      	orrs	r3, r2
 80072e8:	b21b      	sxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <f_getfree+0x114>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	3301      	adds	r3, #1
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	3302      	adds	r3, #2
 80072f8:	623b      	str	r3, [r7, #32]
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	3b02      	subs	r3, #2
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007300:	e01d      	b.n	800733e <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	3303      	adds	r3, #3
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	061a      	lsls	r2, r3, #24
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	3302      	adds	r3, #2
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	4313      	orrs	r3, r2
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	3201      	adds	r2, #1
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	0212      	lsls	r2, r2, #8
 800731c:	4313      	orrs	r3, r2
 800731e:	6a3a      	ldr	r2, [r7, #32]
 8007320:	7812      	ldrb	r2, [r2, #0]
 8007322:	4313      	orrs	r3, r2
 8007324:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <f_getfree+0x152>
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	3301      	adds	r3, #1
 8007330:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	3304      	adds	r3, #4
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	3b04      	subs	r3, #4
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	3b01      	subs	r3, #1
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ac      	bne.n	80072a4 <f_getfree+0xc4>
 800734a:	e000      	b.n	800734e <f_getfree+0x16e>
						if (res != FR_OK) break;
 800734c:	bf00      	nop
			}
			fs->free_clust = n;
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800736e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007372:	4618      	mov	r0, r3
 8007374:	3738      	adds	r7, #56	; 0x38
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800738e:	e01b      	b.n	80073c8 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007390:	f107 0310 	add.w	r3, r7, #16
 8007394:	f107 0114 	add.w	r1, r7, #20
 8007398:	2201      	movs	r2, #1
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fcd3 	bl	8006d46 <f_read>
		if (rc != 1) break;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d116      	bne.n	80073d4 <f_gets+0x5a>
		c = s[0];
 80073a6:	7d3b      	ldrb	r3, [r7, #20]
 80073a8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b0d      	cmp	r3, #13
 80073ae:	d100      	bne.n	80073b2 <f_gets+0x38>
 80073b0:	e00a      	b.n	80073c8 <f_gets+0x4e>
		*p++ = c;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	61ba      	str	r2, [r7, #24]
 80073b8:	7dfa      	ldrb	r2, [r7, #23]
 80073ba:	701a      	strb	r2, [r3, #0]
		n++;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2b0a      	cmp	r3, #10
 80073c6:	d007      	beq.n	80073d8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	dbde      	blt.n	8007390 <f_gets+0x16>
 80073d2:	e002      	b.n	80073da <f_gets+0x60>
		if (rc != 1) break;
 80073d4:	bf00      	nop
 80073d6:	e000      	b.n	80073da <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80073d8:	bf00      	nop
	}
	*p = 0;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <f_gets+0x70>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	e000      	b.n	80073ec <f_gets+0x72>
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800740a:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 800740c:	7a5b      	ldrb	r3, [r3, #9]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d831      	bhi.n	8007478 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007414:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 8007416:	7a5b      	ldrb	r3, [r3, #9]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 800741e:	2100      	movs	r1, #0
 8007420:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 8007424:	7a5b      	ldrb	r3, [r3, #9]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4a17      	ldr	r2, [pc, #92]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 8007434:	7a5b      	ldrb	r3, [r3, #9]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	4b13      	ldr	r3, [pc, #76]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 800743c:	4413      	add	r3, r2
 800743e:	79fa      	ldrb	r2, [r7, #7]
 8007440:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 8007444:	7a5b      	ldrb	r3, [r3, #9]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	b2d1      	uxtb	r1, r2
 800744c:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <FATFS_LinkDriverEx+0x94>)
 800744e:	7251      	strb	r1, [r2, #9]
 8007450:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007452:	7dbb      	ldrb	r3, [r7, #22]
 8007454:	3330      	adds	r3, #48	; 0x30
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3301      	adds	r3, #1
 8007460:	223a      	movs	r2, #58	; 0x3a
 8007462:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	3302      	adds	r3, #2
 8007468:	222f      	movs	r2, #47	; 0x2f
 800746a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3303      	adds	r3, #3
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
}
 800747a:	4618      	mov	r0, r3
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000600 	.word	0x20000600

0800748c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007496:	2200      	movs	r2, #0
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff ffaa 	bl	80073f4 <FATFS_LinkDriverEx>
 80074a0:	4603      	mov	r3, r0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <__errno>:
 80074ac:	4b01      	ldr	r3, [pc, #4]	; (80074b4 <__errno+0x8>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000024 	.word	0x20000024

080074b8 <__libc_init_array>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	4d0d      	ldr	r5, [pc, #52]	; (80074f0 <__libc_init_array+0x38>)
 80074bc:	4c0d      	ldr	r4, [pc, #52]	; (80074f4 <__libc_init_array+0x3c>)
 80074be:	1b64      	subs	r4, r4, r5
 80074c0:	10a4      	asrs	r4, r4, #2
 80074c2:	2600      	movs	r6, #0
 80074c4:	42a6      	cmp	r6, r4
 80074c6:	d109      	bne.n	80074dc <__libc_init_array+0x24>
 80074c8:	4d0b      	ldr	r5, [pc, #44]	; (80074f8 <__libc_init_array+0x40>)
 80074ca:	4c0c      	ldr	r4, [pc, #48]	; (80074fc <__libc_init_array+0x44>)
 80074cc:	f000 fca8 	bl	8007e20 <_init>
 80074d0:	1b64      	subs	r4, r4, r5
 80074d2:	10a4      	asrs	r4, r4, #2
 80074d4:	2600      	movs	r6, #0
 80074d6:	42a6      	cmp	r6, r4
 80074d8:	d105      	bne.n	80074e6 <__libc_init_array+0x2e>
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e0:	4798      	blx	r3
 80074e2:	3601      	adds	r6, #1
 80074e4:	e7ee      	b.n	80074c4 <__libc_init_array+0xc>
 80074e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ea:	4798      	blx	r3
 80074ec:	3601      	adds	r6, #1
 80074ee:	e7f2      	b.n	80074d6 <__libc_init_array+0x1e>
 80074f0:	08008094 	.word	0x08008094
 80074f4:	08008094 	.word	0x08008094
 80074f8:	08008094 	.word	0x08008094
 80074fc:	08008098 	.word	0x08008098

08007500 <memset>:
 8007500:	4402      	add	r2, r0
 8007502:	4603      	mov	r3, r0
 8007504:	4293      	cmp	r3, r2
 8007506:	d100      	bne.n	800750a <memset+0xa>
 8007508:	4770      	bx	lr
 800750a:	f803 1b01 	strb.w	r1, [r3], #1
 800750e:	e7f9      	b.n	8007504 <memset+0x4>

08007510 <_vsniprintf_r>:
 8007510:	b530      	push	{r4, r5, lr}
 8007512:	4614      	mov	r4, r2
 8007514:	2c00      	cmp	r4, #0
 8007516:	b09b      	sub	sp, #108	; 0x6c
 8007518:	4605      	mov	r5, r0
 800751a:	461a      	mov	r2, r3
 800751c:	da05      	bge.n	800752a <_vsniprintf_r+0x1a>
 800751e:	238b      	movs	r3, #139	; 0x8b
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007526:	b01b      	add	sp, #108	; 0x6c
 8007528:	bd30      	pop	{r4, r5, pc}
 800752a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800752e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007532:	bf14      	ite	ne
 8007534:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007538:	4623      	moveq	r3, r4
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007542:	9100      	str	r1, [sp, #0]
 8007544:	9104      	str	r1, [sp, #16]
 8007546:	f8ad 300e 	strh.w	r3, [sp, #14]
 800754a:	4669      	mov	r1, sp
 800754c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800754e:	f000 f875 	bl	800763c <_svfiprintf_r>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	bfbc      	itt	lt
 8007556:	238b      	movlt	r3, #139	; 0x8b
 8007558:	602b      	strlt	r3, [r5, #0]
 800755a:	2c00      	cmp	r4, #0
 800755c:	d0e3      	beq.n	8007526 <_vsniprintf_r+0x16>
 800755e:	9b00      	ldr	r3, [sp, #0]
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	e7df      	b.n	8007526 <_vsniprintf_r+0x16>
	...

08007568 <vsniprintf>:
 8007568:	b507      	push	{r0, r1, r2, lr}
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	460a      	mov	r2, r1
 8007570:	4601      	mov	r1, r0
 8007572:	4803      	ldr	r0, [pc, #12]	; (8007580 <vsniprintf+0x18>)
 8007574:	6800      	ldr	r0, [r0, #0]
 8007576:	f7ff ffcb 	bl	8007510 <_vsniprintf_r>
 800757a:	b003      	add	sp, #12
 800757c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007580:	20000024 	.word	0x20000024

08007584 <__ssputs_r>:
 8007584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	688e      	ldr	r6, [r1, #8]
 800758a:	429e      	cmp	r6, r3
 800758c:	4682      	mov	sl, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4690      	mov	r8, r2
 8007592:	461f      	mov	r7, r3
 8007594:	d838      	bhi.n	8007608 <__ssputs_r+0x84>
 8007596:	898a      	ldrh	r2, [r1, #12]
 8007598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800759c:	d032      	beq.n	8007604 <__ssputs_r+0x80>
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	6909      	ldr	r1, [r1, #16]
 80075a2:	eba5 0901 	sub.w	r9, r5, r1
 80075a6:	6965      	ldr	r5, [r4, #20]
 80075a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075b0:	3301      	adds	r3, #1
 80075b2:	444b      	add	r3, r9
 80075b4:	106d      	asrs	r5, r5, #1
 80075b6:	429d      	cmp	r5, r3
 80075b8:	bf38      	it	cc
 80075ba:	461d      	movcc	r5, r3
 80075bc:	0553      	lsls	r3, r2, #21
 80075be:	d531      	bpl.n	8007624 <__ssputs_r+0xa0>
 80075c0:	4629      	mov	r1, r5
 80075c2:	f000 fb63 	bl	8007c8c <_malloc_r>
 80075c6:	4606      	mov	r6, r0
 80075c8:	b950      	cbnz	r0, 80075e0 <__ssputs_r+0x5c>
 80075ca:	230c      	movs	r3, #12
 80075cc:	f8ca 3000 	str.w	r3, [sl]
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	6921      	ldr	r1, [r4, #16]
 80075e2:	464a      	mov	r2, r9
 80075e4:	f000 fabe 	bl	8007b64 <memcpy>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	6126      	str	r6, [r4, #16]
 80075f6:	6165      	str	r5, [r4, #20]
 80075f8:	444e      	add	r6, r9
 80075fa:	eba5 0509 	sub.w	r5, r5, r9
 80075fe:	6026      	str	r6, [r4, #0]
 8007600:	60a5      	str	r5, [r4, #8]
 8007602:	463e      	mov	r6, r7
 8007604:	42be      	cmp	r6, r7
 8007606:	d900      	bls.n	800760a <__ssputs_r+0x86>
 8007608:	463e      	mov	r6, r7
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	4632      	mov	r2, r6
 800760e:	4641      	mov	r1, r8
 8007610:	f000 fab6 	bl	8007b80 <memmove>
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	1b9b      	subs	r3, r3, r6
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	4433      	add	r3, r6
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	2000      	movs	r0, #0
 8007622:	e7db      	b.n	80075dc <__ssputs_r+0x58>
 8007624:	462a      	mov	r2, r5
 8007626:	f000 fba5 	bl	8007d74 <_realloc_r>
 800762a:	4606      	mov	r6, r0
 800762c:	2800      	cmp	r0, #0
 800762e:	d1e1      	bne.n	80075f4 <__ssputs_r+0x70>
 8007630:	6921      	ldr	r1, [r4, #16]
 8007632:	4650      	mov	r0, sl
 8007634:	f000 fabe 	bl	8007bb4 <_free_r>
 8007638:	e7c7      	b.n	80075ca <__ssputs_r+0x46>
	...

0800763c <_svfiprintf_r>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4698      	mov	r8, r3
 8007642:	898b      	ldrh	r3, [r1, #12]
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	b09d      	sub	sp, #116	; 0x74
 8007648:	4607      	mov	r7, r0
 800764a:	460d      	mov	r5, r1
 800764c:	4614      	mov	r4, r2
 800764e:	d50e      	bpl.n	800766e <_svfiprintf_r+0x32>
 8007650:	690b      	ldr	r3, [r1, #16]
 8007652:	b963      	cbnz	r3, 800766e <_svfiprintf_r+0x32>
 8007654:	2140      	movs	r1, #64	; 0x40
 8007656:	f000 fb19 	bl	8007c8c <_malloc_r>
 800765a:	6028      	str	r0, [r5, #0]
 800765c:	6128      	str	r0, [r5, #16]
 800765e:	b920      	cbnz	r0, 800766a <_svfiprintf_r+0x2e>
 8007660:	230c      	movs	r3, #12
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007668:	e0d1      	b.n	800780e <_svfiprintf_r+0x1d2>
 800766a:	2340      	movs	r3, #64	; 0x40
 800766c:	616b      	str	r3, [r5, #20]
 800766e:	2300      	movs	r3, #0
 8007670:	9309      	str	r3, [sp, #36]	; 0x24
 8007672:	2320      	movs	r3, #32
 8007674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007678:	f8cd 800c 	str.w	r8, [sp, #12]
 800767c:	2330      	movs	r3, #48	; 0x30
 800767e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007828 <_svfiprintf_r+0x1ec>
 8007682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007686:	f04f 0901 	mov.w	r9, #1
 800768a:	4623      	mov	r3, r4
 800768c:	469a      	mov	sl, r3
 800768e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007692:	b10a      	cbz	r2, 8007698 <_svfiprintf_r+0x5c>
 8007694:	2a25      	cmp	r2, #37	; 0x25
 8007696:	d1f9      	bne.n	800768c <_svfiprintf_r+0x50>
 8007698:	ebba 0b04 	subs.w	fp, sl, r4
 800769c:	d00b      	beq.n	80076b6 <_svfiprintf_r+0x7a>
 800769e:	465b      	mov	r3, fp
 80076a0:	4622      	mov	r2, r4
 80076a2:	4629      	mov	r1, r5
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff ff6d 	bl	8007584 <__ssputs_r>
 80076aa:	3001      	adds	r0, #1
 80076ac:	f000 80aa 	beq.w	8007804 <_svfiprintf_r+0x1c8>
 80076b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b2:	445a      	add	r2, fp
 80076b4:	9209      	str	r2, [sp, #36]	; 0x24
 80076b6:	f89a 3000 	ldrb.w	r3, [sl]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 80a2 	beq.w	8007804 <_svfiprintf_r+0x1c8>
 80076c0:	2300      	movs	r3, #0
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ca:	f10a 0a01 	add.w	sl, sl, #1
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	9307      	str	r3, [sp, #28]
 80076d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076d6:	931a      	str	r3, [sp, #104]	; 0x68
 80076d8:	4654      	mov	r4, sl
 80076da:	2205      	movs	r2, #5
 80076dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e0:	4851      	ldr	r0, [pc, #324]	; (8007828 <_svfiprintf_r+0x1ec>)
 80076e2:	f7f8 fd7d 	bl	80001e0 <memchr>
 80076e6:	9a04      	ldr	r2, [sp, #16]
 80076e8:	b9d8      	cbnz	r0, 8007722 <_svfiprintf_r+0xe6>
 80076ea:	06d0      	lsls	r0, r2, #27
 80076ec:	bf44      	itt	mi
 80076ee:	2320      	movmi	r3, #32
 80076f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f4:	0711      	lsls	r1, r2, #28
 80076f6:	bf44      	itt	mi
 80076f8:	232b      	movmi	r3, #43	; 0x2b
 80076fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007702:	2b2a      	cmp	r3, #42	; 0x2a
 8007704:	d015      	beq.n	8007732 <_svfiprintf_r+0xf6>
 8007706:	9a07      	ldr	r2, [sp, #28]
 8007708:	4654      	mov	r4, sl
 800770a:	2000      	movs	r0, #0
 800770c:	f04f 0c0a 	mov.w	ip, #10
 8007710:	4621      	mov	r1, r4
 8007712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007716:	3b30      	subs	r3, #48	; 0x30
 8007718:	2b09      	cmp	r3, #9
 800771a:	d94e      	bls.n	80077ba <_svfiprintf_r+0x17e>
 800771c:	b1b0      	cbz	r0, 800774c <_svfiprintf_r+0x110>
 800771e:	9207      	str	r2, [sp, #28]
 8007720:	e014      	b.n	800774c <_svfiprintf_r+0x110>
 8007722:	eba0 0308 	sub.w	r3, r0, r8
 8007726:	fa09 f303 	lsl.w	r3, r9, r3
 800772a:	4313      	orrs	r3, r2
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	46a2      	mov	sl, r4
 8007730:	e7d2      	b.n	80076d8 <_svfiprintf_r+0x9c>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	1d19      	adds	r1, r3, #4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	9103      	str	r1, [sp, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfbb      	ittet	lt
 800773e:	425b      	neglt	r3, r3
 8007740:	f042 0202 	orrlt.w	r2, r2, #2
 8007744:	9307      	strge	r3, [sp, #28]
 8007746:	9307      	strlt	r3, [sp, #28]
 8007748:	bfb8      	it	lt
 800774a:	9204      	strlt	r2, [sp, #16]
 800774c:	7823      	ldrb	r3, [r4, #0]
 800774e:	2b2e      	cmp	r3, #46	; 0x2e
 8007750:	d10c      	bne.n	800776c <_svfiprintf_r+0x130>
 8007752:	7863      	ldrb	r3, [r4, #1]
 8007754:	2b2a      	cmp	r3, #42	; 0x2a
 8007756:	d135      	bne.n	80077c4 <_svfiprintf_r+0x188>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9203      	str	r2, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfb8      	it	lt
 8007764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007768:	3402      	adds	r4, #2
 800776a:	9305      	str	r3, [sp, #20]
 800776c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007838 <_svfiprintf_r+0x1fc>
 8007770:	7821      	ldrb	r1, [r4, #0]
 8007772:	2203      	movs	r2, #3
 8007774:	4650      	mov	r0, sl
 8007776:	f7f8 fd33 	bl	80001e0 <memchr>
 800777a:	b140      	cbz	r0, 800778e <_svfiprintf_r+0x152>
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	eba0 000a 	sub.w	r0, r0, sl
 8007782:	fa03 f000 	lsl.w	r0, r3, r0
 8007786:	9b04      	ldr	r3, [sp, #16]
 8007788:	4303      	orrs	r3, r0
 800778a:	3401      	adds	r4, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007792:	4826      	ldr	r0, [pc, #152]	; (800782c <_svfiprintf_r+0x1f0>)
 8007794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007798:	2206      	movs	r2, #6
 800779a:	f7f8 fd21 	bl	80001e0 <memchr>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d038      	beq.n	8007814 <_svfiprintf_r+0x1d8>
 80077a2:	4b23      	ldr	r3, [pc, #140]	; (8007830 <_svfiprintf_r+0x1f4>)
 80077a4:	bb1b      	cbnz	r3, 80077ee <_svfiprintf_r+0x1b2>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	3307      	adds	r3, #7
 80077aa:	f023 0307 	bic.w	r3, r3, #7
 80077ae:	3308      	adds	r3, #8
 80077b0:	9303      	str	r3, [sp, #12]
 80077b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b4:	4433      	add	r3, r6
 80077b6:	9309      	str	r3, [sp, #36]	; 0x24
 80077b8:	e767      	b.n	800768a <_svfiprintf_r+0x4e>
 80077ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80077be:	460c      	mov	r4, r1
 80077c0:	2001      	movs	r0, #1
 80077c2:	e7a5      	b.n	8007710 <_svfiprintf_r+0xd4>
 80077c4:	2300      	movs	r3, #0
 80077c6:	3401      	adds	r4, #1
 80077c8:	9305      	str	r3, [sp, #20]
 80077ca:	4619      	mov	r1, r3
 80077cc:	f04f 0c0a 	mov.w	ip, #10
 80077d0:	4620      	mov	r0, r4
 80077d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d6:	3a30      	subs	r2, #48	; 0x30
 80077d8:	2a09      	cmp	r2, #9
 80077da:	d903      	bls.n	80077e4 <_svfiprintf_r+0x1a8>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0c5      	beq.n	800776c <_svfiprintf_r+0x130>
 80077e0:	9105      	str	r1, [sp, #20]
 80077e2:	e7c3      	b.n	800776c <_svfiprintf_r+0x130>
 80077e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e8:	4604      	mov	r4, r0
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7f0      	b.n	80077d0 <_svfiprintf_r+0x194>
 80077ee:	ab03      	add	r3, sp, #12
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	462a      	mov	r2, r5
 80077f4:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <_svfiprintf_r+0x1f8>)
 80077f6:	a904      	add	r1, sp, #16
 80077f8:	4638      	mov	r0, r7
 80077fa:	f3af 8000 	nop.w
 80077fe:	1c42      	adds	r2, r0, #1
 8007800:	4606      	mov	r6, r0
 8007802:	d1d6      	bne.n	80077b2 <_svfiprintf_r+0x176>
 8007804:	89ab      	ldrh	r3, [r5, #12]
 8007806:	065b      	lsls	r3, r3, #25
 8007808:	f53f af2c 	bmi.w	8007664 <_svfiprintf_r+0x28>
 800780c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800780e:	b01d      	add	sp, #116	; 0x74
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	ab03      	add	r3, sp, #12
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	462a      	mov	r2, r5
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <_svfiprintf_r+0x1f8>)
 800781c:	a904      	add	r1, sp, #16
 800781e:	4638      	mov	r0, r7
 8007820:	f000 f87a 	bl	8007918 <_printf_i>
 8007824:	e7eb      	b.n	80077fe <_svfiprintf_r+0x1c2>
 8007826:	bf00      	nop
 8007828:	08008060 	.word	0x08008060
 800782c:	0800806a 	.word	0x0800806a
 8007830:	00000000 	.word	0x00000000
 8007834:	08007585 	.word	0x08007585
 8007838:	08008066 	.word	0x08008066

0800783c <_printf_common>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	4616      	mov	r6, r2
 8007842:	4699      	mov	r9, r3
 8007844:	688a      	ldr	r2, [r1, #8]
 8007846:	690b      	ldr	r3, [r1, #16]
 8007848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800784c:	4293      	cmp	r3, r2
 800784e:	bfb8      	it	lt
 8007850:	4613      	movlt	r3, r2
 8007852:	6033      	str	r3, [r6, #0]
 8007854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007858:	4607      	mov	r7, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b10a      	cbz	r2, 8007862 <_printf_common+0x26>
 800785e:	3301      	adds	r3, #1
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	0699      	lsls	r1, r3, #26
 8007866:	bf42      	ittt	mi
 8007868:	6833      	ldrmi	r3, [r6, #0]
 800786a:	3302      	addmi	r3, #2
 800786c:	6033      	strmi	r3, [r6, #0]
 800786e:	6825      	ldr	r5, [r4, #0]
 8007870:	f015 0506 	ands.w	r5, r5, #6
 8007874:	d106      	bne.n	8007884 <_printf_common+0x48>
 8007876:	f104 0a19 	add.w	sl, r4, #25
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	6832      	ldr	r2, [r6, #0]
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	42ab      	cmp	r3, r5
 8007882:	dc26      	bgt.n	80078d2 <_printf_common+0x96>
 8007884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007888:	1e13      	subs	r3, r2, #0
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	bf18      	it	ne
 800788e:	2301      	movne	r3, #1
 8007890:	0692      	lsls	r2, r2, #26
 8007892:	d42b      	bmi.n	80078ec <_printf_common+0xb0>
 8007894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007898:	4649      	mov	r1, r9
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	3001      	adds	r0, #1
 80078a0:	d01e      	beq.n	80078e0 <_printf_common+0xa4>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	68e5      	ldr	r5, [r4, #12]
 80078a6:	6832      	ldr	r2, [r6, #0]
 80078a8:	f003 0306 	and.w	r3, r3, #6
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	bf08      	it	eq
 80078b0:	1aad      	subeq	r5, r5, r2
 80078b2:	68a3      	ldr	r3, [r4, #8]
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	bf0c      	ite	eq
 80078b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078bc:	2500      	movne	r5, #0
 80078be:	4293      	cmp	r3, r2
 80078c0:	bfc4      	itt	gt
 80078c2:	1a9b      	subgt	r3, r3, r2
 80078c4:	18ed      	addgt	r5, r5, r3
 80078c6:	2600      	movs	r6, #0
 80078c8:	341a      	adds	r4, #26
 80078ca:	42b5      	cmp	r5, r6
 80078cc:	d11a      	bne.n	8007904 <_printf_common+0xc8>
 80078ce:	2000      	movs	r0, #0
 80078d0:	e008      	b.n	80078e4 <_printf_common+0xa8>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4652      	mov	r2, sl
 80078d6:	4649      	mov	r1, r9
 80078d8:	4638      	mov	r0, r7
 80078da:	47c0      	blx	r8
 80078dc:	3001      	adds	r0, #1
 80078de:	d103      	bne.n	80078e8 <_printf_common+0xac>
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e8:	3501      	adds	r5, #1
 80078ea:	e7c6      	b.n	800787a <_printf_common+0x3e>
 80078ec:	18e1      	adds	r1, r4, r3
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	2030      	movs	r0, #48	; 0x30
 80078f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078f6:	4422      	add	r2, r4
 80078f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007900:	3302      	adds	r3, #2
 8007902:	e7c7      	b.n	8007894 <_printf_common+0x58>
 8007904:	2301      	movs	r3, #1
 8007906:	4622      	mov	r2, r4
 8007908:	4649      	mov	r1, r9
 800790a:	4638      	mov	r0, r7
 800790c:	47c0      	blx	r8
 800790e:	3001      	adds	r0, #1
 8007910:	d0e6      	beq.n	80078e0 <_printf_common+0xa4>
 8007912:	3601      	adds	r6, #1
 8007914:	e7d9      	b.n	80078ca <_printf_common+0x8e>
	...

08007918 <_printf_i>:
 8007918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	7e0f      	ldrb	r7, [r1, #24]
 800791e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007920:	2f78      	cmp	r7, #120	; 0x78
 8007922:	4691      	mov	r9, r2
 8007924:	4680      	mov	r8, r0
 8007926:	460c      	mov	r4, r1
 8007928:	469a      	mov	sl, r3
 800792a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800792e:	d807      	bhi.n	8007940 <_printf_i+0x28>
 8007930:	2f62      	cmp	r7, #98	; 0x62
 8007932:	d80a      	bhi.n	800794a <_printf_i+0x32>
 8007934:	2f00      	cmp	r7, #0
 8007936:	f000 80d8 	beq.w	8007aea <_printf_i+0x1d2>
 800793a:	2f58      	cmp	r7, #88	; 0x58
 800793c:	f000 80a3 	beq.w	8007a86 <_printf_i+0x16e>
 8007940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007948:	e03a      	b.n	80079c0 <_printf_i+0xa8>
 800794a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800794e:	2b15      	cmp	r3, #21
 8007950:	d8f6      	bhi.n	8007940 <_printf_i+0x28>
 8007952:	a101      	add	r1, pc, #4	; (adr r1, 8007958 <_printf_i+0x40>)
 8007954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079c5 	.word	0x080079c5
 8007960:	08007941 	.word	0x08007941
 8007964:	08007941 	.word	0x08007941
 8007968:	08007941 	.word	0x08007941
 800796c:	08007941 	.word	0x08007941
 8007970:	080079c5 	.word	0x080079c5
 8007974:	08007941 	.word	0x08007941
 8007978:	08007941 	.word	0x08007941
 800797c:	08007941 	.word	0x08007941
 8007980:	08007941 	.word	0x08007941
 8007984:	08007ad1 	.word	0x08007ad1
 8007988:	080079f5 	.word	0x080079f5
 800798c:	08007ab3 	.word	0x08007ab3
 8007990:	08007941 	.word	0x08007941
 8007994:	08007941 	.word	0x08007941
 8007998:	08007af3 	.word	0x08007af3
 800799c:	08007941 	.word	0x08007941
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007941 	.word	0x08007941
 80079a8:	08007941 	.word	0x08007941
 80079ac:	08007abb 	.word	0x08007abb
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	602a      	str	r2, [r5, #0]
 80079b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0a3      	b.n	8007b0c <_printf_i+0x1f4>
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	6829      	ldr	r1, [r5, #0]
 80079c8:	0606      	lsls	r6, r0, #24
 80079ca:	f101 0304 	add.w	r3, r1, #4
 80079ce:	d50a      	bpl.n	80079e6 <_printf_i+0xce>
 80079d0:	680e      	ldr	r6, [r1, #0]
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	2e00      	cmp	r6, #0
 80079d6:	da03      	bge.n	80079e0 <_printf_i+0xc8>
 80079d8:	232d      	movs	r3, #45	; 0x2d
 80079da:	4276      	negs	r6, r6
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e0:	485e      	ldr	r0, [pc, #376]	; (8007b5c <_printf_i+0x244>)
 80079e2:	230a      	movs	r3, #10
 80079e4:	e019      	b.n	8007a1a <_printf_i+0x102>
 80079e6:	680e      	ldr	r6, [r1, #0]
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079ee:	bf18      	it	ne
 80079f0:	b236      	sxthne	r6, r6
 80079f2:	e7ef      	b.n	80079d4 <_printf_i+0xbc>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	1d19      	adds	r1, r3, #4
 80079fa:	6029      	str	r1, [r5, #0]
 80079fc:	0601      	lsls	r1, r0, #24
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0xec>
 8007a00:	681e      	ldr	r6, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0xf2>
 8007a04:	0646      	lsls	r6, r0, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0xe8>
 8007a08:	881e      	ldrh	r6, [r3, #0]
 8007a0a:	4854      	ldr	r0, [pc, #336]	; (8007b5c <_printf_i+0x244>)
 8007a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a0e:	bf0c      	ite	eq
 8007a10:	2308      	moveq	r3, #8
 8007a12:	230a      	movne	r3, #10
 8007a14:	2100      	movs	r1, #0
 8007a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a1a:	6865      	ldr	r5, [r4, #4]
 8007a1c:	60a5      	str	r5, [r4, #8]
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	bfa2      	ittt	ge
 8007a22:	6821      	ldrge	r1, [r4, #0]
 8007a24:	f021 0104 	bicge.w	r1, r1, #4
 8007a28:	6021      	strge	r1, [r4, #0]
 8007a2a:	b90e      	cbnz	r6, 8007a30 <_printf_i+0x118>
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	d04d      	beq.n	8007acc <_printf_i+0x1b4>
 8007a30:	4615      	mov	r5, r2
 8007a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a36:	fb03 6711 	mls	r7, r3, r1, r6
 8007a3a:	5dc7      	ldrb	r7, [r0, r7]
 8007a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a40:	4637      	mov	r7, r6
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	460e      	mov	r6, r1
 8007a46:	d9f4      	bls.n	8007a32 <_printf_i+0x11a>
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d10b      	bne.n	8007a64 <_printf_i+0x14c>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	07de      	lsls	r6, r3, #31
 8007a50:	d508      	bpl.n	8007a64 <_printf_i+0x14c>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	4299      	cmp	r1, r3
 8007a58:	bfde      	ittt	le
 8007a5a:	2330      	movle	r3, #48	; 0x30
 8007a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a64:	1b52      	subs	r2, r2, r5
 8007a66:	6122      	str	r2, [r4, #16]
 8007a68:	f8cd a000 	str.w	sl, [sp]
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	aa03      	add	r2, sp, #12
 8007a70:	4621      	mov	r1, r4
 8007a72:	4640      	mov	r0, r8
 8007a74:	f7ff fee2 	bl	800783c <_printf_common>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d14c      	bne.n	8007b16 <_printf_i+0x1fe>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a80:	b004      	add	sp, #16
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	4835      	ldr	r0, [pc, #212]	; (8007b5c <_printf_i+0x244>)
 8007a88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a8c:	6829      	ldr	r1, [r5, #0]
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a94:	6029      	str	r1, [r5, #0]
 8007a96:	061d      	lsls	r5, r3, #24
 8007a98:	d514      	bpl.n	8007ac4 <_printf_i+0x1ac>
 8007a9a:	07df      	lsls	r7, r3, #31
 8007a9c:	bf44      	itt	mi
 8007a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007aa2:	6023      	strmi	r3, [r4, #0]
 8007aa4:	b91e      	cbnz	r6, 8007aae <_printf_i+0x196>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f023 0320 	bic.w	r3, r3, #32
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	2310      	movs	r3, #16
 8007ab0:	e7b0      	b.n	8007a14 <_printf_i+0xfc>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	2378      	movs	r3, #120	; 0x78
 8007abc:	4828      	ldr	r0, [pc, #160]	; (8007b60 <_printf_i+0x248>)
 8007abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ac2:	e7e3      	b.n	8007a8c <_printf_i+0x174>
 8007ac4:	0659      	lsls	r1, r3, #25
 8007ac6:	bf48      	it	mi
 8007ac8:	b2b6      	uxthmi	r6, r6
 8007aca:	e7e6      	b.n	8007a9a <_printf_i+0x182>
 8007acc:	4615      	mov	r5, r2
 8007ace:	e7bb      	b.n	8007a48 <_printf_i+0x130>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	6826      	ldr	r6, [r4, #0]
 8007ad4:	6961      	ldr	r1, [r4, #20]
 8007ad6:	1d18      	adds	r0, r3, #4
 8007ad8:	6028      	str	r0, [r5, #0]
 8007ada:	0635      	lsls	r5, r6, #24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	d501      	bpl.n	8007ae4 <_printf_i+0x1cc>
 8007ae0:	6019      	str	r1, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <_printf_i+0x1d2>
 8007ae4:	0670      	lsls	r0, r6, #25
 8007ae6:	d5fb      	bpl.n	8007ae0 <_printf_i+0x1c8>
 8007ae8:	8019      	strh	r1, [r3, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	4615      	mov	r5, r2
 8007af0:	e7ba      	b.n	8007a68 <_printf_i+0x150>
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	1d1a      	adds	r2, r3, #4
 8007af6:	602a      	str	r2, [r5, #0]
 8007af8:	681d      	ldr	r5, [r3, #0]
 8007afa:	6862      	ldr	r2, [r4, #4]
 8007afc:	2100      	movs	r1, #0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7f8 fb6e 	bl	80001e0 <memchr>
 8007b04:	b108      	cbz	r0, 8007b0a <_printf_i+0x1f2>
 8007b06:	1b40      	subs	r0, r0, r5
 8007b08:	6060      	str	r0, [r4, #4]
 8007b0a:	6863      	ldr	r3, [r4, #4]
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	e7a8      	b.n	8007a68 <_printf_i+0x150>
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	462a      	mov	r2, r5
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	47d0      	blx	sl
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0ab      	beq.n	8007a7c <_printf_i+0x164>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	079b      	lsls	r3, r3, #30
 8007b28:	d413      	bmi.n	8007b52 <_printf_i+0x23a>
 8007b2a:	68e0      	ldr	r0, [r4, #12]
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	bfb8      	it	lt
 8007b32:	4618      	movlt	r0, r3
 8007b34:	e7a4      	b.n	8007a80 <_printf_i+0x168>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	47d0      	blx	sl
 8007b40:	3001      	adds	r0, #1
 8007b42:	d09b      	beq.n	8007a7c <_printf_i+0x164>
 8007b44:	3501      	adds	r5, #1
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	9903      	ldr	r1, [sp, #12]
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dcf2      	bgt.n	8007b36 <_printf_i+0x21e>
 8007b50:	e7eb      	b.n	8007b2a <_printf_i+0x212>
 8007b52:	2500      	movs	r5, #0
 8007b54:	f104 0619 	add.w	r6, r4, #25
 8007b58:	e7f5      	b.n	8007b46 <_printf_i+0x22e>
 8007b5a:	bf00      	nop
 8007b5c:	08008071 	.word	0x08008071
 8007b60:	08008082 	.word	0x08008082

08007b64 <memcpy>:
 8007b64:	440a      	add	r2, r1
 8007b66:	4291      	cmp	r1, r2
 8007b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	4770      	bx	lr
 8007b70:	b510      	push	{r4, lr}
 8007b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	d1f9      	bne.n	8007b72 <memcpy+0xe>
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <memmove>:
 8007b80:	4288      	cmp	r0, r1
 8007b82:	b510      	push	{r4, lr}
 8007b84:	eb01 0402 	add.w	r4, r1, r2
 8007b88:	d902      	bls.n	8007b90 <memmove+0x10>
 8007b8a:	4284      	cmp	r4, r0
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	d807      	bhi.n	8007ba0 <memmove+0x20>
 8007b90:	1e43      	subs	r3, r0, #1
 8007b92:	42a1      	cmp	r1, r4
 8007b94:	d008      	beq.n	8007ba8 <memmove+0x28>
 8007b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b9e:	e7f8      	b.n	8007b92 <memmove+0x12>
 8007ba0:	4402      	add	r2, r0
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	d100      	bne.n	8007baa <memmove+0x2a>
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bb2:	e7f7      	b.n	8007ba4 <memmove+0x24>

08007bb4 <_free_r>:
 8007bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	d044      	beq.n	8007c44 <_free_r+0x90>
 8007bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbe:	9001      	str	r0, [sp, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bc6:	bfb8      	it	lt
 8007bc8:	18e4      	addlt	r4, r4, r3
 8007bca:	f000 f913 	bl	8007df4 <__malloc_lock>
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <_free_r+0x94>)
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	b933      	cbnz	r3, 8007be4 <_free_r+0x30>
 8007bd6:	6063      	str	r3, [r4, #4]
 8007bd8:	6014      	str	r4, [r2, #0]
 8007bda:	b003      	add	sp, #12
 8007bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be0:	f000 b90e 	b.w	8007e00 <__malloc_unlock>
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d908      	bls.n	8007bfa <_free_r+0x46>
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	1961      	adds	r1, r4, r5
 8007bec:	428b      	cmp	r3, r1
 8007bee:	bf01      	itttt	eq
 8007bf0:	6819      	ldreq	r1, [r3, #0]
 8007bf2:	685b      	ldreq	r3, [r3, #4]
 8007bf4:	1949      	addeq	r1, r1, r5
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	e7ed      	b.n	8007bd6 <_free_r+0x22>
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b10b      	cbz	r3, 8007c04 <_free_r+0x50>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d9fa      	bls.n	8007bfa <_free_r+0x46>
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	1855      	adds	r5, r2, r1
 8007c08:	42a5      	cmp	r5, r4
 8007c0a:	d10b      	bne.n	8007c24 <_free_r+0x70>
 8007c0c:	6824      	ldr	r4, [r4, #0]
 8007c0e:	4421      	add	r1, r4
 8007c10:	1854      	adds	r4, r2, r1
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	d1e0      	bne.n	8007bda <_free_r+0x26>
 8007c18:	681c      	ldr	r4, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	6053      	str	r3, [r2, #4]
 8007c1e:	4421      	add	r1, r4
 8007c20:	6011      	str	r1, [r2, #0]
 8007c22:	e7da      	b.n	8007bda <_free_r+0x26>
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x78>
 8007c26:	230c      	movs	r3, #12
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	e7d6      	b.n	8007bda <_free_r+0x26>
 8007c2c:	6825      	ldr	r5, [r4, #0]
 8007c2e:	1961      	adds	r1, r4, r5
 8007c30:	428b      	cmp	r3, r1
 8007c32:	bf04      	itt	eq
 8007c34:	6819      	ldreq	r1, [r3, #0]
 8007c36:	685b      	ldreq	r3, [r3, #4]
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	bf04      	itt	eq
 8007c3c:	1949      	addeq	r1, r1, r5
 8007c3e:	6021      	streq	r1, [r4, #0]
 8007c40:	6054      	str	r4, [r2, #4]
 8007c42:	e7ca      	b.n	8007bda <_free_r+0x26>
 8007c44:	b003      	add	sp, #12
 8007c46:	bd30      	pop	{r4, r5, pc}
 8007c48:	2000060c 	.word	0x2000060c

08007c4c <sbrk_aligned>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	4e0e      	ldr	r6, [pc, #56]	; (8007c88 <sbrk_aligned+0x3c>)
 8007c50:	460c      	mov	r4, r1
 8007c52:	6831      	ldr	r1, [r6, #0]
 8007c54:	4605      	mov	r5, r0
 8007c56:	b911      	cbnz	r1, 8007c5e <sbrk_aligned+0x12>
 8007c58:	f000 f8bc 	bl	8007dd4 <_sbrk_r>
 8007c5c:	6030      	str	r0, [r6, #0]
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 f8b7 	bl	8007dd4 <_sbrk_r>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	d00a      	beq.n	8007c80 <sbrk_aligned+0x34>
 8007c6a:	1cc4      	adds	r4, r0, #3
 8007c6c:	f024 0403 	bic.w	r4, r4, #3
 8007c70:	42a0      	cmp	r0, r4
 8007c72:	d007      	beq.n	8007c84 <sbrk_aligned+0x38>
 8007c74:	1a21      	subs	r1, r4, r0
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 f8ac 	bl	8007dd4 <_sbrk_r>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d101      	bne.n	8007c84 <sbrk_aligned+0x38>
 8007c80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c84:	4620      	mov	r0, r4
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	20000610 	.word	0x20000610

08007c8c <_malloc_r>:
 8007c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c90:	1ccd      	adds	r5, r1, #3
 8007c92:	f025 0503 	bic.w	r5, r5, #3
 8007c96:	3508      	adds	r5, #8
 8007c98:	2d0c      	cmp	r5, #12
 8007c9a:	bf38      	it	cc
 8007c9c:	250c      	movcc	r5, #12
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	db01      	blt.n	8007ca8 <_malloc_r+0x1c>
 8007ca4:	42a9      	cmp	r1, r5
 8007ca6:	d905      	bls.n	8007cb4 <_malloc_r+0x28>
 8007ca8:	230c      	movs	r3, #12
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	2600      	movs	r6, #0
 8007cae:	4630      	mov	r0, r6
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	4e2e      	ldr	r6, [pc, #184]	; (8007d70 <_malloc_r+0xe4>)
 8007cb6:	f000 f89d 	bl	8007df4 <__malloc_lock>
 8007cba:	6833      	ldr	r3, [r6, #0]
 8007cbc:	461c      	mov	r4, r3
 8007cbe:	bb34      	cbnz	r4, 8007d0e <_malloc_r+0x82>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	f7ff ffc2 	bl	8007c4c <sbrk_aligned>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	4604      	mov	r4, r0
 8007ccc:	d14d      	bne.n	8007d6a <_malloc_r+0xde>
 8007cce:	6834      	ldr	r4, [r6, #0]
 8007cd0:	4626      	mov	r6, r4
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d140      	bne.n	8007d58 <_malloc_r+0xcc>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4638      	mov	r0, r7
 8007cdc:	eb04 0803 	add.w	r8, r4, r3
 8007ce0:	f000 f878 	bl	8007dd4 <_sbrk_r>
 8007ce4:	4580      	cmp	r8, r0
 8007ce6:	d13a      	bne.n	8007d5e <_malloc_r+0xd2>
 8007ce8:	6821      	ldr	r1, [r4, #0]
 8007cea:	3503      	adds	r5, #3
 8007cec:	1a6d      	subs	r5, r5, r1
 8007cee:	f025 0503 	bic.w	r5, r5, #3
 8007cf2:	3508      	adds	r5, #8
 8007cf4:	2d0c      	cmp	r5, #12
 8007cf6:	bf38      	it	cc
 8007cf8:	250c      	movcc	r5, #12
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff ffa5 	bl	8007c4c <sbrk_aligned>
 8007d02:	3001      	adds	r0, #1
 8007d04:	d02b      	beq.n	8007d5e <_malloc_r+0xd2>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	442b      	add	r3, r5
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	e00e      	b.n	8007d2c <_malloc_r+0xa0>
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	1b52      	subs	r2, r2, r5
 8007d12:	d41e      	bmi.n	8007d52 <_malloc_r+0xc6>
 8007d14:	2a0b      	cmp	r2, #11
 8007d16:	d916      	bls.n	8007d46 <_malloc_r+0xba>
 8007d18:	1961      	adds	r1, r4, r5
 8007d1a:	42a3      	cmp	r3, r4
 8007d1c:	6025      	str	r5, [r4, #0]
 8007d1e:	bf18      	it	ne
 8007d20:	6059      	strne	r1, [r3, #4]
 8007d22:	6863      	ldr	r3, [r4, #4]
 8007d24:	bf08      	it	eq
 8007d26:	6031      	streq	r1, [r6, #0]
 8007d28:	5162      	str	r2, [r4, r5]
 8007d2a:	604b      	str	r3, [r1, #4]
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f104 060b 	add.w	r6, r4, #11
 8007d32:	f000 f865 	bl	8007e00 <__malloc_unlock>
 8007d36:	f026 0607 	bic.w	r6, r6, #7
 8007d3a:	1d23      	adds	r3, r4, #4
 8007d3c:	1af2      	subs	r2, r6, r3
 8007d3e:	d0b6      	beq.n	8007cae <_malloc_r+0x22>
 8007d40:	1b9b      	subs	r3, r3, r6
 8007d42:	50a3      	str	r3, [r4, r2]
 8007d44:	e7b3      	b.n	8007cae <_malloc_r+0x22>
 8007d46:	6862      	ldr	r2, [r4, #4]
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	bf0c      	ite	eq
 8007d4c:	6032      	streq	r2, [r6, #0]
 8007d4e:	605a      	strne	r2, [r3, #4]
 8007d50:	e7ec      	b.n	8007d2c <_malloc_r+0xa0>
 8007d52:	4623      	mov	r3, r4
 8007d54:	6864      	ldr	r4, [r4, #4]
 8007d56:	e7b2      	b.n	8007cbe <_malloc_r+0x32>
 8007d58:	4634      	mov	r4, r6
 8007d5a:	6876      	ldr	r6, [r6, #4]
 8007d5c:	e7b9      	b.n	8007cd2 <_malloc_r+0x46>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4638      	mov	r0, r7
 8007d64:	f000 f84c 	bl	8007e00 <__malloc_unlock>
 8007d68:	e7a1      	b.n	8007cae <_malloc_r+0x22>
 8007d6a:	6025      	str	r5, [r4, #0]
 8007d6c:	e7de      	b.n	8007d2c <_malloc_r+0xa0>
 8007d6e:	bf00      	nop
 8007d70:	2000060c 	.word	0x2000060c

08007d74 <_realloc_r>:
 8007d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	b921      	cbnz	r1, 8007d8a <_realloc_r+0x16>
 8007d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d84:	4611      	mov	r1, r2
 8007d86:	f7ff bf81 	b.w	8007c8c <_malloc_r>
 8007d8a:	b92a      	cbnz	r2, 8007d98 <_realloc_r+0x24>
 8007d8c:	f7ff ff12 	bl	8007bb4 <_free_r>
 8007d90:	4625      	mov	r5, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	f000 f838 	bl	8007e0c <_malloc_usable_size_r>
 8007d9c:	4284      	cmp	r4, r0
 8007d9e:	4607      	mov	r7, r0
 8007da0:	d802      	bhi.n	8007da8 <_realloc_r+0x34>
 8007da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007da6:	d812      	bhi.n	8007dce <_realloc_r+0x5a>
 8007da8:	4621      	mov	r1, r4
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff ff6e 	bl	8007c8c <_malloc_r>
 8007db0:	4605      	mov	r5, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0ed      	beq.n	8007d92 <_realloc_r+0x1e>
 8007db6:	42bc      	cmp	r4, r7
 8007db8:	4622      	mov	r2, r4
 8007dba:	4631      	mov	r1, r6
 8007dbc:	bf28      	it	cs
 8007dbe:	463a      	movcs	r2, r7
 8007dc0:	f7ff fed0 	bl	8007b64 <memcpy>
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7ff fef4 	bl	8007bb4 <_free_r>
 8007dcc:	e7e1      	b.n	8007d92 <_realloc_r+0x1e>
 8007dce:	4635      	mov	r5, r6
 8007dd0:	e7df      	b.n	8007d92 <_realloc_r+0x1e>
	...

08007dd4 <_sbrk_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	; (8007df0 <_sbrk_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f8 fdce 	bl	8000980 <_sbrk>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_sbrk_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_sbrk_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20000614 	.word	0x20000614

08007df4 <__malloc_lock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__malloc_lock+0x8>)
 8007df6:	f000 b811 	b.w	8007e1c <__retarget_lock_acquire_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20000618 	.word	0x20000618

08007e00 <__malloc_unlock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__malloc_unlock+0x8>)
 8007e02:	f000 b80c 	b.w	8007e1e <__retarget_lock_release_recursive>
 8007e06:	bf00      	nop
 8007e08:	20000618 	.word	0x20000618

08007e0c <_malloc_usable_size_r>:
 8007e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e10:	1f18      	subs	r0, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfbc      	itt	lt
 8007e16:	580b      	ldrlt	r3, [r1, r0]
 8007e18:	18c0      	addlt	r0, r0, r3
 8007e1a:	4770      	bx	lr

08007e1c <__retarget_lock_acquire_recursive>:
 8007e1c:	4770      	bx	lr

08007e1e <__retarget_lock_release_recursive>:
 8007e1e:	4770      	bx	lr

08007e20 <_init>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr

08007e2c <_fini>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr
