
SdCardReader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b80  08006b80  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08006b80  08006b80  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b80  08006b80  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b84  08006b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000003fc  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011501  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f24  00000000  00000000  00031555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  00035350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f744  00000000  00000000  00036098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a79  00000000  00000000  000557dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b097f  00000000  00000000  0006b255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011bbd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b9c  00000000  00000000  0011bc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006948 	.word	0x08006948

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08006948 	.word	0x08006948

080001c8 <MX_GPIO_Init>:
     PA5   ------> SPI1_SCK
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b52      	ldr	r3, [pc, #328]	; (8000328 <MX_GPIO_Init+0x160>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a51      	ldr	r2, [pc, #324]	; (8000328 <MX_GPIO_Init+0x160>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b4f      	ldr	r3, [pc, #316]	; (8000328 <MX_GPIO_Init+0x160>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b4c      	ldr	r3, [pc, #304]	; (8000328 <MX_GPIO_Init+0x160>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a4b      	ldr	r2, [pc, #300]	; (8000328 <MX_GPIO_Init+0x160>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b49      	ldr	r3, [pc, #292]	; (8000328 <MX_GPIO_Init+0x160>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b46      	ldr	r3, [pc, #280]	; (8000328 <MX_GPIO_Init+0x160>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a45      	ldr	r2, [pc, #276]	; (8000328 <MX_GPIO_Init+0x160>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b43      	ldr	r3, [pc, #268]	; (8000328 <MX_GPIO_Init+0x160>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b40      	ldr	r3, [pc, #256]	; (8000328 <MX_GPIO_Init+0x160>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a3f      	ldr	r2, [pc, #252]	; (8000328 <MX_GPIO_Init+0x160>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b3d      	ldr	r3, [pc, #244]	; (8000328 <MX_GPIO_Init+0x160>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b3a      	ldr	r3, [pc, #232]	; (8000328 <MX_GPIO_Init+0x160>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a39      	ldr	r2, [pc, #228]	; (8000328 <MX_GPIO_Init+0x160>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b37      	ldr	r3, [pc, #220]	; (8000328 <MX_GPIO_Init+0x160>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	; 0xff08
 800025c:	4833      	ldr	r0, [pc, #204]	; (800032c <MX_GPIO_Init+0x164>)
 800025e:	f000 fe9f 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_Card_CS_GPIO_Port, SD_Card_CS_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2102      	movs	r1, #2
 8000266:	4832      	ldr	r0, [pc, #200]	; (8000330 <MX_GPIO_Init+0x168>)
 8000268:	f000 fe9a 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800026c:	2337      	movs	r3, #55	; 0x37
 800026e:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000270:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4619      	mov	r1, r3
 8000280:	482a      	ldr	r0, [pc, #168]	; (800032c <MX_GPIO_Init+0x164>)
 8000282:	f000 fd13 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000286:	f64f 7308 	movw	r3, #65288	; 0xff08
 800028a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	4619      	mov	r1, r3
 800029e:	4823      	ldr	r0, [pc, #140]	; (800032c <MX_GPIO_Init+0x164>)
 80002a0:	f000 fd04 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Card_CS_Pin;
 80002a4:	2302      	movs	r3, #2
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	2301      	movs	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ac:	2301      	movs	r3, #1
 80002ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_Card_CS_GPIO_Port, &GPIO_InitStruct);
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	4619      	mov	r1, r3
 80002ba:	481d      	ldr	r0, [pc, #116]	; (8000330 <MX_GPIO_Init+0x168>)
 80002bc:	f000 fcf6 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002c0:	2301      	movs	r3, #1
 80002c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f000 fce9 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80002da:	2320      	movs	r3, #32
 80002dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e6:	2303      	movs	r3, #3
 80002e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80002ea:	2305      	movs	r3, #5
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f000 fcd8 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80002fc:	23c0      	movs	r3, #192	; 0xc0
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000300:	2302      	movs	r3, #2
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000304:	2301      	movs	r3, #1
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000308:	2303      	movs	r3, #3
 800030a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800030c:	2305      	movs	r3, #5
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	4619      	mov	r1, r3
 8000316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031a:	f000 fcc7 	bl	8000cac <HAL_GPIO_Init>

}
 800031e:	bf00      	nop
 8000320:	3728      	adds	r7, #40	; 0x28
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	48001000 	.word	0x48001000
 8000330:	48000800 	.word	0x48000800

08000334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	480e      	ldr	r0, [pc, #56]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	f000 fe2e 	bl	8000fd0 <HAL_I2C_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f98f 	bl	800069c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	2100      	movs	r1, #0
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000382:	f000 feb4 	bl	80010ee <HAL_I2CEx_ConfigAnalogFilter>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f986 	bl	800069c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	2100      	movs	r1, #0
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000394:	f000 fef6 	bl	8001184 <HAL_I2CEx_ConfigDigitalFilter>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f97d 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000040 	.word	0x20000040
 80003ac:	40005400 	.word	0x40005400
 80003b0:	2000090e 	.word	0x2000090e

080003b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	; 0x28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a17      	ldr	r2, [pc, #92]	; (8000430 <HAL_I2C_MspInit+0x7c>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d127      	bne.n	8000426 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <HAL_I2C_MspInit+0x80>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <HAL_I2C_MspInit+0x80>)
 80003dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <HAL_I2C_MspInit+0x80>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003ee:	23c0      	movs	r3, #192	; 0xc0
 80003f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003f2:	2312      	movs	r3, #18
 80003f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fa:	2303      	movs	r3, #3
 80003fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003fe:	2304      	movs	r3, #4
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4619      	mov	r1, r3
 8000408:	480b      	ldr	r0, [pc, #44]	; (8000438 <HAL_I2C_MspInit+0x84>)
 800040a:	f000 fc4f 	bl	8000cac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_I2C_MspInit+0x80>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <HAL_I2C_MspInit+0x80>)
 8000414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_I2C_MspInit+0x80>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000426:	bf00      	nop
 8000428:	3728      	adds	r7, #40	; 0x28
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40005400 	.word	0x40005400
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400

0800043c <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 800043c:	b40f      	push	{r0, r1, r2, r3}
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
//
//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart4, (uint8_t*)buffer, len, -1);
	// 3/10/2023: Cant use UART4 since it has pin conflicts with I2S3.

}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	b004      	add	sp, #16
 800044c:	4770      	bx	lr
	...

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fab8 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f8bc 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff feb2 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000464:	f7ff ff66 	bl	8000334 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000468:	f000 fa20 	bl	80008ac <MX_USB_PCD_Init>
  MX_FATFS_Init();
 800046c:	f002 ffe6 	bl	800343c <MX_FATFS_Init>
  MX_SPI2_Init();
 8000470:	f000 f91a 	bl	80006a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000474:	484e      	ldr	r0, [pc, #312]	; (80005b0 <main+0x160>)
 8000476:	f7ff ffe1 	bl	800043c <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 800047a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047e:	f000 fb0b 	bl	8000a98 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now, LS - set to 0 because f_mount logic fails when set to 1 = mount now.
 8000482:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8000486:	2201      	movs	r2, #1
 8000488:	494a      	ldr	r1, [pc, #296]	; (80005b4 <main+0x164>)
 800048a:	4618      	mov	r0, r3
 800048c:	f005 fbbc 	bl	8005c08 <f_mount>
 8000490:	4603      	mov	r3, r0
 8000492:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8000496:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800049a:	2b00      	cmp	r3, #0
 800049c:	d006      	beq.n	80004ac <main+0x5c>
  	myprintf("f_mount error (%i)\r\n", fres);
 800049e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80004a2:	4619      	mov	r1, r3
 80004a4:	4844      	ldr	r0, [pc, #272]	; (80005b8 <main+0x168>)
 80004a6:	f7ff ffc9 	bl	800043c <myprintf>
  	while(1);
 80004aa:	e7fe      	b.n	80004aa <main+0x5a>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 80004ac:	f107 0220 	add.w	r2, r7, #32
 80004b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b4:	4619      	mov	r1, r3
 80004b6:	483f      	ldr	r0, [pc, #252]	; (80005b4 <main+0x164>)
 80004b8:	f006 f8b4 	bl	8006624 <f_getfree>
 80004bc:	4603      	mov	r3, r0
 80004be:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 80004c2:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d006      	beq.n	80004d8 <main+0x88>
  	myprintf("f_getfree error (%i)\r\n", fres);
 80004ca:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80004ce:	4619      	mov	r1, r3
 80004d0:	483a      	ldr	r0, [pc, #232]	; (80005bc <main+0x16c>)
 80004d2:	f7ff ffb3 	bl	800043c <myprintf>
  	while(1);
 80004d6:	e7fe      	b.n	80004d6 <main+0x86>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80004d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80004dc:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80004e6:	3b02      	subs	r3, #2
 80004e8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80004ec:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
    free_sectors = free_clusters * getFreeFs->csize;
 80004fe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000502:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800050c:	461a      	mov	r2, r3
 800050e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000512:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	fb02 f303 	mul.w	r3, r2, r3
 800051c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000520:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8000524:	0859      	lsrs	r1, r3, #1
 8000526:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800052a:	085b      	lsrs	r3, r3, #1
 800052c:	461a      	mov	r2, r3
 800052e:	4824      	ldr	r0, [pc, #144]	; (80005c0 <main+0x170>)
 8000530:	f7ff ff84 	bl	800043c <myprintf>

    //Now let's try to open a file in the SD Card
    const char* fileName = "test.wav";
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <main+0x174>)
 8000536:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
    fres = f_open(&fil, fileName, FA_READ);
 800053a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053e:	2201      	movs	r2, #1
 8000540:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8000544:	4618      	mov	r0, r3
 8000546:	f005 fba7 	bl	8005c98 <f_open>
 800054a:	4603      	mov	r3, r0
 800054c:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8000550:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000554:	2b00      	cmp	r3, #0
 8000556:	d003      	beq.n	8000560 <main+0x110>
  	myprintf("f_open error (%i)\r\n");
 8000558:	481b      	ldr	r0, [pc, #108]	; (80005c8 <main+0x178>)
 800055a:	f7ff ff6f 	bl	800043c <myprintf>
  	while(1);
 800055e:	e7fe      	b.n	800055e <main+0x10e>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000560:	481a      	ldr	r0, [pc, #104]	; (80005cc <main+0x17c>)
 8000562:	f7ff ff6b 	bl	800043c <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000566:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800056a:	463b      	mov	r3, r7
 800056c:	211e      	movs	r1, #30
 800056e:	4618      	mov	r0, r3
 8000570:	f006 f925 	bl	80067be <f_gets>
 8000574:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
    if(rres != 0) {
 8000578:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <main+0x13c>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4812      	ldr	r0, [pc, #72]	; (80005d0 <main+0x180>)
 8000586:	f7ff ff59 	bl	800043c <myprintf>
 800058a:	e005      	b.n	8000598 <main+0x148>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 800058c:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000590:	4619      	mov	r1, r3
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <main+0x184>)
 8000594:	f7ff ff52 	bl	800043c <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800059c:	4618      	mov	r0, r3
 800059e:	f006 f819 	bl	80065d4 <f_close>
//
//    //Be a tidy kiwi - don't forget to close your file!
//    f_close(&fil);

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4903      	ldr	r1, [pc, #12]	; (80005b4 <main+0x164>)
 80005a6:	2000      	movs	r0, #0
 80005a8:	f005 fb2e 	bl	8005c08 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x15c>
 80005ae:	bf00      	nop
 80005b0:	08006960 	.word	0x08006960
 80005b4:	08006980 	.word	0x08006980
 80005b8:	08006984 	.word	0x08006984
 80005bc:	0800699c 	.word	0x0800699c
 80005c0:	080069b4 	.word	0x080069b4
 80005c4:	080069fc 	.word	0x080069fc
 80005c8:	08006a08 	.word	0x08006a08
 80005cc:	08006a1c 	.word	0x08006a1c
 80005d0:	08006a4c 	.word	0x08006a4c
 80005d4:	08006a78 	.word	0x08006a78

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09e      	sub	sp, #120	; 0x78
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005e2:	2228      	movs	r2, #40	; 0x28
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 f9a6 	bl	8006938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	223c      	movs	r2, #60	; 0x3c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 f998 	bl	8006938 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000608:	2303      	movs	r3, #3
 800060a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800060c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000610:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800062c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fed0 	bl	80013d8 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800063e:	f000 f82d 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fef8 	bl	8002454 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 f817 	bl	800069c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <SystemClock_Config+0xc0>)
 8000670:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f8ce 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800068a:	f000 f807 	bl	800069c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3778      	adds	r7, #120	; 0x78
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	00020020 	.word	0x00020020

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_SPI2_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_SPI2_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_SPI2_Init+0x74>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_SPI2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI2_Init+0x74>)
 80006c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_SPI2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI2_Init+0x74>)
 80006d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI2_Init+0x74>)
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_SPI2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI2_Init+0x74>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_SPI2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI2_Init+0x74>)
 8000702:	2208      	movs	r2, #8
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_SPI2_Init+0x74>)
 8000708:	f002 fa3a 	bl	8002b80 <HAL_SPI_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000712:	f7ff ffc3 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c
 8000720:	40003800 	.word	0x40003800

08000724 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <HAL_SPI_MspInit+0xb8>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d145      	bne.n	80007d2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 800077c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_SPI_MspInit+0xbc>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800078e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007a0:	2305      	movs	r3, #5
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <HAL_SPI_MspInit+0xc0>)
 80007ac:	f000 fa7e 	bl	8000cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007c2:	2305      	movs	r3, #5
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <HAL_SPI_MspInit+0xc4>)
 80007ce:	f000 fa6d 	bl	8000cac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40003800 	.word	0x40003800
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48001400 	.word	0x48001400
 80007e8:	48000400 	.word	0x48000400

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000822:	2007      	movs	r0, #7
 8000824:	f000 fa0e 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f8ea 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <MX_USB_PCD_Init+0x40>)
 80008b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008b8:	2208      	movs	r2, #8
 80008ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008be:	2202      	movs	r2, #2
 80008c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_USB_PCD_Init+0x3c>)
 80008d6:	f000 fca1 	bl	800121c <HAL_PCD_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80008e0:	f7ff fedc 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000f0 	.word	0x200000f0
 80008ec:	40005c00 	.word	0x40005c00

080008f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_PCD_MspInit+0x80>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d129      	bne.n	8000966 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_PCD_MspInit+0x84>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_PCD_MspInit+0x84>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_PCD_MspInit+0x84>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800092a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800093c:	230e      	movs	r3, #14
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f000 f9af 	bl	8000cac <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_PCD_MspInit+0x84>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_PCD_MspInit+0x84>)
 8000954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_PCD_MspInit+0x84>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40005c00 	.word	0x40005c00
 8000974:	40021000 	.word	0x40021000

08000978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a2:	f7ff ff71 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f005 ffa3 	bl	80068f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fd51 	bl	8000450 <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009bc:	08006b88 	.word	0x08006b88
  ldr r2, =_sbss
 80009c0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009c4:	20000420 	.word	0x20000420

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f931 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff ff00 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f93b 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	f000 f911 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200003dc 	.word	0x200003dc

08000a80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200003dc 	.word	0x200003dc

08000a98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff47 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff5c 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffb0 	bl	8000c00 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e154      	b.n	8000f66 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8146 	beq.w	8000f60 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d005      	beq.n	8000cec <HAL_GPIO_Init+0x40>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d130      	bne.n	8000d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d22:	2201      	movs	r2, #1
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 0201 	and.w	r2, r3, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d017      	beq.n	8000d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d123      	bne.n	8000dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0203 	and.w	r2, r3, #3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80a0 	beq.w	8000f60 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e20:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a57      	ldr	r2, [pc, #348]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <HAL_GPIO_Init+0x2d8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e38:	4a53      	ldr	r2, [pc, #332]	; (8000f88 <HAL_GPIO_Init+0x2dc>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e62:	d019      	beq.n	8000e98 <HAL_GPIO_Init+0x1ec>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <HAL_GPIO_Init+0x2e0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d013      	beq.n	8000e94 <HAL_GPIO_Init+0x1e8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_GPIO_Init+0x2e4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1e4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a47      	ldr	r2, [pc, #284]	; (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1e0>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2ec>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1dc>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e008      	b.n	8000e9a <HAL_GPIO_Init+0x1ee>
 8000e88:	2305      	movs	r3, #5
 8000e8a:	e006      	b.n	8000e9a <HAL_GPIO_Init+0x1ee>
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e004      	b.n	8000e9a <HAL_GPIO_Init+0x1ee>
 8000e90:	2302      	movs	r3, #2
 8000e92:	e002      	b.n	8000e9a <HAL_GPIO_Init+0x1ee>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <HAL_GPIO_Init+0x1ee>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	f002 0203 	and.w	r2, r2, #3
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	4093      	lsls	r3, r2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eaa:	4937      	ldr	r1, [pc, #220]	; (8000f88 <HAL_GPIO_Init+0x2dc>)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb8:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000edc:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f06:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f30:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f47f aea3 	bne.w	8000cbc <HAL_GPIO_Init+0x10>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	48000800 	.word	0x48000800
 8000f94:	48000c00 	.word	0x48000c00
 8000f98:	48001000 	.word	0x48001000
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e081      	b.n	80010e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff f9dc 	bl	80003b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d107      	bne.n	800104a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	e006      	b.n	8001058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d104      	bne.n	800106a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800108c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69d9      	ldr	r1, [r3, #28]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2220      	movs	r2, #32
 80010d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b20      	cmp	r3, #32
 8001102:	d138      	bne.n	8001176 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800110e:	2302      	movs	r3, #2
 8001110:	e032      	b.n	8001178 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2224      	movs	r2, #36	; 0x24
 800111e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001140:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6819      	ldr	r1, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2220      	movs	r2, #32
 8001166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001176:	2302      	movs	r3, #2
  }
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b20      	cmp	r3, #32
 8001198:	d139      	bne.n	800120e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e033      	b.n	8001210 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2224      	movs	r2, #36	; 0x24
 80011b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2220      	movs	r2, #32
 80011fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800120e:	2302      	movs	r3, #2
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b08b      	sub	sp, #44	; 0x2c
 8001220:	af06      	add	r7, sp, #24
 8001222:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0d0      	b.n	80013d0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fb54 	bl	80008f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 f8b5 	bl	80033c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e04c      	b.n	80012fa <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	3301      	adds	r3, #1
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	b298      	uxth	r0, r3
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	3336      	adds	r3, #54	; 0x36
 800129e:	4602      	mov	r2, r0
 80012a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3303      	adds	r3, #3
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	3338      	adds	r3, #56	; 0x38
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	333c      	adds	r3, #60	; 0x3c
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	3340      	adds	r3, #64	; 0x40
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3ad      	bcc.n	8001260 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e044      	b.n	8001394 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	f203 1369 	addw	r3, r3, #361	; 0x169
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3301      	adds	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3b5      	bcc.n	800130a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	687e      	ldr	r6, [r7, #4]
 80013a6:	466d      	mov	r5, sp
 80013a8:	f106 0410 	add.w	r4, r6, #16
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	602b      	str	r3, [r5, #0]
 80013b4:	1d33      	adds	r3, r6, #4
 80013b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f002 f81e 	bl	80033fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80013de:	af00      	add	r7, sp, #0
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f001 b823 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 817d 	beq.w	800170e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001414:	4bbc      	ldr	r3, [pc, #752]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b04      	cmp	r3, #4
 800141e:	d00c      	beq.n	800143a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001420:	4bb9      	ldr	r3, [pc, #740]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b08      	cmp	r3, #8
 800142a:	d15c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x10e>
 800142c:	4bb6      	ldr	r3, [pc, #728]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d155      	bne.n	80014e6 <HAL_RCC_OscConfig+0x10e>
 800143a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800144e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	095b      	lsrs	r3, r3, #5
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <HAL_RCC_OscConfig+0x94>
 8001466:	4ba8      	ldr	r3, [pc, #672]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	e015      	b.n	8001498 <HAL_RCC_OscConfig+0xc0>
 800146c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001470:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001484:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001488:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001494:	4b9c      	ldr	r3, [pc, #624]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800149c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80014a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014a4:	fa92 f2a2 	rbit	r2, r2
 80014a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80014ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80014b0:	fab2 f282 	clz	r2, r2
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	f042 0220 	orr.w	r2, r2, #32
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f002 021f 	and.w	r2, r2, #31
 80014c0:	2101      	movs	r1, #1
 80014c2:	fa01 f202 	lsl.w	r2, r1, r2
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 811f 	beq.w	800170c <HAL_RCC_OscConfig+0x334>
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 8116 	bne.w	800170c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f000 bfaf 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x12e>
 80014f8:	4b83      	ldr	r3, [pc, #524]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a82      	ldr	r2, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e036      	b.n	8001574 <HAL_RCC_OscConfig+0x19c>
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x158>
 8001516:	4b7c      	ldr	r3, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7b      	ldr	r2, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b79      	ldr	r3, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a78      	ldr	r2, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e021      	b.n	8001574 <HAL_RCC_OscConfig+0x19c>
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x184>
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a70      	ldr	r2, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6d      	ldr	r2, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x19c>
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a69      	ldr	r2, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a66      	ldr	r2, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001574:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f023 020f 	bic.w	r2, r3, #15
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	495f      	ldr	r1, [pc, #380]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800158a:	4313      	orrs	r3, r2
 800158c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d059      	beq.n	8001652 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fa6f 	bl	8000a80 <HAL_GetTick>
 80015a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fa6a 	bl	8000a80 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b64      	cmp	r3, #100	; 0x64
 80015b6:	d902      	bls.n	80015be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f000 bf43 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
 80015be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80015d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	095b      	lsrs	r3, r3, #5
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x218>
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	e015      	b.n	800161c <HAL_RCC_OscConfig+0x244>
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800160c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001620:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001624:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001628:	fa92 f2a2 	rbit	r2, r2
 800162c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001630:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001634:	fab2 f282 	clz	r2, r2
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f002 021f 	and.w	r2, r2, #31
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ab      	beq.n	80015a8 <HAL_RCC_OscConfig+0x1d0>
 8001650:	e05d      	b.n	800170e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fa15 	bl	8000a80 <HAL_GetTick>
 8001656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fa10 	bl	8000a80 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d902      	bls.n	8001672 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	f000 bee9 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
 8001672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001676:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001686:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2cc>
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e015      	b.n	80016d0 <HAL_RCC_OscConfig+0x2f8>
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80016d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016dc:	fa92 f2a2 	rbit	r2, r2
 80016e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80016e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80016e8:	fab2 f282 	clz	r2, r2
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f002 021f 	and.w	r2, r2, #31
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ab      	bne.n	800165c <HAL_RCC_OscConfig+0x284>
 8001704:	e003      	b.n	800170e <HAL_RCC_OscConfig+0x336>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 817d 	beq.w	8001a1e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001724:	4ba6      	ldr	r3, [pc, #664]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001730:	4ba3      	ldr	r3, [pc, #652]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d172      	bne.n	8001822 <HAL_RCC_OscConfig+0x44a>
 800173c:	4ba0      	ldr	r3, [pc, #640]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d16c      	bne.n	8001822 <HAL_RCC_OscConfig+0x44a>
 8001748:	2302      	movs	r3, #2
 800174a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800175a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0x3a0>
 8001772:	4b93      	ldr	r3, [pc, #588]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e013      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c8>
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001790:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	2202      	movs	r2, #2
 80017a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017aa:	fa92 f2a2 	rbit	r2, r2
 80017ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80017b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017b6:	fab2 f282 	clz	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f042 0220 	orr.w	r2, r2, #32
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	f002 021f 	and.w	r2, r2, #31
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <HAL_RCC_OscConfig+0x410>
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f000 be2e 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	21f8      	movs	r1, #248	; 0xf8
 80017fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001806:	fa91 f1a1 	rbit	r1, r1
 800180a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800180e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001812:	fab1 f181 	clz	r1, r1
 8001816:	b2c9      	uxtb	r1, r1
 8001818:	408b      	lsls	r3, r1
 800181a:	4969      	ldr	r1, [pc, #420]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001820:	e0fd      	b.n	8001a1e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8088 	beq.w	8001944 <HAL_RCC_OscConfig+0x56c>
 8001834:	2301      	movs	r3, #1
 8001836:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001846:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	461a      	mov	r2, r3
 800185c:	2301      	movs	r3, #1
 800185e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f90e 	bl	8000a80 <HAL_GetTick>
 8001864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff f909 	bl	8000a80 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d902      	bls.n	8001880 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	f000 bde2 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001892:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4d8>
 80018aa:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0x500>
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	2202      	movs	r2, #2
 80018da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80018de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018e2:	fa92 f2a2 	rbit	r2, r2
 80018e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80018ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0af      	beq.n	800186a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	21f8      	movs	r1, #248	; 0xf8
 8001920:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001928:	fa91 f1a1 	rbit	r1, r1
 800192c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001930:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001934:	fab1 f181 	clz	r1, r1
 8001938:	b2c9      	uxtb	r1, r1
 800193a:	408b      	lsls	r3, r1
 800193c:	4920      	ldr	r1, [pc, #128]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
 8001942:	e06c      	b.n	8001a1e <HAL_RCC_OscConfig+0x646>
 8001944:	2301      	movs	r3, #1
 8001946:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001964:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff f886 	bl	8000a80 <HAL_GetTick>
 8001974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff f881 	bl	8000a80 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d902      	bls.n	8001990 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	f000 bd5a 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d104      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5ec>
 80019ba:	4b01      	ldr	r3, [pc, #4]	; (80019c0 <HAL_RCC_OscConfig+0x5e8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0x614>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80019e8:	4bc8      	ldr	r3, [pc, #800]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2202      	movs	r2, #2
 80019ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80019f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019f6:	fa92 f2a2 	rbit	r2, r2
 80019fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80019fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f042 0220 	orr.w	r2, r2, #32
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 021f 	and.w	r2, r2, #31
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ad      	bne.n	800197a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8110 	beq.w	8001c54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d079      	beq.n	8001b38 <HAL_RCC_OscConfig+0x760>
 8001a44:	2301      	movs	r3, #1
 8001a46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4bab      	ldr	r3, [pc, #684]	; (8001d10 <HAL_RCC_OscConfig+0x938>)
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f807 	bl	8000a80 <HAL_GetTick>
 8001a72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff f802 	bl	8000a80 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d902      	bls.n	8001a8e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f000 bcdb 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ae6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae8:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001af4:	2102      	movs	r1, #2
 8001af6:	6019      	str	r1, [r3, #0]
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f1a3 	rbit	r1, r3
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b0e:	6019      	str	r1, [r3, #0]
  return result;
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0a0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x6a0>
 8001b36:	e08d      	b.n	8001c54 <HAL_RCC_OscConfig+0x87c>
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b5a:	601a      	str	r2, [r3, #0]
  return result;
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x938>)
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	461a      	mov	r2, r3
 8001b76:	2300      	movs	r3, #0
 8001b78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7fe ff81 	bl	8000a80 <HAL_GetTick>
 8001b7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b84:	f7fe ff7c 	bl	8000a80 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d902      	bls.n	8001b9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	f000 bc55 	b.w	8002444 <HAL_RCC_OscConfig+0x106c>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bea:	2202      	movs	r2, #2
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c12:	2102      	movs	r1, #2
 8001c14:	6019      	str	r1, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f1a3 	rbit	r1, r3
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c2c:	6019      	str	r1, [r3, #0]
  return result;
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d197      	bne.n	8001b84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 81a1 	beq.w	8001fac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c86:	61d3      	str	r3, [r2, #28]
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ca2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_RCC_OscConfig+0x93c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d11a      	bne.n	8001cec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_RCC_OscConfig+0x93c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <HAL_RCC_OscConfig+0x93c>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fedd 	bl	8000a80 <HAL_GetTick>
 8001cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	e009      	b.n	8001ce0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ccc:	f7fe fed8 	bl	8000a80 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b64      	cmp	r3, #100	; 0x64
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e3b1      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_OscConfig+0x93c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ef      	beq.n	8001ccc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_OscConfig+0x940>
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a02      	ldr	r2, [pc, #8]	; (8001d0c <HAL_RCC_OscConfig+0x934>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e03c      	b.n	8001d84 <HAL_RCC_OscConfig+0x9ac>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	10908120 	.word	0x10908120
 8001d14:	40007000 	.word	0x40007000
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x96a>
 8001d28:	4bc1      	ldr	r3, [pc, #772]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4ac0      	ldr	r2, [pc, #768]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	4bbe      	ldr	r3, [pc, #760]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4abd      	ldr	r2, [pc, #756]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	e020      	b.n	8001d84 <HAL_RCC_OscConfig+0x9ac>
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x994>
 8001d52:	4bb7      	ldr	r3, [pc, #732]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4ab6      	ldr	r2, [pc, #728]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	4bb4      	ldr	r3, [pc, #720]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4ab3      	ldr	r2, [pc, #716]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0x9ac>
 8001d6c:	4bb0      	ldr	r3, [pc, #704]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4aaf      	ldr	r2, [pc, #700]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	4bad      	ldr	r3, [pc, #692]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4aac      	ldr	r2, [pc, #688]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001d7e:	f023 0304 	bic.w	r3, r3, #4
 8001d82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8081 	beq.w	8001e98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fe73 	bl	8000a80 <HAL_GetTick>
 8001d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe fe6e 	bl	8000a80 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e345      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001de4:	2202      	movs	r2, #2
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0xa4c>
 8001e1e:	4b84      	ldr	r3, [pc, #528]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0xa74>
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4b79      	ldr	r3, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e54:	2102      	movs	r1, #2
 8001e56:	6011      	str	r1, [r2, #0]
 8001e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	fa92 f1a2 	rbit	r1, r2
 8001e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e6e:	6011      	str	r1, [r2, #0]
  return result;
 8001e70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d084      	beq.n	8001da0 <HAL_RCC_OscConfig+0x9c8>
 8001e96:	e07f      	b.n	8001f98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7fe fdf2 	bl	8000a80 <HAL_GetTick>
 8001e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fded 	bl	8000a80 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e2c4      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f00:	601a      	str	r2, [r3, #0]
  return result;
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0xb4e>
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	e013      	b.n	8001f4e <HAL_RCC_OscConfig+0xb76>
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f2e:	2202      	movs	r2, #2
 8001f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f56:	2102      	movs	r1, #2
 8001f58:	6011      	str	r1, [r2, #0]
 8001f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fa92 f1a2 	rbit	r1, r2
 8001f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f70:	6011      	str	r1, [r2, #0]
  return result;
 8001f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f002 021f 	and.w	r2, r2, #31
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d184      	bne.n	8001ea2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001faa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8242 	beq.w	8002442 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_RCC_OscConfig+0xc58>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	f000 8213 	beq.w	80023f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	f040 8162 	bne.w	80022a2 <HAL_RCC_OscConfig+0xeca>
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fe6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002002:	601a      	str	r2, [r3, #0]
  return result;
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800200c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	461a      	mov	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fd2c 	bl	8000a80 <HAL_GetTick>
 8002028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	e00c      	b.n	8002048 <HAL_RCC_OscConfig+0xc70>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fd24 	bl	8000a80 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1fd      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800206c:	601a      	str	r2, [r3, #0]
  return result;
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002076:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0xcba>
 800208c:	4bb0      	ldr	r3, [pc, #704]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	e027      	b.n	80020e2 <HAL_RCC_OscConfig+0xd0a>
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800209a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	4b9c      	ldr	r3, [pc, #624]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020ee:	6011      	str	r1, [r2, #0]
 80020f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	fa92 f1a2 	rbit	r1, r2
 80020fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002102:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002106:	6011      	str	r1, [r2, #0]
  return result;
 8002108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800210c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	fab2 f282 	clz	r2, r2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 021f 	and.w	r2, r2, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d182      	bne.n	8002034 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	430b      	orrs	r3, r1
 8002150:	497f      	ldr	r1, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800215e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f2a3 	rbit	r2, r3
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800217a:	601a      	str	r2, [r3, #0]
  return result;
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002184:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002190:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	461a      	mov	r2, r3
 8002198:	2301      	movs	r3, #1
 800219a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fc70 	bl	8000a80 <HAL_GetTick>
 80021a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a4:	e009      	b.n	80021ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fc6b 	bl	8000a80 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e144      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021de:	601a      	str	r2, [r3, #0]
  return result;
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_OscConfig+0xe2c>
 80021fe:	4b54      	ldr	r3, [pc, #336]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	e027      	b.n	8002254 <HAL_RCC_OscConfig+0xe7c>
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800220c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002258:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800225c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002260:	6011      	str	r1, [r2, #0]
 8002262:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002266:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	fa92 f1a2 	rbit	r1, r2
 8002270:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002274:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002278:	6011      	str	r1, [r2, #0]
  return result;
 800227a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800227e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	fab2 f282 	clz	r2, r2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f002 021f 	and.w	r2, r2, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f202 	lsl.w	r2, r1, r2
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d082      	beq.n	80021a6 <HAL_RCC_OscConfig+0xdce>
 80022a0:	e0cf      	b.n	8002442 <HAL_RCC_OscConfig+0x106a>
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022c6:	601a      	str	r2, [r3, #0]
  return result;
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	461a      	mov	r2, r3
 80022e4:	2300      	movs	r3, #0
 80022e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fbca 	bl	8000a80 <HAL_GetTick>
 80022ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	e009      	b.n	8002306 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe fbc5 	bl	8000a80 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e09e      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800230e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800232a:	601a      	str	r2, [r3, #0]
  return result;
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002334:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d104      	bne.n	8002354 <HAL_RCC_OscConfig+0xf7c>
 800234a:	4b01      	ldr	r3, [pc, #4]	; (8002350 <HAL_RCC_OscConfig+0xf78>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	e029      	b.n	80023a4 <HAL_RCC_OscConfig+0xfcc>
 8002350:	40021000 	.word	0x40021000
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800235c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x1078>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023b0:	6011      	str	r1, [r2, #0]
 80023b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fa92 f1a2 	rbit	r1, r2
 80023c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023c8:	6011      	str	r1, [r2, #0]
  return result;
 80023ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d180      	bne.n	80022f2 <HAL_RCC_OscConfig+0xf1a>
 80023f0:	e027      	b.n	8002442 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e01e      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_OscConfig+0x1078>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800240e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002412:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	429a      	cmp	r2, r3
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002426:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800242a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b09e      	sub	sp, #120	; 0x78
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e162      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b90      	ldr	r3, [pc, #576]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	498b      	ldr	r1, [pc, #556]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e14a      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	497f      	ldr	r1, [pc, #508]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80dc 	beq.w	8002680 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d13c      	bne.n	800254a <HAL_RCC_ClockConfig+0xf6>
 80024d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_ClockConfig+0xa6>
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	e00f      	b.n	800251a <HAL_RCC_ClockConfig+0xc6>
 80024fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	667b      	str	r3, [r7, #100]	; 0x64
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
 800250e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d17b      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0f3      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d13c      	bne.n	80025cc <HAL_RCC_ClockConfig+0x178>
 8002552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d102      	bne.n	800257c <HAL_RCC_ClockConfig+0x128>
 8002576:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	e00f      	b.n	800259c <HAL_RCC_ClockConfig+0x148>
 800257c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
 800258a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
 8002590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80025a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d13a      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b2      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
 80025cc:	2302      	movs	r3, #2
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x1a0>
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e00d      	b.n	8002610 <HAL_RCC_ClockConfig+0x1bc>
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	61ba      	str	r2, [r7, #24]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	fa92 f2a2 	rbit	r2, r2
 800261a:	617a      	str	r2, [r7, #20]
  return result;
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f042 0220 	orr.w	r2, r2, #32
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f002 021f 	and.w	r2, r2, #31
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e079      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	491a      	ldr	r1, [pc, #104]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe fa16 	bl	8000a80 <HAL_GetTick>
 8002654:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fa12 	bl	8000a80 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e061      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d214      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e040      	b.n	8002732 <HAL_RCC_ClockConfig+0x2de>
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	491a      	ldr	r1, [pc, #104]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4912      	ldr	r1, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026f6:	f000 f829 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80026fa:	4601      	mov	r1, r0
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_RCC_ClockConfig+0x2e8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002704:	22f0      	movs	r2, #240	; 0xf0
 8002706:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	fa92 f2a2 	rbit	r2, r2
 800270e:	60fa      	str	r2, [r7, #12]
  return result;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	40d3      	lsrs	r3, r2
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x2ec>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	fa21 f303 	lsr.w	r3, r1, r3
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_RCC_ClockConfig+0x2f0>)
 8002724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_RCC_ClockConfig+0x2f4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe f964 	bl	80009f8 <HAL_InitTick>
  
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3778      	adds	r7, #120	; 0x78
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	08006ad0 	.word	0x08006ad0
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b08b      	sub	sp, #44	; 0x2c
 8002750:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x30>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x36>
 800277a:	e03c      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_GetSysClockFreq+0xc4>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	e03c      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002788:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800278c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	fa92 f2a2 	rbit	r2, r2
 8002794:	607a      	str	r2, [r7, #4]
  return result;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	40d3      	lsrs	r3, r2
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	220f      	movs	r2, #15
 80027b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	fa92 f2a2 	rbit	r2, r2
 80027b8:	60fa      	str	r2, [r7, #12]
  return result;
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	40d3      	lsrs	r3, r2
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	e004      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_RCC_GetSysClockFreq+0xd0>)
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	623b      	str	r3, [r7, #32]
      break;
 80027f4:	e002      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027f8:	623b      	str	r3, [r7, #32]
      break;
 80027fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fc:	6a3b      	ldr	r3, [r7, #32]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	372c      	adds	r7, #44	; 0x2c
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	007a1200 	.word	0x007a1200
 8002814:	08006ae0 	.word	0x08006ae0
 8002818:	08006af0 	.word	0x08006af0
 800281c:	003d0900 	.word	0x003d0900

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b092      	sub	sp, #72	; 0x48
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80d4 	beq.w	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002844:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10e      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	61d3      	str	r3, [r2, #28]
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b45      	ldr	r3, [pc, #276]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a41      	ldr	r2, [pc, #260]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fe f8fb 	bl	8000a80 <HAL_GetTick>
 800288a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe f8f7 	bl	8000a80 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e169      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ac:	4b34      	ldr	r3, [pc, #208]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8084 	beq.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d07c      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	461a      	mov	r2, r3
 80028f6:	2301      	movs	r3, #1
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	461a      	mov	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800291e:	4a18      	ldr	r2, [pc, #96]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002922:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d04b      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe f8a7 	bl	8000a80 <HAL_GetTick>
 8002932:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe f8a3 	bl	8000a80 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e113      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800294c:	2302      	movs	r3, #2
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	2302      	movs	r3, #2
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	61fb      	str	r3, [r7, #28]
  return result;
 8002964:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d108      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800297a:	4b01      	ldr	r3, [pc, #4]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	e00d      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	10908100 	.word	0x10908100
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	613a      	str	r2, [r7, #16]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	60fa      	str	r2, [r7, #12]
  return result;
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0b7      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	496a      	ldr	r1, [pc, #424]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f8:	4b60      	ldr	r3, [pc, #384]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f023 0203 	bic.w	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	495d      	ldr	r1, [pc, #372]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4956      	ldr	r1, [pc, #344]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	494e      	ldr	r1, [pc, #312]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f023 0210 	bic.w	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4947      	ldr	r1, [pc, #284]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a70:	4b42      	ldr	r3, [pc, #264]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	493f      	ldr	r1, [pc, #252]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f023 0220 	bic.w	r2, r3, #32
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4938      	ldr	r1, [pc, #224]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	4930      	ldr	r1, [pc, #192]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4929      	ldr	r1, [pc, #164]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4921      	ldr	r1, [pc, #132]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	491a      	ldr	r1, [pc, #104]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	4912      	ldr	r1, [pc, #72]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	490b      	ldr	r1, [pc, #44]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3748      	adds	r7, #72	; 0x48
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e09d      	b.n	8002cce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d009      	beq.n	8002bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fda6 	bl	8000724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf8:	d902      	bls.n	8002c00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e002      	b.n	8002c06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c0e:	d007      	beq.n	8002c20 <HAL_SPI_Init+0xa0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c18:	d002      	beq.n	8002c20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	f003 0204 	and.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x26>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e1fb      	b.n	80030f4 <HAL_SPI_TransmitReceive+0x41e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d04:	f7fd febc 	bl	8000a80 <HAL_GetTick>
 8002d08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d20:	7efb      	ldrb	r3, [r7, #27]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d00e      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x6e>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2c:	d106      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x66>
 8002d36:	7efb      	ldrb	r3, [r7, #27]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d003      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d42:	e1cd      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_SPI_TransmitReceive+0x80>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_TransmitReceive+0x80>
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d5c:	e1c0      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d003      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002db4:	d802      	bhi.n	8002dbc <HAL_SPI_TransmitReceive+0xe6>
 8002db6:	8a3b      	ldrh	r3, [r7, #16]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d908      	bls.n	8002dce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	e007      	b.n	8002dde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ddc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d007      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e04:	d97c      	bls.n	8002f00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x13e>
 8002e0e:	8a7b      	ldrh	r3, [r7, #18]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d169      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	1c9a      	adds	r2, r3, #2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e38:	e056      	b.n	8002ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d11b      	bne.n	8002e80 <HAL_SPI_TransmitReceive+0x1aa>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x1aa>
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d113      	bne.n	8002e80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x1f2>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ec8:	f7fd fdda 	bl	8000a80 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_SPI_TransmitReceive+0x212>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ede:	d003      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ee6:	e0fb      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1a3      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x164>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d19d      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x164>
 8002efe:	e0df      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x23a>
 8002f08:	8a7b      	ldrh	r3, [r7, #18]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f040 80cb 	bne.w	80030a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d912      	bls.n	8002f40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	1c9a      	adds	r2, r3, #2
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b02      	subs	r3, #2
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f3e:	e0b2      	b.n	80030a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f66:	e09e      	b.n	80030a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d134      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x30a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02f      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x30a>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d12c      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d912      	bls.n	8002fb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b02      	subs	r3, #2
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb4:	e012      	b.n	8002fdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d148      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x3aa>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d042      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d923      	bls.n	800304e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	b292      	uxth	r2, r2
 8003012:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b02      	subs	r3, #2
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d81f      	bhi.n	800307c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	e016      	b.n	800307c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f103 020c 	add.w	r2, r3, #12
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800307c:	2301      	movs	r3, #1
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003080:	f7fd fcfe 	bl	8000a80 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308c:	429a      	cmp	r2, r3
 800308e:	d803      	bhi.n	8003098 <HAL_SPI_TransmitReceive+0x3c2>
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003096:	d102      	bne.n	800309e <HAL_SPI_TransmitReceive+0x3c8>
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030a4:	e01c      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f47f af5b 	bne.w	8002f68 <HAL_SPI_TransmitReceive+0x292>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f47f af54 	bne.w	8002f68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f937 	bl	8003338 <SPI_EndRxTxTransaction>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
 80030dc:	e000      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80030de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800310c:	f7fd fcb8 	bl	8000a80 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	4413      	add	r3, r2
 800311a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800311c:	f7fd fcb0 	bl	8000a80 <HAL_GetTick>
 8003120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	015b      	lsls	r3, r3, #5
 8003128:	0d1b      	lsrs	r3, r3, #20
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003132:	e054      	b.n	80031de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313a:	d050      	beq.n	80031de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800313c:	f7fd fca0 	bl	8000a80 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	429a      	cmp	r2, r3
 800314a:	d902      	bls.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d13d      	bne.n	80031ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316a:	d111      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003174:	d004      	beq.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d107      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003198:	d10f      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e017      	b.n	80031fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3b01      	subs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4013      	ands	r3, r2
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d19b      	bne.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000000 	.word	0x20000000

0800320c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800321e:	f7fd fc2f 	bl	8000a80 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4413      	add	r3, r2
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800322e:	f7fd fc27 	bl	8000a80 <HAL_GetTick>
 8003232:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800323c:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00da      	lsls	r2, r3, #3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	0d1b      	lsrs	r3, r3, #20
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003254:	e060      	b.n	8003318 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800325c:	d107      	bne.n	800326e <SPI_WaitFifoStateUntilTimeout+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800326c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003274:	d050      	beq.n	8003318 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003276:	f7fd fc03 	bl	8000a80 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	429a      	cmp	r2, r3
 8003284:	d902      	bls.n	800328c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d13d      	bne.n	8003308 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800329a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a4:	d111      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ae:	d004      	beq.n	80032ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d107      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d2:	d10f      	bne.n	80032f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e010      	b.n	800332a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	3b01      	subs	r3, #1
 8003316:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	d196      	bne.n	8003256 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000000 	.word	0x20000000

08003338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff5b 	bl	800320c <SPI_WaitFifoStateUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e027      	b.n	80033bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7ff fec0 	bl	80030fc <SPI_WaitFlagStateUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e014      	b.n	80033bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff ff34 	bl	800320c <SPI_WaitFifoStateUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e000      	b.n	80033bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80033d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4013      	ands	r3, r2
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033fa:	b084      	sub	sp, #16
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	f107 0014 	add.w	r0, r7, #20
 8003408:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	b004      	add	sp, #16
 800343a:	4770      	bx	lr

0800343c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <MX_FATFS_Init+0x18>)
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <MX_FATFS_Init+0x1c>)
 8003444:	f003 fa44 	bl	80068d0 <FATFS_LinkDriver>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <MX_FATFS_Init+0x20>)
 800344e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200003e4 	.word	0x200003e4
 8003458:	2000000c 	.word	0x2000000c
 800345c:	200003e0 	.word	0x200003e0

08003460 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003464:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED this line from tutorial
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f9d9 	bl	8003834 <USER_SPI_initialize>
 8003482:	4603      	mov	r3, r0
// Commented out code below since it wasnt in the tutorial
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fab7 	bl	8003a0c <USER_SPI_status>
 800349e:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80034b8:	7bf8      	ldrb	r0, [r7, #15]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	f000 faba 	bl	8003a38 <USER_SPI_read>
 80034c4:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4603      	mov	r3, r0
 80034dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80034de:	7bf8      	ldrb	r0, [r7, #15]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	f000 fb0d 	bl	8003b04 <USER_SPI_write>
 80034ea:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	603a      	str	r2, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
 8003500:	460b      	mov	r3, r1
 8003502:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8003504:	79b9      	ldrb	r1, [r7, #6]
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fb76 	bl	8003bfc <USER_SPI_ioctl>
 8003510:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003524:	f7fd faac 	bl	8000a80 <HAL_GetTick>
 8003528:	4603      	mov	r3, r0
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <SPI_Timer_On+0x20>)
 800352c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800352e:	4a04      	ldr	r2, [pc, #16]	; (8003540 <SPI_Timer_On+0x24>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	200003ec 	.word	0x200003ec
 8003540:	200003f0 	.word	0x200003f0

08003544 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003548:	f7fd fa9a 	bl	8000a80 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <SPI_Timer_Status+0x24>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SPI_Timer_Status+0x28>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	bf34      	ite	cc
 800355c:	2301      	movcc	r3, #1
 800355e:	2300      	movcs	r3, #0
 8003560:	b2db      	uxtb	r3, r3
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200003ec 	.word	0x200003ec
 800356c:	200003f0 	.word	0x200003f0

08003570 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 800357a:	f107 020f 	add.w	r2, r7, #15
 800357e:	1df9      	adds	r1, r7, #7
 8003580:	2332      	movs	r3, #50	; 0x32
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2301      	movs	r3, #1
 8003586:	4804      	ldr	r0, [pc, #16]	; (8003598 <xchg_spi+0x28>)
 8003588:	f7ff fba5 	bl	8002cd6 <HAL_SPI_TransmitReceive>
    return rxDat;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000008c 	.word	0x2000008c

0800359c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e00a      	b.n	80035c2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	18d4      	adds	r4, r2, r3
 80035b2:	20ff      	movs	r0, #255	; 0xff
 80035b4:	f7ff ffdc 	bl	8003570 <xchg_spi>
 80035b8:	4603      	mov	r3, r0
 80035ba:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d3f0      	bcc.n	80035ac <rcvr_spi_multi+0x10>
	}
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e009      	b.n	80035f8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ffbf 	bl	8003570 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3f1      	bcc.n	80035e4 <xmit_spi_multi+0x10>
	}
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003612:	f7fd fa35 	bl	8000a80 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800361c:	20ff      	movs	r0, #255	; 0xff
 800361e:	f7ff ffa7 	bl	8003570 <xchg_spi>
 8003622:	4603      	mov	r3, r0
 8003624:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2bff      	cmp	r3, #255	; 0xff
 800362a:	d007      	beq.n	800363c <wait_ready+0x32>
 800362c:	f7fd fa28 	bl	8000a80 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d8ef      	bhi.n	800361c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2bff      	cmp	r3, #255	; 0xff
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003654:	2201      	movs	r2, #1
 8003656:	2102      	movs	r1, #2
 8003658:	4803      	ldr	r0, [pc, #12]	; (8003668 <despiselect+0x18>)
 800365a:	f7fd fca1 	bl	8000fa0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800365e:	20ff      	movs	r0, #255	; 0xff
 8003660:	f7ff ff86 	bl	8003570 <xchg_spi>

}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	48000800 	.word	0x48000800

0800366c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003670:	2200      	movs	r2, #0
 8003672:	2102      	movs	r1, #2
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <spiselect+0x30>)
 8003676:	f7fd fc93 	bl	8000fa0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800367a:	20ff      	movs	r0, #255	; 0xff
 800367c:	f7ff ff78 	bl	8003570 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003684:	f7ff ffc1 	bl	800360a <wait_ready>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <spiselect+0x26>
 800368e:	2301      	movs	r3, #1
 8003690:	e002      	b.n	8003698 <spiselect+0x2c>

	despiselect();
 8003692:	f7ff ffdd 	bl	8003650 <despiselect>
	return 0;	/* Timeout */
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	48000800 	.word	0x48000800

080036a0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80036aa:	20c8      	movs	r0, #200	; 0xc8
 80036ac:	f7ff ff36 	bl	800351c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80036b0:	20ff      	movs	r0, #255	; 0xff
 80036b2:	f7ff ff5d 	bl	8003570 <xchg_spi>
 80036b6:	4603      	mov	r3, r0
 80036b8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2bff      	cmp	r3, #255	; 0xff
 80036be:	d104      	bne.n	80036ca <rcvr_datablock+0x2a>
 80036c0:	f7ff ff40 	bl	8003544 <SPI_Timer_Status>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f2      	bne.n	80036b0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2bfe      	cmp	r3, #254	; 0xfe
 80036ce:	d001      	beq.n	80036d4 <rcvr_datablock+0x34>
 80036d0:	2300      	movs	r3, #0
 80036d2:	e00a      	b.n	80036ea <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff ff60 	bl	800359c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80036dc:	20ff      	movs	r0, #255	; 0xff
 80036de:	f7ff ff47 	bl	8003570 <xchg_spi>
 80036e2:	20ff      	movs	r0, #255	; 0xff
 80036e4:	f7ff ff44 	bl	8003570 <xchg_spi>

	return 1;						/* Function succeeded */
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80036fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003702:	f7ff ff82 	bl	800360a <wait_ready>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <xmit_datablock+0x1e>
 800370c:	2300      	movs	r3, #0
 800370e:	e01e      	b.n	800374e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff2c 	bl	8003570 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	2bfd      	cmp	r3, #253	; 0xfd
 800371c:	d016      	beq.n	800374c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800371e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ff56 	bl	80035d4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003728:	20ff      	movs	r0, #255	; 0xff
 800372a:	f7ff ff21 	bl	8003570 <xchg_spi>
 800372e:	20ff      	movs	r0, #255	; 0xff
 8003730:	f7ff ff1e 	bl	8003570 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003734:	20ff      	movs	r0, #255	; 0xff
 8003736:	f7ff ff1b 	bl	8003570 <xchg_spi>
 800373a:	4603      	mov	r3, r0
 800373c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2b05      	cmp	r3, #5
 8003746:	d001      	beq.n	800374c <xmit_datablock+0x5a>
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <xmit_datablock+0x5c>
	}
	return 1;
 800374c:	2301      	movs	r3, #1
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	6039      	str	r1, [r7, #0]
 8003760:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	da0e      	bge.n	8003788 <send_cmd+0x32>
		cmd &= 0x7F;
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003770:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003772:	2100      	movs	r1, #0
 8003774:	2037      	movs	r0, #55	; 0x37
 8003776:	f7ff ffee 	bl	8003756 <send_cmd>
 800377a:	4603      	mov	r3, r0
 800377c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800377e:	7bbb      	ldrb	r3, [r7, #14]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d901      	bls.n	8003788 <send_cmd+0x32>
 8003784:	7bbb      	ldrb	r3, [r7, #14]
 8003786:	e051      	b.n	800382c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d008      	beq.n	80037a0 <send_cmd+0x4a>
		despiselect();
 800378e:	f7ff ff5f 	bl	8003650 <despiselect>
		if (!spiselect()) return 0xFF;
 8003792:	f7ff ff6b 	bl	800366c <spiselect>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <send_cmd+0x4a>
 800379c:	23ff      	movs	r3, #255	; 0xff
 800379e:	e045      	b.n	800382c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fee1 	bl	8003570 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	0e1b      	lsrs	r3, r3, #24
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fedb 	bl	8003570 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fed5 	bl	8003570 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fecf 	bl	8003570 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff feca 	bl	8003570 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <send_cmd+0x94>
 80037e6:	2395      	movs	r3, #149	; 0x95
 80037e8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d101      	bne.n	80037f4 <send_cmd+0x9e>
 80037f0:	2387      	movs	r3, #135	; 0x87
 80037f2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff feba 	bl	8003570 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d102      	bne.n	8003808 <send_cmd+0xb2>
 8003802:	20ff      	movs	r0, #255	; 0xff
 8003804:	f7ff feb4 	bl	8003570 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003808:	230a      	movs	r3, #10
 800380a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800380c:	20ff      	movs	r0, #255	; 0xff
 800380e:	f7ff feaf 	bl	8003570 <xchg_spi>
 8003812:	4603      	mov	r3, r0
 8003814:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da05      	bge.n	800382a <send_cmd+0xd4>
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	3b01      	subs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <send_cmd+0xb6>

	return res;							/* Return received response */
 800382a:	7bbb      	ldrb	r3, [r7, #14]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <USER_SPI_initialize+0x14>
 8003844:	2301      	movs	r3, #1
 8003846:	e0d6      	b.n	80039f6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003848:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <USER_SPI_initialize+0x1cc>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <USER_SPI_initialize+0x2a>
 8003856:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <USER_SPI_initialize+0x1cc>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	e0cb      	b.n	80039f6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800385e:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <USER_SPI_initialize+0x1d0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003868:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <USER_SPI_initialize+0x1d0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003870:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003872:	230a      	movs	r3, #10
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	e005      	b.n	8003884 <USER_SPI_initialize+0x50>
 8003878:	20ff      	movs	r0, #255	; 0xff
 800387a:	f7ff fe79 	bl	8003570 <xchg_spi>
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3b01      	subs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f6      	bne.n	8003878 <USER_SPI_initialize+0x44>

	ty = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800388e:	2100      	movs	r1, #0
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff ff60 	bl	8003756 <send_cmd>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 808b 	bne.w	80039b4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800389e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038a2:	f7ff fe3b 	bl	800351c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80038a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80038aa:	2008      	movs	r0, #8
 80038ac:	f7ff ff53 	bl	8003756 <send_cmd>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d151      	bne.n	800395a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e00d      	b.n	80038d8 <USER_SPI_initialize+0xa4>
 80038bc:	7bfc      	ldrb	r4, [r7, #15]
 80038be:	20ff      	movs	r0, #255	; 0xff
 80038c0:	f7ff fe56 	bl	8003570 <xchg_spi>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	f104 0310 	add.w	r3, r4, #16
 80038cc:	443b      	add	r3, r7
 80038ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	3301      	adds	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d9ee      	bls.n	80038bc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80038de:	7abb      	ldrb	r3, [r7, #10]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d167      	bne.n	80039b4 <USER_SPI_initialize+0x180>
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	2baa      	cmp	r3, #170	; 0xaa
 80038e8:	d164      	bne.n	80039b4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80038ea:	bf00      	nop
 80038ec:	f7ff fe2a 	bl	8003544 <SPI_Timer_Status>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <USER_SPI_initialize+0xd2>
 80038f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038fa:	20a9      	movs	r0, #169	; 0xa9
 80038fc:	f7ff ff2b 	bl	8003756 <send_cmd>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f2      	bne.n	80038ec <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003906:	f7ff fe1d 	bl	8003544 <SPI_Timer_Status>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d051      	beq.n	80039b4 <USER_SPI_initialize+0x180>
 8003910:	2100      	movs	r1, #0
 8003912:	203a      	movs	r0, #58	; 0x3a
 8003914:	f7ff ff1f 	bl	8003756 <send_cmd>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d14a      	bne.n	80039b4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	e00d      	b.n	8003940 <USER_SPI_initialize+0x10c>
 8003924:	7bfc      	ldrb	r4, [r7, #15]
 8003926:	20ff      	movs	r0, #255	; 0xff
 8003928:	f7ff fe22 	bl	8003570 <xchg_spi>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	f104 0310 	add.w	r3, r4, #16
 8003934:	443b      	add	r3, r7
 8003936:	f803 2c08 	strb.w	r2, [r3, #-8]
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	3301      	adds	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d9ee      	bls.n	8003924 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003946:	7a3b      	ldrb	r3, [r7, #8]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <USER_SPI_initialize+0x120>
 8003950:	230c      	movs	r3, #12
 8003952:	e000      	b.n	8003956 <USER_SPI_initialize+0x122>
 8003954:	2304      	movs	r3, #4
 8003956:	737b      	strb	r3, [r7, #13]
 8003958:	e02c      	b.n	80039b4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800395a:	2100      	movs	r1, #0
 800395c:	20a9      	movs	r0, #169	; 0xa9
 800395e:	f7ff fefa 	bl	8003756 <send_cmd>
 8003962:	4603      	mov	r3, r0
 8003964:	2b01      	cmp	r3, #1
 8003966:	d804      	bhi.n	8003972 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003968:	2302      	movs	r3, #2
 800396a:	737b      	strb	r3, [r7, #13]
 800396c:	23a9      	movs	r3, #169	; 0xa9
 800396e:	73bb      	strb	r3, [r7, #14]
 8003970:	e003      	b.n	800397a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003972:	2301      	movs	r3, #1
 8003974:	737b      	strb	r3, [r7, #13]
 8003976:	2301      	movs	r3, #1
 8003978:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800397a:	bf00      	nop
 800397c:	f7ff fde2 	bl	8003544 <SPI_Timer_Status>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <USER_SPI_initialize+0x162>
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fee3 	bl	8003756 <send_cmd>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f2      	bne.n	800397c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003996:	f7ff fdd5 	bl	8003544 <SPI_Timer_Status>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <USER_SPI_initialize+0x17c>
 80039a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039a4:	2010      	movs	r0, #16
 80039a6:	f7ff fed6 	bl	8003756 <send_cmd>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <USER_SPI_initialize+0x180>
				ty = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <USER_SPI_initialize+0x1d4>)
 80039b6:	7b7b      	ldrb	r3, [r7, #13]
 80039b8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80039ba:	f7ff fe49 	bl	8003650 <despiselect>

	if (ty) {			/* OK */
 80039be:	7b7b      	ldrb	r3, [r7, #13]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <USER_SPI_initialize+0x1d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <USER_SPI_initialize+0x1d0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0210 	orr.w	r2, r2, #16
 80039d6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <USER_SPI_initialize+0x1cc>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <USER_SPI_initialize+0x1cc>)
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e002      	b.n	80039f0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <USER_SPI_initialize+0x1cc>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <USER_SPI_initialize+0x1cc>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000020 	.word	0x20000020
 8003a04:	2000008c 	.word	0x2000008c
 8003a08:	200003e8 	.word	0x200003e8

08003a0c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <USER_SPI_status+0x14>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e002      	b.n	8003a26 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <USER_SPI_status+0x28>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000020 	.word	0x20000020

08003a38 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <USER_SPI_read+0x1c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <USER_SPI_read+0x20>
 8003a54:	2304      	movs	r3, #4
 8003a56:	e04d      	b.n	8003af4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <USER_SPI_read+0xc4>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <USER_SPI_read+0x32>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e044      	b.n	8003af4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003a6a:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <USER_SPI_read+0xc8>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <USER_SPI_read+0x44>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	025b      	lsls	r3, r3, #9
 8003a7a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d111      	bne.n	8003aa6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	2011      	movs	r0, #17
 8003a86:	f7ff fe66 	bl	8003756 <send_cmd>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d129      	bne.n	8003ae4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a94:	68b8      	ldr	r0, [r7, #8]
 8003a96:	f7ff fe03 	bl	80036a0 <rcvr_datablock>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d021      	beq.n	8003ae4 <USER_SPI_read+0xac>
			count = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	e01e      	b.n	8003ae4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	2012      	movs	r0, #18
 8003aaa:	f7ff fe54 	bl	8003756 <send_cmd>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d117      	bne.n	8003ae4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f7ff fdf1 	bl	80036a0 <rcvr_datablock>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <USER_SPI_read+0xa2>
				buff += 512;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003aca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ed      	bne.n	8003ab4 <USER_SPI_read+0x7c>
 8003ad8:	e000      	b.n	8003adc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003ada:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003adc:	2100      	movs	r1, #0
 8003ade:	200c      	movs	r0, #12
 8003ae0:	f7ff fe39 	bl	8003756 <send_cmd>
		}
	}
	despiselect();
 8003ae4:	f7ff fdb4 	bl	8003650 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000020 	.word	0x20000020
 8003b00:	200003e8 	.word	0x200003e8

08003b04 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <USER_SPI_write+0x1c>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <USER_SPI_write+0x20>
 8003b20:	2304      	movs	r3, #4
 8003b22:	e063      	b.n	8003bec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003b24:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <USER_SPI_write+0xf0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <USER_SPI_write+0x32>
 8003b32:	2303      	movs	r3, #3
 8003b34:	e05a      	b.n	8003bec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <USER_SPI_write+0xf0>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <USER_SPI_write+0x44>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e051      	b.n	8003bec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <USER_SPI_write+0xf4>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <USER_SPI_write+0x56>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	025b      	lsls	r3, r3, #9
 8003b58:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d110      	bne.n	8003b82 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	2018      	movs	r0, #24
 8003b64:	f7ff fdf7 	bl	8003756 <send_cmd>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d136      	bne.n	8003bdc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003b6e:	21fe      	movs	r1, #254	; 0xfe
 8003b70:	68b8      	ldr	r0, [r7, #8]
 8003b72:	f7ff fdbe 	bl	80036f2 <xmit_datablock>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02f      	beq.n	8003bdc <USER_SPI_write+0xd8>
			count = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	e02c      	b.n	8003bdc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <USER_SPI_write+0xf4>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <USER_SPI_write+0x92>
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	2097      	movs	r0, #151	; 0x97
 8003b92:	f7ff fde0 	bl	8003756 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	2019      	movs	r0, #25
 8003b9a:	f7ff fddc 	bl	8003756 <send_cmd>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11b      	bne.n	8003bdc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003ba4:	21fc      	movs	r1, #252	; 0xfc
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f7ff fda3 	bl	80036f2 <xmit_datablock>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <USER_SPI_write+0xc4>
				buff += 512;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003bb8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ee      	bne.n	8003ba4 <USER_SPI_write+0xa0>
 8003bc6:	e000      	b.n	8003bca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003bc8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003bca:	21fd      	movs	r1, #253	; 0xfd
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f7ff fd90 	bl	80036f2 <xmit_datablock>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <USER_SPI_write+0xd8>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003bdc:	f7ff fd38 	bl	8003650 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000020 	.word	0x20000020
 8003bf8:	200003e8 	.word	0x200003e8

08003bfc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	603a      	str	r2, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <USER_SPI_ioctl+0x1a>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e15a      	b.n	8003ecc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003c16:	4baf      	ldr	r3, [pc, #700]	; (8003ed4 <USER_SPI_ioctl+0x2d8>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <USER_SPI_ioctl+0x2c>
 8003c24:	2303      	movs	r3, #3
 8003c26:	e151      	b.n	8003ecc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003c2e:	79bb      	ldrb	r3, [r7, #6]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	f200 8136 	bhi.w	8003ea2 <USER_SPI_ioctl+0x2a6>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <USER_SPI_ioctl+0x40>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c51 	.word	0x08003c51
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003ea3 	.word	0x08003ea3
 8003c48:	08003d11 	.word	0x08003d11
 8003c4c:	08003e07 	.word	0x08003e07
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003c50:	f7ff fd0c 	bl	800366c <spiselect>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8127 	beq.w	8003eaa <USER_SPI_ioctl+0x2ae>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003c62:	e122      	b.n	8003eaa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003c64:	2100      	movs	r1, #0
 8003c66:	2009      	movs	r0, #9
 8003c68:	f7ff fd75 	bl	8003756 <send_cmd>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 811d 	bne.w	8003eae <USER_SPI_ioctl+0x2b2>
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	2110      	movs	r1, #16
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fd10 	bl	80036a0 <rcvr_datablock>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8113 	beq.w	8003eae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003c88:	7b3b      	ldrb	r3, [r7, #12]
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d111      	bne.n	8003cb6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003c92:	7d7b      	ldrb	r3, [r7, #21]
 8003c94:	461a      	mov	r2, r3
 8003c96:	7d3b      	ldrb	r3, [r7, #20]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	4413      	add	r3, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	029a      	lsls	r2, r3, #10
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e028      	b.n	8003d08 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003cb6:	7c7b      	ldrb	r3, [r7, #17]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	7dbb      	ldrb	r3, [r7, #22]
 8003cc0:	09db      	lsrs	r3, r3, #7
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	7d7b      	ldrb	r3, [r7, #21]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 0306 	and.w	r3, r3, #6
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003cde:	7d3b      	ldrb	r3, [r7, #20]
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	441a      	add	r2, r3
 8003cec:	7cbb      	ldrb	r3, [r7, #18]
 8003cee:	029b      	lsls	r3, r3, #10
 8003cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003cfa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cfe:	3b09      	subs	r3, #9
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	409a      	lsls	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003d0e:	e0ce      	b.n	8003eae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003d10:	4b71      	ldr	r3, [pc, #452]	; (8003ed8 <USER_SPI_ioctl+0x2dc>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d031      	beq.n	8003d80 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	208d      	movs	r0, #141	; 0x8d
 8003d20:	f7ff fd19 	bl	8003756 <send_cmd>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 80c3 	bne.w	8003eb2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003d2c:	20ff      	movs	r0, #255	; 0xff
 8003d2e:	f7ff fc1f 	bl	8003570 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003d32:	f107 030c 	add.w	r3, r7, #12
 8003d36:	2110      	movs	r1, #16
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fcb1 	bl	80036a0 <rcvr_datablock>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80b6 	beq.w	8003eb2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003d46:	2330      	movs	r3, #48	; 0x30
 8003d48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d4c:	e007      	b.n	8003d5e <USER_SPI_ioctl+0x162>
 8003d4e:	20ff      	movs	r0, #255	; 0xff
 8003d50:	f7ff fc0e 	bl	8003570 <xchg_spi>
 8003d54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f3      	bne.n	8003d4e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003d66:	7dbb      	ldrb	r3, [r7, #22]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2310      	movs	r3, #16
 8003d70:	fa03 f202 	lsl.w	r2, r3, r2
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003d7e:	e098      	b.n	8003eb2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003d80:	2100      	movs	r1, #0
 8003d82:	2009      	movs	r0, #9
 8003d84:	f7ff fce7 	bl	8003756 <send_cmd>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8091 	bne.w	8003eb2 <USER_SPI_ioctl+0x2b6>
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	2110      	movs	r1, #16
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fc82 	bl	80036a0 <rcvr_datablock>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8087 	beq.w	8003eb2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <USER_SPI_ioctl+0x2dc>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003db0:	7dbb      	ldrb	r3, [r7, #22]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003db8:	7dfa      	ldrb	r2, [r7, #23]
 8003dba:	09d2      	lsrs	r2, r2, #7
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	7e7b      	ldrb	r3, [r7, #25]
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e013      	b.n	8003dfe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003dd6:	7dbb      	ldrb	r3, [r7, #22]
 8003dd8:	109b      	asrs	r3, r3, #2
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	3301      	adds	r3, #1
 8003de2:	7dfa      	ldrb	r2, [r7, #23]
 8003de4:	00d2      	lsls	r2, r2, #3
 8003de6:	f002 0218 	and.w	r2, r2, #24
 8003dea:	7df9      	ldrb	r1, [r7, #23]
 8003dec:	0949      	lsrs	r1, r1, #5
 8003dee:	b2c9      	uxtb	r1, r1
 8003df0:	440a      	add	r2, r1
 8003df2:	3201      	adds	r2, #1
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003e04:	e055      	b.n	8003eb2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <USER_SPI_ioctl+0x2dc>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	f003 0306 	and.w	r3, r3, #6
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d051      	beq.n	8003eb6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003e12:	f107 020c 	add.w	r2, r7, #12
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	210b      	movs	r1, #11
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff feee 	bl	8003bfc <USER_SPI_ioctl>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d149      	bne.n	8003eba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003e26:	7b3b      	ldrb	r3, [r7, #12]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <USER_SPI_ioctl+0x23e>
 8003e30:	7dbb      	ldrb	r3, [r7, #22]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d041      	beq.n	8003ebe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <USER_SPI_ioctl+0x2dc>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	025b      	lsls	r3, r3, #9
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	025b      	lsls	r3, r3, #9
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e64:	2020      	movs	r0, #32
 8003e66:	f7ff fc76 	bl	8003756 <send_cmd>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d128      	bne.n	8003ec2 <USER_SPI_ioctl+0x2c6>
 8003e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e72:	2021      	movs	r0, #33	; 0x21
 8003e74:	f7ff fc6f 	bl	8003756 <send_cmd>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d121      	bne.n	8003ec2 <USER_SPI_ioctl+0x2c6>
 8003e7e:	2100      	movs	r1, #0
 8003e80:	2026      	movs	r0, #38	; 0x26
 8003e82:	f7ff fc68 	bl	8003756 <send_cmd>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11a      	bne.n	8003ec2 <USER_SPI_ioctl+0x2c6>
 8003e8c:	f247 5030 	movw	r0, #30000	; 0x7530
 8003e90:	f7ff fbbb 	bl	800360a <wait_ready>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d013      	beq.n	8003ec2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003ea0:	e00f      	b.n	8003ec2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003ea8:	e00c      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		break;
 8003eaa:	bf00      	nop
 8003eac:	e00a      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		break;
 8003eae:	bf00      	nop
 8003eb0:	e008      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		break;
 8003eb2:	bf00      	nop
 8003eb4:	e006      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003eb6:	bf00      	nop
 8003eb8:	e004      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <USER_SPI_ioctl+0x2c8>
		break;
 8003ec2:	bf00      	nop
	}

	despiselect();
 8003ec4:	f7ff fbc4 	bl	8003650 <despiselect>

	return res;
 8003ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3730      	adds	r7, #48	; 0x30
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000020 	.word	0x20000020
 8003ed8:	200003e8 	.word	0x200003e8

08003edc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <disk_status+0x30>)
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	79fa      	ldrb	r2, [r7, #7]
 8003ef4:	4905      	ldr	r1, [pc, #20]	; (8003f0c <disk_status+0x30>)
 8003ef6:	440a      	add	r2, r1
 8003ef8:	7a12      	ldrb	r2, [r2, #8]
 8003efa:	4610      	mov	r0, r2
 8003efc:	4798      	blx	r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000414 	.word	0x20000414

08003f10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	4a0d      	ldr	r2, [pc, #52]	; (8003f58 <disk_initialize+0x48>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <disk_initialize+0x48>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <disk_initialize+0x48>)
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	79fa      	ldrb	r2, [r7, #7]
 8003f3e:	4906      	ldr	r1, [pc, #24]	; (8003f58 <disk_initialize+0x48>)
 8003f40:	440a      	add	r2, r1
 8003f42:	7a12      	ldrb	r2, [r2, #8]
 8003f44:	4610      	mov	r0, r2
 8003f46:	4798      	blx	r3
 8003f48:	4603      	mov	r3, r0
 8003f4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000414 	.word	0x20000414

08003f5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <disk_read+0x3c>)
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	689c      	ldr	r4, [r3, #8]
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <disk_read+0x3c>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	7a18      	ldrb	r0, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	47a0      	blx	r4
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000414 	.word	0x20000414

08003f9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <disk_write+0x3c>)
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68dc      	ldr	r4, [r3, #12]
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <disk_write+0x3c>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	7a18      	ldrb	r0, [r3, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	47a0      	blx	r4
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
  return res;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd90      	pop	{r4, r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000414 	.word	0x20000414

08003fdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	603a      	str	r2, [r7, #0]
 8003fe6:	71fb      	strb	r3, [r7, #7]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <disk_ioctl+0x38>)
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	79fa      	ldrb	r2, [r7, #7]
 8003ffa:	4906      	ldr	r1, [pc, #24]	; (8004014 <disk_ioctl+0x38>)
 8003ffc:	440a      	add	r2, r1
 8003ffe:	7a10      	ldrb	r0, [r2, #8]
 8004000:	79b9      	ldrb	r1, [r7, #6]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4798      	blx	r3
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]
  return res;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000414 	.word	0x20000414

08004018 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800402c:	e007      	b.n	800403e <mem_cpy+0x26>
		*d++ = *s++;
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	1c53      	adds	r3, r2, #1
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1c59      	adds	r1, r3, #1
 8004038:	6179      	str	r1, [r7, #20]
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f2      	bne.n	800402e <mem_cpy+0x16>
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004066:	e005      	b.n	8004074 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	617a      	str	r2, [r7, #20]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f4      	bne.n	8004068 <mem_set+0x12>
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80040a4:	bf00      	nop
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <mem_cmp+0x40>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	61fa      	str	r2, [r7, #28]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	61ba      	str	r2, [r7, #24]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	1acb      	subs	r3, r1, r3
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ec      	beq.n	80040a6 <mem_cmp+0x1a>
	return r;
 80040cc:	697b      	ldr	r3, [r7, #20]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80040e4:	e002      	b.n	80040ec <chk_chr+0x12>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3301      	adds	r3, #1
 80040ea:	607b      	str	r3, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <chk_chr+0x26>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d1f2      	bne.n	80040e6 <chk_chr+0xc>
	return *str;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	781b      	ldrb	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e038      	b.n	8004196 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004124:	4930      	ldr	r1, [pc, #192]	; (80041e8 <chk_lock+0xd8>)
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d029      	beq.n	800418c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004138:	492b      	ldr	r1, [pc, #172]	; (80041e8 <chk_lock+0xd8>)
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4613      	mov	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800414e:	429a      	cmp	r2, r3
 8004150:	d11e      	bne.n	8004190 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004152:	4925      	ldr	r1, [pc, #148]	; (80041e8 <chk_lock+0xd8>)
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3304      	adds	r3, #4
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800416a:	429a      	cmp	r2, r3
 800416c:	d110      	bne.n	8004190 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800416e:	491e      	ldr	r1, [pc, #120]	; (80041e8 <chk_lock+0xd8>)
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3308      	adds	r3, #8
 800417e:	881a      	ldrh	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004186:	429a      	cmp	r2, r3
 8004188:	d102      	bne.n	8004190 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800418a:	e007      	b.n	800419c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800418c:	2301      	movs	r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d9c3      	bls.n	8004124 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d109      	bne.n	80041b6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <chk_lock+0x9e>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d101      	bne.n	80041b2 <chk_lock+0xa2>
 80041ae:	2300      	movs	r3, #0
 80041b0:	e013      	b.n	80041da <chk_lock+0xca>
 80041b2:	2312      	movs	r3, #18
 80041b4:	e011      	b.n	80041da <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <chk_lock+0xc4>
 80041bc:	490a      	ldr	r1, [pc, #40]	; (80041e8 <chk_lock+0xd8>)
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	330a      	adds	r3, #10
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d101      	bne.n	80041d8 <chk_lock+0xc8>
 80041d4:	2310      	movs	r3, #16
 80041d6:	e000      	b.n	80041da <chk_lock+0xca>
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	200003fc 	.word	0x200003fc

080041ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	e002      	b.n	80041fe <enq_lock+0x12>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3301      	adds	r3, #1
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d809      	bhi.n	8004218 <enq_lock+0x2c>
 8004204:	490a      	ldr	r1, [pc, #40]	; (8004230 <enq_lock+0x44>)
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ef      	bne.n	80041f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	200003fc 	.word	0x200003fc

08004234 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e02b      	b.n	800429c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004244:	4956      	ldr	r1, [pc, #344]	; (80043a0 <inc_lock+0x16c>)
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800425a:	429a      	cmp	r2, r3
 800425c:	d11b      	bne.n	8004296 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800425e:	4950      	ldr	r1, [pc, #320]	; (80043a0 <inc_lock+0x16c>)
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	3304      	adds	r3, #4
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8004276:	429a      	cmp	r2, r3
 8004278:	d10d      	bne.n	8004296 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800427a:	4949      	ldr	r1, [pc, #292]	; (80043a0 <inc_lock+0x16c>)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3308      	adds	r3, #8
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004292:	429a      	cmp	r2, r3
 8004294:	d006      	beq.n	80042a4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d9d0      	bls.n	8004244 <inc_lock+0x10>
 80042a2:	e000      	b.n	80042a6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80042a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d145      	bne.n	8004338 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e002      	b.n	80042b8 <inc_lock+0x84>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d809      	bhi.n	80042d2 <inc_lock+0x9e>
 80042be:	4938      	ldr	r1, [pc, #224]	; (80043a0 <inc_lock+0x16c>)
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ef      	bne.n	80042b2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d101      	bne.n	80042dc <inc_lock+0xa8>
 80042d8:	2300      	movs	r3, #0
 80042da:	e05a      	b.n	8004392 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80042e2:	482f      	ldr	r0, [pc, #188]	; (80043a0 <inc_lock+0x16c>)
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4403      	add	r3, r0
 80042f0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80042f8:	4829      	ldr	r0, [pc, #164]	; (80043a0 <inc_lock+0x16c>)
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4403      	add	r3, r0
 8004306:	3304      	adds	r3, #4
 8004308:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004310:	4923      	ldr	r1, [pc, #140]	; (80043a0 <inc_lock+0x16c>)
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3308      	adds	r3, #8
 8004320:	4602      	mov	r2, r0
 8004322:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004324:	491e      	ldr	r1, [pc, #120]	; (80043a0 <inc_lock+0x16c>)
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	330a      	adds	r3, #10
 8004334:	2200      	movs	r2, #0
 8004336:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <inc_lock+0x124>
 800433e:	4918      	ldr	r1, [pc, #96]	; (80043a0 <inc_lock+0x16c>)
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	330a      	adds	r3, #10
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <inc_lock+0x124>
 8004354:	2300      	movs	r3, #0
 8004356:	e01c      	b.n	8004392 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <inc_lock+0x142>
 800435e:	4910      	ldr	r1, [pc, #64]	; (80043a0 <inc_lock+0x16c>)
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	330a      	adds	r3, #10
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	b299      	uxth	r1, r3
 8004374:	e001      	b.n	800437a <inc_lock+0x146>
 8004376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800437a:	4809      	ldr	r0, [pc, #36]	; (80043a0 <inc_lock+0x16c>)
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4403      	add	r3, r0
 8004388:	330a      	adds	r3, #10
 800438a:	460a      	mov	r2, r1
 800438c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3301      	adds	r3, #1
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	200003fc 	.word	0x200003fc

080043a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d82e      	bhi.n	8004416 <dec_lock+0x72>
		n = Files[i].ctr;
 80043b8:	491b      	ldr	r1, [pc, #108]	; (8004428 <dec_lock+0x84>)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	330a      	adds	r3, #10
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d2:	d101      	bne.n	80043d8 <dec_lock+0x34>
 80043d4:	2300      	movs	r3, #0
 80043d6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80043d8:	89fb      	ldrh	r3, [r7, #14]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <dec_lock+0x40>
 80043de:	89fb      	ldrh	r3, [r7, #14]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80043e4:	4910      	ldr	r1, [pc, #64]	; (8004428 <dec_lock+0x84>)
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	330a      	adds	r3, #10
 80043f4:	89fa      	ldrh	r2, [r7, #14]
 80043f6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043f8:	89fb      	ldrh	r3, [r7, #14]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <dec_lock+0x6c>
 80043fe:	490a      	ldr	r1, [pc, #40]	; (8004428 <dec_lock+0x84>)
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	737b      	strb	r3, [r7, #13]
 8004414:	e001      	b.n	800441a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004416:	2302      	movs	r3, #2
 8004418:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800441a:	7b7b      	ldrb	r3, [r7, #13]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	200003fc 	.word	0x200003fc

0800442c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e016      	b.n	8004468 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800443a:	4910      	ldr	r1, [pc, #64]	; (800447c <clear_lock+0x50>)
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4613      	mov	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d108      	bne.n	8004462 <clear_lock+0x36>
 8004450:	490a      	ldr	r1, [pc, #40]	; (800447c <clear_lock+0x50>)
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d9e5      	bls.n	800443a <clear_lock+0xe>
	}
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	200003fc 	.word	0x200003fc

08004480 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004492:	2b00      	cmp	r3, #0
 8004494:	d038      	beq.n	8004508 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800449c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	2301      	movs	r3, #1
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	f7ff fd77 	bl	8003f9c <disk_write>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <sync_window+0x3a>
			res = FR_DISK_ERR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e026      	b.n	8004508 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d218      	bcs.n	8004508 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e010      	b.n	8004502 <sync_window+0x82>
					wsect += fs->fsize;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4413      	add	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	2301      	movs	r3, #1
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	f7ff fd50 	bl	8003f9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3b01      	subs	r3, #1
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d8eb      	bhi.n	80044e0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d01b      	beq.n	8004564 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ffa7 	bl	8004480 <sync_window>
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d113      	bne.n	8004564 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	2301      	movs	r3, #1
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	f7ff fd08 	bl	8003f5c <disk_read>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004556:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff82 	bl	8004480 <sync_window>
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 809b 	bne.w	80046be <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800458e:	2b03      	cmp	r3, #3
 8004590:	f040 8088 	bne.w	80046a4 <sync_fs+0x136>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800459a:	2b01      	cmp	r3, #1
 800459c:	f040 8082 	bne.w	80046a4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fd54 	bl	8004056 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2255      	movs	r2, #85	; 0x55
 80045b2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	22aa      	movs	r2, #170	; 0xaa
 80045ba:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2252      	movs	r2, #82	; 0x52
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2252      	movs	r2, #82	; 0x52
 80045c8:	705a      	strb	r2, [r3, #1]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2261      	movs	r2, #97	; 0x61
 80045ce:	709a      	strb	r2, [r3, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2241      	movs	r2, #65	; 0x41
 80045d4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2272      	movs	r2, #114	; 0x72
 80045da:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2272      	movs	r2, #114	; 0x72
 80045e2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2241      	movs	r2, #65	; 0x41
 80045ea:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2261      	movs	r2, #97	; 0x61
 80045f2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800460a:	b29b      	uxth	r3, r3
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	b29b      	uxth	r3, r3
 8004610:	b2da      	uxtb	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	b2da      	uxtb	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800462e:	0e1b      	lsrs	r3, r3, #24
 8004630:	b2da      	uxtb	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800463e:	b2da      	uxtb	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800464c:	b29b      	uxth	r3, r3
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29b      	uxth	r3, r3
 8004652:	b2da      	uxtb	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	b2da      	uxtb	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	b2da      	uxtb	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004696:	2301      	movs	r3, #1
 8004698:	f7ff fc80 	bl	8003f9c <disk_write>
			fs->fsi_flag = 0;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80046aa:	2200      	movs	r2, #0
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fc94 	bl	8003fdc <disk_ioctl>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <sync_fs+0x150>
			res = FR_DISK_ERR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	3b02      	subs	r3, #2
 80046d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046de:	3b02      	subs	r3, #2
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d301      	bcc.n	80046ea <clust2sect+0x22>
 80046e6:	2300      	movs	r3, #0
 80046e8:	e00a      	b.n	8004700 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80046f0:	461a      	mov	r2, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	fb03 f202 	mul.w	r2, r3, r2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80046fe:	4413      	add	r3, r2
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d905      	bls.n	8004728 <get_fat+0x1c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <get_fat+0x22>
		val = 1;	/* Internal error */
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e0a3      	b.n	8004876 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800472e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004732:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800473a:	2b03      	cmp	r3, #3
 800473c:	d068      	beq.n	8004810 <get_fat+0x104>
 800473e:	2b03      	cmp	r3, #3
 8004740:	f300 808f 	bgt.w	8004862 <get_fat+0x156>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <get_fat+0x42>
 8004748:	2b02      	cmp	r3, #2
 800474a:	d040      	beq.n	80047ce <get_fat+0xc2>
 800474c:	e089      	b.n	8004862 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	4413      	add	r3, r2
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fed1 	bl	8004512 <move_window>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d178      	bne.n	8004868 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	60fa      	str	r2, [r7, #12]
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	5cd3      	ldrb	r3, [r2, r3]
 8004784:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	0a5b      	lsrs	r3, r3, #9
 8004790:	4413      	add	r3, r2
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff febc 	bl	8004512 <move_window>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d165      	bne.n	800486c <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	5cd3      	ldrb	r3, [r2, r3]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <get_fat+0xb8>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	e002      	b.n	80047ca <get_fat+0xbe>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ca:	617b      	str	r3, [r7, #20]
			break;
 80047cc:	e053      	b.n	8004876 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	4413      	add	r3, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fe98 	bl	8004512 <move_window>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d143      	bne.n	8004870 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3301      	adds	r3, #1
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	b21a      	sxth	r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b21b      	sxth	r3, r3
 8004806:	4313      	orrs	r3, r2
 8004808:	b21b      	sxth	r3, r3
 800480a:	b29b      	uxth	r3, r3
 800480c:	617b      	str	r3, [r7, #20]
			break;
 800480e:	e032      	b.n	8004876 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	09db      	lsrs	r3, r3, #7
 800481a:	4413      	add	r3, r2
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fe77 	bl	8004512 <move_window>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d124      	bne.n	8004874 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3303      	adds	r3, #3
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	061a      	lsls	r2, r3, #24
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3302      	adds	r3, #2
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	4313      	orrs	r3, r2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	3201      	adds	r2, #1
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	0212      	lsls	r2, r2, #8
 8004852:	4313      	orrs	r3, r2
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800485e:	617b      	str	r3, [r7, #20]
			break;
 8004860:	e009      	b.n	8004876 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8004862:	2301      	movs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e006      	b.n	8004876 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004868:	bf00      	nop
 800486a:	e004      	b.n	8004876 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004874:	bf00      	nop
		}
	}

	return val;
 8004876:	697b      	ldr	r3, [r7, #20]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d905      	bls.n	800489e <put_fat+0x1e>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <put_fat+0x24>
		res = FR_INT_ERR;
 800489e:	2302      	movs	r3, #2
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e0f6      	b.n	8004a92 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	f000 809e 	beq.w	80049ec <put_fat+0x16c>
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	f300 80e4 	bgt.w	8004a7e <put_fat+0x1fe>
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d002      	beq.n	80048c0 <put_fat+0x40>
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d06f      	beq.n	800499e <put_fat+0x11e>
 80048be:	e0de      	b.n	8004a7e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4413      	add	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	0a5b      	lsrs	r3, r3, #9
 80048d8:	4413      	add	r3, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fe18 	bl	8004512 <move_window>
 80048e2:	4603      	mov	r3, r0
 80048e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048e6:	7ffb      	ldrb	r3, [r7, #31]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 80cb 	bne.w	8004a84 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	617a      	str	r2, [r7, #20]
 80048f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <put_fat+0xa4>
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	b25a      	sxtb	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	b25b      	sxtb	r3, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	b25b      	sxtb	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e001      	b.n	8004928 <put_fat+0xa8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	0a5b      	lsrs	r3, r3, #9
 800493e:	4413      	add	r3, r2
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fde5 	bl	8004512 <move_window>
 8004948:	4603      	mov	r3, r0
 800494a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800494c:	7ffb      	ldrb	r3, [r7, #31]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 809a 	bne.w	8004a88 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <put_fat+0xf2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e00e      	b.n	8004990 <put_fat+0x110>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f023 030f 	bic.w	r3, r3, #15
 800497c:	b25a      	sxtb	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	b25b      	sxtb	r3, r3
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	b25b      	sxtb	r3, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	b25b      	sxtb	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800499c:	e079      	b.n	8004a92 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	4413      	add	r3, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff fdb0 	bl	8004512 <move_window>
 80049b2:	4603      	mov	r3, r0
 80049b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d167      	bne.n	8004a8c <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	b29a      	uxth	r2, r3
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	3301      	adds	r3, #1
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80049ea:	e052      	b.n	8004a92 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	09db      	lsrs	r3, r3, #7
 80049f6:	4413      	add	r3, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff fd89 	bl	8004512 <move_window>
 8004a00:	4603      	mov	r3, r0
 8004a02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a04:	7ffb      	ldrb	r3, [r7, #31]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d142      	bne.n	8004a90 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3303      	adds	r3, #3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	061a      	lsls	r2, r3, #24
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3302      	adds	r3, #2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	3201      	adds	r2, #1
 8004a2e:	7812      	ldrb	r2, [r2, #0]
 8004a30:	0212      	lsls	r2, r2, #8
 8004a32:	4313      	orrs	r3, r2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	3301      	adds	r3, #1
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0c1a      	lsrs	r2, r3, #16
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	3302      	adds	r3, #2
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0e1a      	lsrs	r2, r3, #24
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	3303      	adds	r3, #3
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004a7c:	e009      	b.n	8004a92 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e006      	b.n	8004a92 <put_fat+0x212>
			if (res != FR_OK) break;
 8004a84:	bf00      	nop
 8004a86:	e004      	b.n	8004a92 <put_fat+0x212>
			if (res != FR_OK) break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <put_fat+0x212>
			if (res != FR_OK) break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <put_fat+0x212>
			if (res != FR_OK) break;
 8004a90:	bf00      	nop
		}
	}

	return res;
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d905      	bls.n	8004ab8 <remove_chain+0x1c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <remove_chain+0x22>
		res = FR_INT_ERR;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e043      	b.n	8004b46 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004ac2:	e036      	b.n	8004b32 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe20 	bl	800470c <get_fat>
 8004acc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d035      	beq.n	8004b40 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <remove_chain+0x44>
 8004ada:	2302      	movs	r3, #2
 8004adc:	73fb      	strb	r3, [r7, #15]
 8004ade:	e032      	b.n	8004b46 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae6:	d102      	bne.n	8004aee <remove_chain+0x52>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e02b      	b.n	8004b46 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004aee:	2200      	movs	r2, #0
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fec4 	bl	8004880 <put_fat>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d120      	bne.n	8004b44 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0c:	d00f      	beq.n	8004b2e <remove_chain+0x92>
				fs->free_clust++;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d3c2      	bcc.n	8004ac4 <remove_chain+0x28>
 8004b3e:	e002      	b.n	8004b46 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004b44:	bf00      	nop
		}
	}

	return res;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10f      	bne.n	8004b80 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004b66:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <create_chain+0x2a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d31c      	bcc.n	8004bb4 <create_chain+0x64>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e019      	b.n	8004bb4 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fdc2 	bl	800470c <get_fat>
 8004b88:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d801      	bhi.n	8004b94 <create_chain+0x44>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e076      	b.n	8004c82 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9a:	d101      	bne.n	8004ba0 <create_chain+0x50>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	e070      	b.n	8004c82 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d201      	bcs.n	8004bb0 <create_chain+0x60>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	e068      	b.n	8004c82 <create_chain+0x132>
		scl = clst;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d307      	bcc.n	8004bda <create_chain+0x8a>
			ncl = 2;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d901      	bls.n	8004bda <create_chain+0x8a>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e053      	b.n	8004c82 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004bda:	6979      	ldr	r1, [r7, #20]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fd95 	bl	800470c <get_fat>
 8004be2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf0:	d002      	beq.n	8004bf8 <create_chain+0xa8>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <create_chain+0xac>
			return cs;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	e042      	b.n	8004c82 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d1d9      	bne.n	8004bb8 <create_chain+0x68>
 8004c04:	2300      	movs	r3, #0
 8004c06:	e03c      	b.n	8004c82 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004c08:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004c0a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fe35 	bl	8004880 <put_fat>
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <create_chain+0xe4>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fe28 	bl	8004880 <put_fat>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11a      	bne.n	8004c70 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4c:	d018      	beq.n	8004c80 <create_chain+0x130>
			fs->free_clust--;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004c6e:	e007      	b.n	8004c80 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <create_chain+0x12c>
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c7a:	e000      	b.n	8004c7e <create_chain+0x12e>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004c80:	697b      	ldr	r3, [r7, #20]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	0a5b      	lsrs	r3, r3, #9
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004ca8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	613a      	str	r2, [r7, #16]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <clmt_clust+0x3c>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e010      	b.n	8004ce8 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d307      	bcc.n	8004cde <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cdc:	e7e9      	b.n	8004cb2 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8004cde:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004d0e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d007      	beq.n	8004d26 <dir_sdi+0x32>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d301      	bcc.n	8004d2a <dir_sdi+0x36>
		return FR_INT_ERR;
 8004d26:	2302      	movs	r3, #2
 8004d28:	e074      	b.n	8004e14 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <dir_sdi+0x56>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d105      	bne.n	8004d4a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d44:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004d48:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d111      	bne.n	8004d74 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d56:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d301      	bcc.n	8004d66 <dir_sdi+0x72>
			return FR_INT_ERR;
 8004d62:	2302      	movs	r3, #2
 8004d64:	e056      	b.n	8004e14 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d6c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e032      	b.n	8004dda <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d7a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004d82:	e01e      	b.n	8004dc2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fcbd 	bl	800470c <get_fat>
 8004d92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9a:	d101      	bne.n	8004da0 <dir_sdi+0xac>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e039      	b.n	8004e14 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d907      	bls.n	8004db6 <dir_sdi+0xc2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d301      	bcc.n	8004dba <dir_sdi+0xc6>
				return FR_INT_ERR;
 8004db6:	2302      	movs	r3, #2
 8004db8:	e02c      	b.n	8004e14 <dir_sdi+0x120>
			idx -= ic;
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d2dc      	bcs.n	8004d84 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd0:	6979      	ldr	r1, [r7, #20]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fc78 	bl	80046c8 <clust2sect>
 8004dd8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <dir_sdi+0xf8>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e013      	b.n	8004e14 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	091a      	lsrs	r2, r3, #4
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	441a      	add	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e00:	461a      	mov	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	015b      	lsls	r3, r3, #5
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <dir_next+0x26>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <dir_next+0x2a>
		return FR_NO_FILE;
 8004e42:	2304      	movs	r3, #4
 8004e44:	e0dd      	b.n	8005002 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 80c6 	bne.w	8004fde <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e70:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004e74:	461a      	mov	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	f0c0 80b0 	bcc.w	8004fde <dir_next+0x1c2>
				return FR_NO_FILE;
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e0bf      	b.n	8005002 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004e8c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004e90:	3a01      	subs	r2, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f040 80a2 	bne.w	8004fde <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7ff fc2f 	bl	800470c <get_fat>
 8004eae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d801      	bhi.n	8004eba <dir_next+0x9e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0a3      	b.n	8005002 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec0:	d101      	bne.n	8004ec6 <dir_next+0xaa>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e09d      	b.n	8005002 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d374      	bcc.n	8004fc0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <dir_next+0xc4>
 8004edc:	2304      	movs	r3, #4
 8004ede:	e090      	b.n	8005002 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f7ff fe2e 	bl	8004b50 <create_chain>
 8004ef4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <dir_next+0xe4>
 8004efc:	2307      	movs	r3, #7
 8004efe:	e080      	b.n	8005002 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <dir_next+0xee>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e07b      	b.n	8005002 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f10:	d101      	bne.n	8004f16 <dir_next+0xfa>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e075      	b.n	8005002 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff faaf 	bl	8004480 <sync_window>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <dir_next+0x110>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e06a      	b.n	8005002 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff f88c 	bl	8004056 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7ff fbbb 	bl	80046c8 <clust2sect>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	e01b      	b.n	8004f96 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fa85 	bl	8004480 <sync_window>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <dir_next+0x164>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e040      	b.n	8005002 <dir_next+0x1e6>
						dp->fs->winsect++;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f86:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3301      	adds	r3, #1
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f9c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d3da      	bcc.n	8004f5e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fae:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	1a8a      	subs	r2, r1, r2
 8004fbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fb79 	bl	80046c8 <clust2sect>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fee:	461a      	mov	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	015b      	lsls	r3, r3, #5
 8004ff8:	441a      	add	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bd90      	pop	{r4, r7, pc}

0800500a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005014:	2100      	movs	r1, #0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fe6c 	bl	8004cf4 <dir_sdi>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d131      	bne.n	800508a <dir_alloc+0x80>
		n = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f7ff fa6a 	bl	8004512 <move_window>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11f      	bne.n	8005088 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2be5      	cmp	r3, #229	; 0xe5
 8005052:	d005      	beq.n	8005060 <dir_alloc+0x56>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3301      	adds	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d102      	bne.n	8005074 <dir_alloc+0x6a>
 800506e:	e00c      	b.n	800508a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005074:	2101      	movs	r1, #1
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fed0 	bl	8004e1c <dir_next>
 800507c:	4603      	mov	r3, r0
 800507e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0d1      	beq.n	800502a <dir_alloc+0x20>
 8005086:	e000      	b.n	800508a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005088:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d101      	bne.n	8005094 <dir_alloc+0x8a>
 8005090:	2307      	movs	r3, #7
 8005092:	73fb      	strb	r3, [r7, #15]
	return res;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	331b      	adds	r3, #27
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	b21a      	sxth	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	331a      	adds	r3, #26
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	b21b      	sxth	r3, r3
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b21b      	sxth	r3, r3
 80050be:	b29b      	uxth	r3, r3
 80050c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d10f      	bne.n	80050ec <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	3315      	adds	r3, #21
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b21b      	sxth	r3, r3
 80050de:	4313      	orrs	r3, r2
 80050e0:	b21b      	sxth	r3, r3
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

	return cl;
 80050ec:	68fb      	ldr	r3, [r7, #12]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	331a      	adds	r3, #26
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	331b      	adds	r3, #27
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	0c1a      	lsrs	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3314      	adds	r3, #20
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	b29b      	uxth	r3, r3
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3315      	adds	r3, #21
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005150:	2100      	movs	r1, #0
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fdce 	bl	8004cf4 <dir_sdi>
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <dir_find+0x1e>
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	e03b      	b.n	80051de <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f7ff f9cc 	bl	8004512 <move_window>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d128      	bne.n	80051d6 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800518a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <dir_find+0x56>
 8005198:	2304      	movs	r3, #4
 800519a:	75fb      	strb	r3, [r7, #23]
 800519c:	e01e      	b.n	80051dc <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	330b      	adds	r3, #11
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <dir_find+0x7a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051b2:	220b      	movs	r2, #11
 80051b4:	4619      	mov	r1, r3
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f7fe ff68 	bl	800408c <mem_cmp>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80051c2:	2100      	movs	r1, #0
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fe29 	bl	8004e1c <dir_next>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0c8      	beq.n	8005166 <dir_find+0x1e>
 80051d4:	e002      	b.n	80051dc <dir_find+0x94>
		if (res != FR_OK) break;
 80051d6:	bf00      	nop
 80051d8:	e000      	b.n	80051dc <dir_find+0x94>
			break;
 80051da:	bf00      	nop

	return res;
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80051ee:	2101      	movs	r1, #1
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ff0a 	bl	800500a <dir_alloc>
 80051f6:	4603      	mov	r3, r0
 80051f8:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d126      	bne.n	800524e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7ff f97f 	bl	8004512 <move_window>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d117      	bne.n	800524e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005224:	2220      	movs	r2, #32
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe ff14 	bl	8004056 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800523a:	220b      	movs	r2, #11
 800523c:	4619      	mov	r1, r3
 800523e:	f7fe feeb 	bl	8004018 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e002      	b.n	8005270 <create_name+0x18>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b2f      	cmp	r3, #47	; 0x2f
 8005276:	d0f8      	beq.n	800526a <create_name+0x12>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b5c      	cmp	r3, #92	; 0x5c
 800527e:	d0f4      	beq.n	800526a <create_name+0x12>
	sfn = dp->fn;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005286:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005288:	220b      	movs	r2, #11
 800528a:	2120      	movs	r1, #32
 800528c:	68b8      	ldr	r0, [r7, #8]
 800528e:	f7fe fee2 	bl	8004056 <mem_set>
	si = i = b = 0; ni = 8;
 8005292:	2300      	movs	r3, #0
 8005294:	77fb      	strb	r3, [r7, #31]
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	2308      	movs	r3, #8
 80052a0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	617a      	str	r2, [r7, #20]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80052b0:	7fbb      	ldrb	r3, [r7, #30]
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d953      	bls.n	800535e <create_name+0x106>
 80052b6:	7fbb      	ldrb	r3, [r7, #30]
 80052b8:	2b2f      	cmp	r3, #47	; 0x2f
 80052ba:	d050      	beq.n	800535e <create_name+0x106>
 80052bc:	7fbb      	ldrb	r3, [r7, #30]
 80052be:	2b5c      	cmp	r3, #92	; 0x5c
 80052c0:	d04d      	beq.n	800535e <create_name+0x106>
		if (c == '.' || i >= ni) {
 80052c2:	7fbb      	ldrb	r3, [r7, #30]
 80052c4:	2b2e      	cmp	r3, #46	; 0x2e
 80052c6:	d003      	beq.n	80052d0 <create_name+0x78>
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d30f      	bcc.n	80052f0 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d102      	bne.n	80052dc <create_name+0x84>
 80052d6:	7fbb      	ldrb	r3, [r7, #30]
 80052d8:	2b2e      	cmp	r3, #46	; 0x2e
 80052da:	d001      	beq.n	80052e0 <create_name+0x88>
 80052dc:	2306      	movs	r3, #6
 80052de:	e073      	b.n	80053c8 <create_name+0x170>
			i = 8; ni = 11;
 80052e0:	2308      	movs	r3, #8
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	230b      	movs	r3, #11
 80052e6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80052e8:	7ffb      	ldrb	r3, [r7, #31]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e035      	b.n	800535c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80052f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	da08      	bge.n	800530a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80052f8:	7ffb      	ldrb	r3, [r7, #31]
 80052fa:	f043 0303 	orr.w	r3, r3, #3
 80052fe:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005300:	7fbb      	ldrb	r3, [r7, #30]
 8005302:	3b80      	subs	r3, #128	; 0x80
 8005304:	4a32      	ldr	r2, [pc, #200]	; (80053d0 <create_name+0x178>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800530a:	7fbb      	ldrb	r3, [r7, #30]
 800530c:	4619      	mov	r1, r3
 800530e:	4831      	ldr	r0, [pc, #196]	; (80053d4 <create_name+0x17c>)
 8005310:	f7fe fee3 	bl	80040da <chk_chr>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <create_name+0xc6>
				return FR_INVALID_NAME;
 800531a:	2306      	movs	r3, #6
 800531c:	e054      	b.n	80053c8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800531e:	7fbb      	ldrb	r3, [r7, #30]
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d907      	bls.n	8005334 <create_name+0xdc>
 8005324:	7fbb      	ldrb	r3, [r7, #30]
 8005326:	2b5a      	cmp	r3, #90	; 0x5a
 8005328:	d804      	bhi.n	8005334 <create_name+0xdc>
				b |= 2;
 800532a:	7ffb      	ldrb	r3, [r7, #31]
 800532c:	f043 0302 	orr.w	r3, r3, #2
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e00c      	b.n	800534e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005334:	7fbb      	ldrb	r3, [r7, #30]
 8005336:	2b60      	cmp	r3, #96	; 0x60
 8005338:	d909      	bls.n	800534e <create_name+0xf6>
 800533a:	7fbb      	ldrb	r3, [r7, #30]
 800533c:	2b7a      	cmp	r3, #122	; 0x7a
 800533e:	d806      	bhi.n	800534e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005340:	7ffb      	ldrb	r3, [r7, #31]
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	7fbb      	ldrb	r3, [r7, #30]
 800534a:	3b20      	subs	r3, #32
 800534c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	613a      	str	r2, [r7, #16]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4413      	add	r3, r2
 8005358:	7fba      	ldrb	r2, [r7, #30]
 800535a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800535c:	e7a1      	b.n	80052a2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	441a      	add	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005368:	7fbb      	ldrb	r3, [r7, #30]
 800536a:	2b20      	cmp	r3, #32
 800536c:	d801      	bhi.n	8005372 <create_name+0x11a>
 800536e:	2304      	movs	r3, #4
 8005370:	e000      	b.n	8005374 <create_name+0x11c>
 8005372:	2300      	movs	r3, #0
 8005374:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <create_name+0x128>
 800537c:	2306      	movs	r3, #6
 800537e:	e023      	b.n	80053c8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2be5      	cmp	r3, #229	; 0xe5
 8005386:	d102      	bne.n	800538e <create_name+0x136>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2205      	movs	r2, #5
 800538c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d102      	bne.n	800539a <create_name+0x142>
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800539a:	7ffb      	ldrb	r3, [r7, #31]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d103      	bne.n	80053ac <create_name+0x154>
 80053a4:	7fbb      	ldrb	r3, [r7, #30]
 80053a6:	f043 0310 	orr.w	r3, r3, #16
 80053aa:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80053ac:	7ffb      	ldrb	r3, [r7, #31]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d103      	bne.n	80053be <create_name+0x166>
 80053b6:	7fbb      	ldrb	r3, [r7, #30]
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	330b      	adds	r3, #11
 80053c2:	7fba      	ldrb	r2, [r7, #30]
 80053c4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80053c6:	2300      	movs	r3, #0
#endif
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	08006b00 	.word	0x08006b00
 80053d4:	08006a8c 	.word	0x08006a8c

080053d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b2f      	cmp	r3, #47	; 0x2f
 80053e8:	d003      	beq.n	80053f2 <follow_path+0x1a>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b5c      	cmp	r3, #92	; 0x5c
 80053f0:	d102      	bne.n	80053f8 <follow_path+0x20>
		path++;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b1f      	cmp	r3, #31
 8005406:	d80a      	bhi.n	800541e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005408:	2100      	movs	r1, #0
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fc72 	bl	8004cf4 <dir_sdi>
 8005410:	4603      	mov	r3, r0
 8005412:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800541c:	e045      	b.n	80054aa <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800541e:	463b      	mov	r3, r7
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ff18 	bl	8005258 <create_name>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d136      	bne.n	80054a0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fe88 	bl	8005148 <dir_find>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005442:	7adb      	ldrb	r3, [r3, #11]
 8005444:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d128      	bne.n	80054a4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d123      	bne.n	80054a4 <follow_path+0xcc>
 800545c:	2305      	movs	r3, #5
 800545e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005460:	e020      	b.n	80054a4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11d      	bne.n	80054a8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005472:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	330b      	adds	r3, #11
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8005482:	2305      	movs	r3, #5
 8005484:	73fb      	strb	r3, [r7, #15]
 8005486:	e010      	b.n	80054aa <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fe04 	bl	800509e <ld_clust>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800549e:	e7be      	b.n	800541e <follow_path+0x46>
			if (res != FR_OK) break;
 80054a0:	bf00      	nop
 80054a2:	e002      	b.n	80054aa <follow_path+0xd2>
				break;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054a8:	bf00      	nop
		}
	}

	return res;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d031      	beq.n	800552e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e002      	b.n	80054d8 <get_ldnumber+0x24>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	3301      	adds	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d903      	bls.n	80054e8 <get_ldnumber+0x34>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b3a      	cmp	r3, #58	; 0x3a
 80054e6:	d1f4      	bne.n	80054d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b3a      	cmp	r3, #58	; 0x3a
 80054ee:	d11c      	bne.n	800552a <get_ldnumber+0x76>
			tp = *path;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	60fa      	str	r2, [r7, #12]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	3b30      	subs	r3, #48	; 0x30
 8005500:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b09      	cmp	r3, #9
 8005506:	d80e      	bhi.n	8005526 <get_ldnumber+0x72>
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	d10a      	bne.n	8005526 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <get_ldnumber+0x72>
					vol = (int)i;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3301      	adds	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	e002      	b.n	8005530 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800552e:	693b      	ldr	r3, [r7, #16]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005554:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fe ffd9 	bl	8004512 <move_window>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <check_fs+0x2e>
		return 3;
 8005566:	2303      	movs	r3, #3
 8005568:	e04a      	b.n	8005600 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005570:	3301      	adds	r3, #1
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	b21a      	sxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800557e:	b21b      	sxth	r3, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	b21b      	sxth	r3, r3
 8005584:	4a20      	ldr	r2, [pc, #128]	; (8005608 <check_fs+0xcc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d001      	beq.n	800558e <check_fs+0x52>
		return 2;
 800558a:	2302      	movs	r3, #2
 800558c:	e038      	b.n	8005600 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3336      	adds	r3, #54	; 0x36
 8005592:	3303      	adds	r3, #3
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	061a      	lsls	r2, r3, #24
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3336      	adds	r3, #54	; 0x36
 800559c:	3302      	adds	r3, #2
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	4313      	orrs	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	3236      	adds	r2, #54	; 0x36
 80055a8:	3201      	adds	r2, #1
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	0212      	lsls	r2, r2, #8
 80055ae:	4313      	orrs	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <check_fs+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d101      	bne.n	80055c6 <check_fs+0x8a>
		return 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e01c      	b.n	8005600 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3352      	adds	r3, #82	; 0x52
 80055ca:	3303      	adds	r3, #3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	061a      	lsls	r2, r3, #24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3352      	adds	r3, #82	; 0x52
 80055d4:	3302      	adds	r3, #2
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	4313      	orrs	r3, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	3252      	adds	r2, #82	; 0x52
 80055e0:	3201      	adds	r2, #1
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	0212      	lsls	r2, r2, #8
 80055e6:	4313      	orrs	r3, r2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	4a05      	ldr	r2, [pc, #20]	; (800560c <check_fs+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <check_fs+0xc2>
		return 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <check_fs+0xc4>

	return 1;
 80055fe:	2301      	movs	r3, #1
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	ffffaa55 	.word	0xffffaa55
 800560c:	00544146 	.word	0x00544146

08005610 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b096      	sub	sp, #88	; 0x58
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005624:	68b8      	ldr	r0, [r7, #8]
 8005626:	f7ff ff45 	bl	80054b4 <get_ldnumber>
 800562a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	da01      	bge.n	8005636 <find_volume+0x26>
 8005632:	230b      	movs	r3, #11
 8005634:	e2a8      	b.n	8005b88 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005636:	4a9d      	ldr	r2, [pc, #628]	; (80058ac <find_volume+0x29c>)
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <find_volume+0x3a>
 8005646:	230c      	movs	r3, #12
 8005648:	e29e      	b.n	8005b88 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01b      	beq.n	8005692 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fc3b 	bl	8003edc <disk_status>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800566c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10c      	bne.n	8005692 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <find_volume+0x7e>
 800567e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800568a:	230a      	movs	r3, #10
 800568c:	e27c      	b.n	8005b88 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800568e:	2300      	movs	r3, #0
 8005690:	e27a      	b.n	8005b88 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569c:	b2da      	uxtb	r2, r3
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fc30 	bl	8003f10 <disk_initialize>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80056b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056c2:	2303      	movs	r3, #3
 80056c4:	e260      	b.n	8005b88 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <find_volume+0xcc>
 80056cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80056d8:	230a      	movs	r3, #10
 80056da:	e255      	b.n	8005b88 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80056e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056e4:	f7ff ff2a 	bl	800553c <check_fs>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80056ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d153      	bne.n	800579e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80056f6:	2300      	movs	r3, #0
 80056f8:	643b      	str	r3, [r7, #64]	; 0x40
 80056fa:	e028      	b.n	800574e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80056fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005706:	4413      	add	r3, r2
 8005708:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	3304      	adds	r3, #4
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d012      	beq.n	800573a <find_volume+0x12a>
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	330b      	adds	r3, #11
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	061a      	lsls	r2, r3, #24
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	330a      	adds	r3, #10
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	4313      	orrs	r3, r2
 8005726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005728:	3209      	adds	r2, #9
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	0212      	lsls	r2, r2, #8
 800572e:	4313      	orrs	r3, r2
 8005730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005732:	3208      	adds	r2, #8
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	431a      	orrs	r2, r3
 8005738:	e000      	b.n	800573c <find_volume+0x12c>
 800573a:	2200      	movs	r2, #0
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	3358      	adds	r3, #88	; 0x58
 8005742:	443b      	add	r3, r7
 8005744:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574a:	3301      	adds	r3, #1
 800574c:	643b      	str	r3, [r7, #64]	; 0x40
 800574e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005750:	2b03      	cmp	r3, #3
 8005752:	d9d3      	bls.n	80056fc <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005754:	2300      	movs	r3, #0
 8005756:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <find_volume+0x154>
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	3b01      	subs	r3, #1
 8005762:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	3358      	adds	r3, #88	; 0x58
 800576a:	443b      	add	r3, r7
 800576c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005770:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <find_volume+0x174>
 8005778:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800577a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800577c:	f7ff fede 	bl	800553c <check_fs>
 8005780:	4603      	mov	r3, r0
 8005782:	e000      	b.n	8005786 <find_volume+0x176>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800578a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <find_volume+0x18e>
 8005792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005794:	3301      	adds	r3, #1
 8005796:	643b      	str	r3, [r7, #64]	; 0x40
 8005798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579a:	2b03      	cmp	r3, #3
 800579c:	d9e2      	bls.n	8005764 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800579e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d101      	bne.n	80057aa <find_volume+0x19a>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e1ee      	b.n	8005b88 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80057aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <find_volume+0x1a6>
 80057b2:	230d      	movs	r3, #13
 80057b4:	e1e8      	b.n	8005b88 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	7b1b      	ldrb	r3, [r3, #12]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	b21a      	sxth	r2, r3
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	7adb      	ldrb	r3, [r3, #11]
 80057c2:	b21b      	sxth	r3, r3
 80057c4:	4313      	orrs	r3, r2
 80057c6:	b21b      	sxth	r3, r3
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d001      	beq.n	80057d2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80057ce:	230d      	movs	r3, #13
 80057d0:	e1da      	b.n	8005b88 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	7ddb      	ldrb	r3, [r3, #23]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	b21a      	sxth	r2, r3
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	7d9b      	ldrb	r3, [r3, #22]
 80057de:	b21b      	sxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80057e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d112      	bne.n	8005814 <find_volume+0x204>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80057f4:	061a      	lsls	r2, r3, #24
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	4313      	orrs	r3, r2
 8005800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005802:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005806:	0212      	lsls	r2, r2, #8
 8005808:	4313      	orrs	r3, r2
 800580a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005810:	4313      	orrs	r3, r2
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005818:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	7c1a      	ldrb	r2, [r3, #16]
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800582c:	2b01      	cmp	r3, #1
 800582e:	d006      	beq.n	800583e <find_volume+0x22e>
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005836:	2b02      	cmp	r3, #2
 8005838:	d001      	beq.n	800583e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800583a:	230d      	movs	r3, #13
 800583c:	e1a4      	b.n	8005b88 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005844:	461a      	mov	r2, r3
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	7b5a      	ldrb	r2, [r3, #13]
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <find_volume+0x268>
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005868:	461a      	mov	r2, r3
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005870:	3b01      	subs	r3, #1
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8005878:	230d      	movs	r3, #13
 800587a:	e185      	b.n	8005b88 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	7c9b      	ldrb	r3, [r3, #18]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	b21a      	sxth	r2, r3
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	7c5b      	ldrb	r3, [r3, #17]
 8005888:	b21b      	sxth	r3, r3
 800588a:	4313      	orrs	r3, r2
 800588c:	b21b      	sxth	r3, r3
 800588e:	b29a      	uxth	r2, r3
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80058a6:	230d      	movs	r3, #13
 80058a8:	e16e      	b.n	8005b88 <find_volume+0x578>
 80058aa:	bf00      	nop
 80058ac:	200003f4 	.word	0x200003f4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	7d1b      	ldrb	r3, [r3, #20]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	7cdb      	ldrb	r3, [r3, #19]
 80058bc:	b21b      	sxth	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d112      	bne.n	80058f2 <find_volume+0x2e2>
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80058d2:	061a      	lsls	r2, r3, #24
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80058da:	041b      	lsls	r3, r3, #16
 80058dc:	4313      	orrs	r3, r2
 80058de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80058e4:	0212      	lsls	r2, r2, #8
 80058e6:	4313      	orrs	r3, r2
 80058e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	7bdb      	ldrb	r3, [r3, #15]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	7b9b      	ldrb	r3, [r3, #14]
 80058fe:	b21b      	sxth	r3, r3
 8005900:	4313      	orrs	r3, r2
 8005902:	b21b      	sxth	r3, r3
 8005904:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005906:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <find_volume+0x300>
 800590c:	230d      	movs	r3, #13
 800590e:	e13b      	b.n	8005b88 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005910:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005914:	4413      	add	r3, r2
 8005916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005918:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800591c:	0912      	lsrs	r2, r2, #4
 800591e:	b292      	uxth	r2, r2
 8005920:	4413      	add	r3, r2
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	429a      	cmp	r2, r3
 800592a:	d201      	bcs.n	8005930 <find_volume+0x320>
 800592c:	230d      	movs	r3, #13
 800592e:	e12b      	b.n	8005b88 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005938:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800593c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <find_volume+0x33c>
 8005948:	230d      	movs	r3, #13
 800594a:	e11d      	b.n	8005b88 <find_volume+0x578>
	fmt = FS_FAT12;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005958:	4293      	cmp	r3, r2
 800595a:	d902      	bls.n	8005962 <find_volume+0x352>
 800595c:	2302      	movs	r3, #2
 800595e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005968:	4293      	cmp	r3, r2
 800596a:	d902      	bls.n	8005972 <find_volume+0x362>
 800596c:	2303      	movs	r3, #3
 800596e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	1c9a      	adds	r2, r3, #2
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005980:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005988:	441a      	add	r2, r3
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	441a      	add	r2, r3
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800599c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d121      	bne.n	80059e8 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <find_volume+0x3a2>
 80059ae:	230d      	movs	r3, #13
 80059b0:	e0ea      	b.n	8005b88 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80059b8:	061a      	lsls	r2, r3, #24
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	4313      	orrs	r3, r2
 80059c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80059ca:	0212      	lsls	r2, r2, #8
 80059cc:	4313      	orrs	r3, r2
 80059ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059d0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80059d4:	431a      	orrs	r2, r3
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
 80059e6:	e025      	b.n	8005a34 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <find_volume+0x3e6>
 80059f2:	230d      	movs	r3, #13
 80059f4:	e0c8      	b.n	8005b88 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80059fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fe:	441a      	add	r2, r3
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d104      	bne.n	8005a18 <find_volume+0x408>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	e00c      	b.n	8005a32 <find_volume+0x422>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	085a      	lsrs	r2, r3, #1
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005a32:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005a40:	0a5b      	lsrs	r3, r3, #9
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d201      	bcs.n	8005a4a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8005a46:	230d      	movs	r3, #13
 8005a48:	e09e      	b.n	8005b88 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	2280      	movs	r2, #128	; 0x80
 8005a64:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d177      	bne.n	8005b60 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	b21a      	sxth	r2, r3
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	4313      	orrs	r3, r2
 8005a84:	b21b      	sxth	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d16a      	bne.n	8005b60 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a92:	f7fe fd3e 	bl	8004512 <move_window>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d161      	bne.n	8005b60 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	b21a      	sxth	r2, r3
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005ab4:	b21b      	sxth	r3, r3
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b21b      	sxth	r3, r3
 8005aba:	4a35      	ldr	r2, [pc, #212]	; (8005b90 <find_volume+0x580>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d14f      	bne.n	8005b60 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	061a      	lsls	r2, r3, #24
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	789b      	ldrb	r3, [r3, #2]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	4313      	orrs	r3, r2
 8005ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad0:	7852      	ldrb	r2, [r2, #1]
 8005ad2:	0212      	lsls	r2, r2, #8
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad8:	7812      	ldrb	r2, [r2, #0]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <find_volume+0x584>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d13e      	bne.n	8005b60 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	4313      	orrs	r3, r2
 8005af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005afa:	0212      	lsls	r2, r2, #8
 8005afc:	4313      	orrs	r3, r2
 8005afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b00:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <find_volume+0x588>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d129      	bne.n	8005b60 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005b12:	061a      	lsls	r2, r3, #24
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b20:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005b24:	0212      	lsls	r2, r2, #8
 8005b26:	4313      	orrs	r3, r2
 8005b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005b3c:	061a      	lsls	r2, r3, #24
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005b44:	041b      	lsls	r3, r3, #16
 8005b46:	4313      	orrs	r3, r2
 8005b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b4a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005b4e:	0212      	lsls	r2, r2, #8
 8005b50:	4313      	orrs	r3, r2
 8005b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b54:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005b66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <find_volume+0x58c>)
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <find_volume+0x58c>)
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <find_volume+0x58c>)
 8005b78:	881a      	ldrh	r2, [r3, #0]
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b82:	f7fe fc53 	bl	800442c <clear_lock>
#endif

	return FR_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3758      	adds	r7, #88	; 0x58
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	ffffaa55 	.word	0xffffaa55
 8005b94:	41615252 	.word	0x41615252
 8005b98:	61417272 	.word	0x61417272
 8005b9c:	200003f8 	.word	0x200003f8

08005ba0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d022      	beq.n	8005bf8 <validate+0x58>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01d      	beq.n	8005bf8 <validate+0x58>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <validate+0x58>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bd0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d10c      	bne.n	8005bf8 <validate+0x58>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005be4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe f977 	bl	8003edc <disk_status>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005bf8:	2309      	movs	r3, #9
 8005bfa:	e000      	b.n	8005bfe <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005c1a:	f107 0310 	add.w	r3, r7, #16
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fc48 	bl	80054b4 <get_ldnumber>
 8005c24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	da01      	bge.n	8005c30 <f_mount+0x28>
 8005c2c:	230b      	movs	r3, #11
 8005c2e:	e02d      	b.n	8005c8c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005c30:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <f_mount+0x8c>)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005c40:	69b8      	ldr	r0, [r7, #24]
 8005c42:	f7fe fbf3 	bl	800442c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	490d      	ldr	r1, [pc, #52]	; (8005c94 <f_mount+0x8c>)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <f_mount+0x6a>
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d001      	beq.n	8005c76 <f_mount+0x6e>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e00a      	b.n	8005c8c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005c76:	f107 0108 	add.w	r1, r7, #8
 8005c7a:	f107 030c 	add.w	r3, r7, #12
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fcc5 	bl	8005610 <find_volume>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3720      	adds	r7, #32
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	200003f4 	.word	0x200003f4

08005c98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ca4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005ca8:	6018      	str	r0, [r3, #0]
 8005caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cae:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005cb2:	6019      	str	r1, [r3, #0]
 8005cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cb8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005cbc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cc2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <f_open+0x38>
 8005ccc:	2309      	movs	r3, #9
 8005cce:	e257      	b.n	8006180 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8005cd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cd4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005ce0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ce4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005ce8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005cec:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	f002 021f 	and.w	r2, r2, #31
 8005cf6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cfc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	f107 0108 	add.w	r1, r7, #8
 8005d0c:	f107 0320 	add.w	r3, r7, #32
 8005d10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fc7b 	bl	8005610 <find_volume>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005d20:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f040 8229 	bne.w	800617c <f_open+0x4e4>
		INIT_BUF(dj);
 8005d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d2e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d32:	f107 0214 	add.w	r2, r7, #20
 8005d36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d3e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	f107 0320 	add.w	r3, r7, #32
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fb44 	bl	80053d8 <follow_path>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8005d56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d5a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d62:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005d66:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11d      	bne.n	8005daa <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8005d6e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <f_open+0xe6>
				res = FR_INVALID_NAME;
 8005d76:	2306      	movs	r3, #6
 8005d78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005d7c:	e015      	b.n	8005daa <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d82:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bf14      	ite	ne
 8005d90:	2301      	movne	r3, #1
 8005d92:	2300      	moveq	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	f107 0320 	add.w	r3, r7, #32
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe f9b6 	bl	8004110 <chk_lock>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005dae:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 031c 	and.w	r3, r3, #28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80e6 	beq.w	8005f8a <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8005dbe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d027      	beq.n	8005e16 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005dc6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d10e      	bne.n	8005dec <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005dce:	f7fe fa0d 	bl	80041ec <enq_lock>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <f_open+0x14e>
 8005dd8:	f107 0320 	add.w	r3, r7, #32
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fa02 	bl	80051e6 <dir_register>
 8005de2:	4603      	mov	r3, r0
 8005de4:	e000      	b.n	8005de8 <f_open+0x150>
 8005de6:	2312      	movs	r3, #18
 8005de8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005df0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005df4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005df8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	f042 0208 	orr.w	r2, r2, #8
 8005e02:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e08:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005e0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e10:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005e14:	e017      	b.n	8005e46 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005e1a:	330b      	adds	r3, #11
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f003 0311 	and.w	r3, r3, #17
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <f_open+0x196>
					res = FR_DENIED;
 8005e26:	2307      	movs	r3, #7
 8005e28:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005e2c:	e00b      	b.n	8005e46 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e32:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <f_open+0x1ae>
						res = FR_EXIST;
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e46:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 80c1 	bne.w	8005fd2 <f_open+0x33a>
 8005e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e54:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80b7 	beq.w	8005fd2 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8005e64:	f7fd fafc 	bl	8003460 <get_fattime>
 8005e68:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005e6c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005e70:	330e      	adds	r3, #14
 8005e72:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005e88:	330f      	adds	r3, #15
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005e92:	0c1a      	lsrs	r2, r3, #16
 8005e94:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005e98:	3310      	adds	r3, #16
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005ea2:	0e1a      	lsrs	r2, r3, #24
 8005ea4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ea8:	3311      	adds	r3, #17
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005eae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005eb2:	330b      	adds	r3, #11
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005eb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ebc:	331c      	adds	r3, #28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ec6:	331d      	adds	r3, #29
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ed0:	331e      	adds	r3, #30
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005eda:	331f      	adds	r3, #31
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ee4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005eec:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff f8d4 	bl	800509e <ld_clust>
 8005ef6:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8005efa:	2100      	movs	r1, #0
 8005efc:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8005f00:	f7ff f8fb 	bl	80050fa <st_clust>
				dj.fs->wflag = 1;
 8005f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f08:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005f16:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d059      	beq.n	8005fd2 <f_open+0x33a>
					dw = dj.fs->winsect;
 8005f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f22:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f2a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005f2e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8005f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f36:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f3e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fdaa 	bl	8004a9c <remove_chain>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8005f4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d13d      	bne.n	8005fd2 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f5a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f62:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8005f66:	3a01      	subs	r2, #1
 8005f68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f70:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f78:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe fac8 	bl	8004512 <move_window>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005f88:	e023      	b.n	8005fd2 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005f8a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11f      	bne.n	8005fd2 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005f92:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005f96:	330b      	adds	r3, #11
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <f_open+0x312>
					res = FR_NO_FILE;
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005fa8:	e013      	b.n	8005fd2 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fae:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <f_open+0x33a>
 8005fbc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005fc0:	330b      	adds	r3, #11
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <f_open+0x33a>
						res = FR_DENIED;
 8005fcc:	2307      	movs	r3, #7
 8005fce:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8005fd2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d153      	bne.n	8006082 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005fda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fde:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8005fec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ff0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005ff4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005ff8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	f042 0220 	orr.w	r2, r2, #32
 8006002:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006008:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800600c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006010:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006018:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8006022:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006026:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006030:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006034:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006038:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	f107 0320 	add.w	r3, r7, #32
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe f8ed 	bl	8004234 <inc_lock>
 800605a:	4602      	mov	r2, r0
 800605c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006060:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800606a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800606e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <f_open+0x3ea>
 800607c:	2302      	movs	r3, #2
 800607e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006082:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006086:	2b00      	cmp	r3, #0
 8006088:	d178      	bne.n	800617c <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800608a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800608e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006098:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80060a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80060b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060b6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80060ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060be:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe ffeb 	bl	800509e <ld_clust>
 80060c8:	4602      	mov	r2, r0
 80060ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060ce:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80060d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80060dc:	331f      	adds	r3, #31
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	061a      	lsls	r2, r3, #24
 80060e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80060e6:	331e      	adds	r3, #30
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80060f2:	321d      	adds	r2, #29
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	0212      	lsls	r2, r2, #8
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80060fe:	321c      	adds	r2, #28
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	431a      	orrs	r2, r3
 8006104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006108:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8006112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006116:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8006122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006126:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006136:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006146:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800614a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800614e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006152:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800615c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006160:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800616a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800616e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006172:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800617c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006180:	4618      	mov	r0, r3
 8006182:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b08c      	sub	sp, #48	; 0x30
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fcfc 	bl	8005ba0 <validate>
 80061a8:	4603      	mov	r3, r0
 80061aa:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80061ac:	7ffb      	ldrb	r3, [r7, #31]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <f_read+0x2c>
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
 80061b4:	e150      	b.n	8006458 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80061c6:	e147      	b.n	8006458 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80061d6:	2307      	movs	r3, #7
 80061d8:	e13e      	b.n	8006458 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	f240 812d 	bls.w	800644e <f_read+0x2c4>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80061f8:	e129      	b.n	800644e <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 80f2 	bne.w	80063ee <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006210:	0a5b      	lsrs	r3, r3, #9
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800621a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800621e:	3b01      	subs	r3, #1
 8006220:	b2db      	uxtb	r3, r3
 8006222:	4013      	ands	r3, r2
 8006224:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d139      	bne.n	80062a0 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623e:	e018      	b.n	8006272 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006250:	4619      	mov	r1, r3
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7fe fd19 	bl	8004c8a <clmt_clust>
 8006258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800625a:	e00a      	b.n	8006272 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f7fe fa4e 	bl	800470c <get_fat>
 8006270:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d805      	bhi.n	8006284 <f_read+0xfa>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006280:	2302      	movs	r3, #2
 8006282:	e0e9      	b.n	8006458 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800628a:	d105      	bne.n	8006298 <f_read+0x10e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006294:	2301      	movs	r3, #1
 8006296:	e0df      	b.n	8006458 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f7fe fa0a 	bl	80046c8 <clust2sect>
 80062b4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <f_read+0x13e>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80062c4:	2302      	movs	r3, #2
 80062c6:	e0c7      	b.n	8006458 <f_read+0x2ce>
			sect += csect;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4413      	add	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	0a5b      	lsrs	r3, r3, #9
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d046      	beq.n	800636a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80062dc:	7dfa      	ldrb	r2, [r7, #23]
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	4413      	add	r3, r2
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80062e8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d908      	bls.n	8006302 <f_read+0x178>
					cc = fp->fs->csize - csect;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062f6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062fa:	461a      	mov	r2, r3
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006308:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	f7fd fe23 	bl	8003f5c <disk_read>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006324:	2301      	movs	r3, #1
 8006326:	e097      	b.n	8006458 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d015      	beq.n	8006362 <f_read+0x1d8>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	429a      	cmp	r2, r3
 8006344:	d90d      	bls.n	8006362 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	025b      	lsls	r3, r3, #9
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	4413      	add	r3, r2
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800635c:	4618      	mov	r0, r3
 800635e:	f7fd fe5b 	bl	8004018 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006368:	e05b      	b.n	8006422 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d037      	beq.n	80063e6 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01d      	beq.n	80063c0 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800638a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006396:	2301      	movs	r3, #1
 8006398:	f7fd fe00 	bl	8003f9c <disk_write>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80063aa:	2301      	movs	r3, #1
 80063ac:	e054      	b.n	8006458 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80063b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063c6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	2301      	movs	r3, #1
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	f7fd fdc4 	bl	8003f5c <disk_read>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80063e2:	2301      	movs	r3, #1
 80063e4:	e038      	b.n	8006458 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80063f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80063fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d901      	bls.n	800640a <f_read+0x280>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641a:	4619      	mov	r1, r3
 800641c:	6a38      	ldr	r0, [r7, #32]
 800641e:	f7fd fdfb 	bl	8004018 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	4413      	add	r3, r2
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	441a      	add	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	441a      	add	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f47f aed2 	bne.w	80061fa <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3730      	adds	r7, #48	; 0x30
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fb99 	bl	8005ba0 <validate>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 80a8 	bne.w	80065ca <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80a0 	beq.w	80065ca <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d019      	beq.n	80064cc <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800649e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80064aa:	2301      	movs	r3, #1
 80064ac:	f7fd fd76 	bl	8003f9c <disk_write>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80064b6:	2301      	movs	r3, #1
 80064b8:	e088      	b.n	80065cc <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80064c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fe f819 	bl	8004512 <move_window>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d16f      	bne.n	80065ca <f_sync+0x16a>
				dir = fp->dir_ptr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80064f0:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	330b      	adds	r3, #11
 80064f6:	781a      	ldrb	r2, [r3, #0]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	330b      	adds	r3, #11
 80064fc:	f042 0220 	orr.w	r2, r2, #32
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	331c      	adds	r3, #28
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006518:	b29b      	uxth	r3, r3
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	b29a      	uxth	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	331d      	adds	r3, #29
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800652c:	0c1a      	lsrs	r2, r3, #16
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	331e      	adds	r3, #30
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800653c:	0e1a      	lsrs	r2, r3, #24
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	331f      	adds	r3, #31
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800654c:	4619      	mov	r1, r3
 800654e:	6938      	ldr	r0, [r7, #16]
 8006550:	f7fe fdd3 	bl	80050fa <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006554:	f7fc ff84 	bl	8003460 <get_fattime>
 8006558:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3316      	adds	r3, #22
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	b29b      	uxth	r3, r3
 8006568:	0a1b      	lsrs	r3, r3, #8
 800656a:	b29a      	uxth	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	3317      	adds	r3, #23
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	0c1a      	lsrs	r2, r3, #16
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3318      	adds	r3, #24
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	0e1a      	lsrs	r2, r3, #24
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	3319      	adds	r3, #25
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3312      	adds	r3, #18
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3313      	adds	r3, #19
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80065a2:	f023 0320 	bic.w	r3, r3, #32
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fd ffd4 	bl	800456e <sync_fs>
 80065c6:	4603      	mov	r3, r0
 80065c8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff3f 	bl	8006460 <f_sync>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fad7 	bl	8005ba0 <validate>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10e      	bne.n	800661a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006602:	4618      	mov	r0, r3
 8006604:	f7fd fece 	bl	80043a4 <dec_lock>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006630:	f107 030c 	add.w	r3, r7, #12
 8006634:	2200      	movs	r2, #0
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fe ffe9 	bl	8005610 <find_volume>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800664a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 80af 	bne.w	80067b2 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006660:	3b02      	subs	r3, #2
 8006662:	429a      	cmp	r2, r3
 8006664:	d805      	bhi.n	8006672 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e09f      	b.n	80067b2 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006678:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800667e:	7efb      	ldrb	r3, [r7, #27]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d125      	bne.n	80066d0 <f_getfree+0xac>
				clst = 2;
 8006684:	2302      	movs	r3, #2
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800668a:	69f8      	ldr	r0, [r7, #28]
 800668c:	f7fe f83e 	bl	800470c <get_fat>
 8006690:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006698:	d103      	bne.n	80066a2 <f_getfree+0x7e>
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80066a0:	e077      	b.n	8006792 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d103      	bne.n	80066b0 <f_getfree+0x8c>
 80066a8:	2302      	movs	r3, #2
 80066aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80066ae:	e070      	b.n	8006792 <f_getfree+0x16e>
					if (stat == 0) n++;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <f_getfree+0x98>
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	3301      	adds	r3, #1
 80066ba:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	3301      	adds	r3, #1
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d3dc      	bcc.n	8006688 <f_getfree+0x64>
 80066ce:	e060      	b.n	8006792 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
 80066e4:	2300      	movs	r3, #0
 80066e6:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d112      	bne.n	8006714 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80066f4:	4619      	mov	r1, r3
 80066f6:	69f8      	ldr	r0, [r7, #28]
 80066f8:	f7fd ff0b 	bl	8004512 <move_window>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006706:	2b00      	cmp	r3, #0
 8006708:	d142      	bne.n	8006790 <f_getfree+0x16c>
						p = fs->win.d8;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800670e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006714:	7efb      	ldrb	r3, [r7, #27]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d115      	bne.n	8006746 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	3301      	adds	r3, #1
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	b21a      	sxth	r2, r3
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	b21b      	sxth	r3, r3
 800672a:	4313      	orrs	r3, r2
 800672c:	b21b      	sxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <f_getfree+0x114>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	3301      	adds	r3, #1
 8006736:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	3302      	adds	r3, #2
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	3b02      	subs	r3, #2
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
 8006744:	e01d      	b.n	8006782 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	3303      	adds	r3, #3
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	061a      	lsls	r2, r3, #24
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	3302      	adds	r3, #2
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	4313      	orrs	r3, r2
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	3201      	adds	r2, #1
 800675c:	7812      	ldrb	r2, [r2, #0]
 800675e:	0212      	lsls	r2, r2, #8
 8006760:	4313      	orrs	r3, r2
 8006762:	6a3a      	ldr	r2, [r7, #32]
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	4313      	orrs	r3, r2
 8006768:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <f_getfree+0x152>
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	3301      	adds	r3, #1
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	3304      	adds	r3, #4
 800677a:	623b      	str	r3, [r7, #32]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	3b04      	subs	r3, #4
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	3b01      	subs	r3, #1
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1ac      	bne.n	80066e8 <f_getfree+0xc4>
 800678e:	e000      	b.n	8006792 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8006790:	bf00      	nop
			}
			fs->free_clust = n;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006796:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b0:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80067b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3738      	adds	r7, #56	; 0x38
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b088      	sub	sp, #32
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
	int n = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80067d2:	e01b      	b.n	800680c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	f107 0114 	add.w	r1, r7, #20
 80067dc:	2201      	movs	r2, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fcd3 	bl	800618a <f_read>
		if (rc != 1) break;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d116      	bne.n	8006818 <f_gets+0x5a>
		c = s[0];
 80067ea:	7d3b      	ldrb	r3, [r7, #20]
 80067ec:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b0d      	cmp	r3, #13
 80067f2:	d100      	bne.n	80067f6 <f_gets+0x38>
 80067f4:	e00a      	b.n	800680c <f_gets+0x4e>
		*p++ = c;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	61ba      	str	r2, [r7, #24]
 80067fc:	7dfa      	ldrb	r2, [r7, #23]
 80067fe:	701a      	strb	r2, [r3, #0]
		n++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b0a      	cmp	r3, #10
 800680a:	d007      	beq.n	800681c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	3b01      	subs	r3, #1
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	429a      	cmp	r2, r3
 8006814:	dbde      	blt.n	80067d4 <f_gets+0x16>
 8006816:	e002      	b.n	800681e <f_gets+0x60>
		if (rc != 1) break;
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800681c:	bf00      	nop
	}
	*p = 0;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <f_gets+0x70>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	e000      	b.n	8006830 <f_gets+0x72>
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3720      	adds	r7, #32
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	4613      	mov	r3, r2
 8006844:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800684e:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006850:	7a5b      	ldrb	r3, [r3, #9]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d831      	bhi.n	80068bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006858:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 800685a:	7a5b      	ldrb	r3, [r3, #9]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006862:	2100      	movs	r1, #0
 8006864:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006866:	4b19      	ldr	r3, [pc, #100]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006868:	7a5b      	ldrb	r3, [r3, #9]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	4a17      	ldr	r2, [pc, #92]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006876:	4b15      	ldr	r3, [pc, #84]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006878:	7a5b      	ldrb	r3, [r3, #9]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006880:	4413      	add	r3, r2
 8006882:	79fa      	ldrb	r2, [r7, #7]
 8006884:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006888:	7a5b      	ldrb	r3, [r3, #9]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	b2d1      	uxtb	r1, r2
 8006890:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <FATFS_LinkDriverEx+0x94>)
 8006892:	7251      	strb	r1, [r2, #9]
 8006894:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006896:	7dbb      	ldrb	r3, [r7, #22]
 8006898:	3330      	adds	r3, #48	; 0x30
 800689a:	b2da      	uxtb	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3301      	adds	r3, #1
 80068a4:	223a      	movs	r2, #58	; 0x3a
 80068a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	3302      	adds	r3, #2
 80068ac:	222f      	movs	r2, #47	; 0x2f
 80068ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	3303      	adds	r3, #3
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20000414 	.word	0x20000414

080068d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80068da:	2200      	movs	r2, #0
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ffaa 	bl	8006838 <FATFS_LinkDriverEx>
 80068e4:	4603      	mov	r3, r0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <__libc_init_array>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	4d0d      	ldr	r5, [pc, #52]	; (8006928 <__libc_init_array+0x38>)
 80068f4:	4c0d      	ldr	r4, [pc, #52]	; (800692c <__libc_init_array+0x3c>)
 80068f6:	1b64      	subs	r4, r4, r5
 80068f8:	10a4      	asrs	r4, r4, #2
 80068fa:	2600      	movs	r6, #0
 80068fc:	42a6      	cmp	r6, r4
 80068fe:	d109      	bne.n	8006914 <__libc_init_array+0x24>
 8006900:	4d0b      	ldr	r5, [pc, #44]	; (8006930 <__libc_init_array+0x40>)
 8006902:	4c0c      	ldr	r4, [pc, #48]	; (8006934 <__libc_init_array+0x44>)
 8006904:	f000 f820 	bl	8006948 <_init>
 8006908:	1b64      	subs	r4, r4, r5
 800690a:	10a4      	asrs	r4, r4, #2
 800690c:	2600      	movs	r6, #0
 800690e:	42a6      	cmp	r6, r4
 8006910:	d105      	bne.n	800691e <__libc_init_array+0x2e>
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	f855 3b04 	ldr.w	r3, [r5], #4
 8006918:	4798      	blx	r3
 800691a:	3601      	adds	r6, #1
 800691c:	e7ee      	b.n	80068fc <__libc_init_array+0xc>
 800691e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006922:	4798      	blx	r3
 8006924:	3601      	adds	r6, #1
 8006926:	e7f2      	b.n	800690e <__libc_init_array+0x1e>
 8006928:	08006b80 	.word	0x08006b80
 800692c:	08006b80 	.word	0x08006b80
 8006930:	08006b80 	.word	0x08006b80
 8006934:	08006b84 	.word	0x08006b84

08006938 <memset>:
 8006938:	4402      	add	r2, r0
 800693a:	4603      	mov	r3, r0
 800693c:	4293      	cmp	r3, r2
 800693e:	d100      	bne.n	8006942 <memset+0xa>
 8006940:	4770      	bx	lr
 8006942:	f803 1b01 	strb.w	r1, [r3], #1
 8006946:	e7f9      	b.n	800693c <memset+0x4>

08006948 <_init>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr

08006954 <_fini>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	bf00      	nop
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr
